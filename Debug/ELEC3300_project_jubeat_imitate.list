
ELEC3300_project_jubeat_imitate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022d0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000079c  080024b4  080024b4  000124b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c50  08002c50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c50  08002c50  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c50  08002c50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c50  08002c50  00012c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c54  08002c54  00012c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08002c64  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002c64  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000820b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c0a  00000000  00000000  00028240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  00029e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  0002a7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019eda  00000000  00000000  0002b078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a32f  00000000  00000000  00044f52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093996  00000000  00000000  0004f281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2c17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024c4  00000000  00000000  000e2c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800249c 	.word	0x0800249c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	0800249c 	.word	0x0800249c

08000224 <an_apple_LCD>:

#include "blank_space.h"
#include "dy_sv17f.h"
#include "lcd.h"

void an_apple_LCD(void) {
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af02      	add	r7, sp, #8
			LCD_Clear(0, 0, 240, 320, WHITE);
 800022a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800022e:	9300      	str	r3, [sp, #0]
 8000230:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000234:	22f0      	movs	r2, #240	; 0xf0
 8000236:	2100      	movs	r1, #0
 8000238:	2000      	movs	r0, #0
 800023a:	f000 fa80 	bl	800073e <LCD_Clear>
		  LCD_DrawString(60,50,"An Apple");
 800023e:	4a10      	ldr	r2, [pc, #64]	; (8000280 <an_apple_LCD+0x5c>)
 8000240:	2132      	movs	r1, #50	; 0x32
 8000242:	203c      	movs	r0, #60	; 0x3c
 8000244:	f000 fae4 	bl	8000810 <LCD_DrawString>
		  LCD_DrawString(100,80,"-- Mayday ");
 8000248:	4a0e      	ldr	r2, [pc, #56]	; (8000284 <an_apple_LCD+0x60>)
 800024a:	2150      	movs	r1, #80	; 0x50
 800024c:	2064      	movs	r0, #100	; 0x64
 800024e:	f000 fadf 	bl	8000810 <LCD_DrawString>
		  LCD_DrawString(20,110,"Difficulty: Normal");
 8000252:	4a0d      	ldr	r2, [pc, #52]	; (8000288 <an_apple_LCD+0x64>)
 8000254:	216e      	movs	r1, #110	; 0x6e
 8000256:	2014      	movs	r0, #20
 8000258:	f000 fada 	bl	8000810 <LCD_DrawString>
		  LCD_DrawString(20,130,"Score: 0000");
 800025c:	4a0b      	ldr	r2, [pc, #44]	; (800028c <an_apple_LCD+0x68>)
 800025e:	2182      	movs	r1, #130	; 0x82
 8000260:	2014      	movs	r0, #20
 8000262:	f000 fad5 	bl	8000810 <LCD_DrawString>
		  LCD_DrawString(100,170,"Playing");
 8000266:	4a0a      	ldr	r2, [pc, #40]	; (8000290 <an_apple_LCD+0x6c>)
 8000268:	21aa      	movs	r1, #170	; 0xaa
 800026a:	2064      	movs	r0, #100	; 0x64
 800026c:	f000 fad0 	bl	8000810 <LCD_DrawString>
		  LCD_DrawString(200,200," ");
 8000270:	4a08      	ldr	r2, [pc, #32]	; (8000294 <an_apple_LCD+0x70>)
 8000272:	21c8      	movs	r1, #200	; 0xc8
 8000274:	20c8      	movs	r0, #200	; 0xc8
 8000276:	f000 facb 	bl	8000810 <LCD_DrawString>
}
 800027a:	bf00      	nop
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	080024b4 	.word	0x080024b4
 8000284:	080024c0 	.word	0x080024c0
 8000288:	080024cc 	.word	0x080024cc
 800028c:	080024e0 	.word	0x080024e0
 8000290:	080024ec 	.word	0x080024ec
 8000294:	080024f4 	.word	0x080024f4

08000298 <blank_space_LCD>:

#include "blank_space.h"
#include "dy_sv17f.h"
#include "lcd.h"

void blank_space_LCD(void) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af02      	add	r7, sp, #8
		  LCD_Clear(0, 0, 240, 320, WHITE);
 800029e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002a2:	9300      	str	r3, [sp, #0]
 80002a4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80002a8:	22f0      	movs	r2, #240	; 0xf0
 80002aa:	2100      	movs	r1, #0
 80002ac:	2000      	movs	r0, #0
 80002ae:	f000 fa46 	bl	800073e <LCD_Clear>
		  LCD_DrawString(60,50,"Blank Space");
 80002b2:	4a10      	ldr	r2, [pc, #64]	; (80002f4 <blank_space_LCD+0x5c>)
 80002b4:	2132      	movs	r1, #50	; 0x32
 80002b6:	203c      	movs	r0, #60	; 0x3c
 80002b8:	f000 faaa 	bl	8000810 <LCD_DrawString>
		  LCD_DrawString(100,80,"--Taylor Swift ");
 80002bc:	4a0e      	ldr	r2, [pc, #56]	; (80002f8 <blank_space_LCD+0x60>)
 80002be:	2150      	movs	r1, #80	; 0x50
 80002c0:	2064      	movs	r0, #100	; 0x64
 80002c2:	f000 faa5 	bl	8000810 <LCD_DrawString>
		  LCD_DrawString(20,110,"Difficulty: Easy");
 80002c6:	4a0d      	ldr	r2, [pc, #52]	; (80002fc <blank_space_LCD+0x64>)
 80002c8:	216e      	movs	r1, #110	; 0x6e
 80002ca:	2014      	movs	r0, #20
 80002cc:	f000 faa0 	bl	8000810 <LCD_DrawString>
		  LCD_DrawString(20,130,"Score: 0000");
 80002d0:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <blank_space_LCD+0x68>)
 80002d2:	2182      	movs	r1, #130	; 0x82
 80002d4:	2014      	movs	r0, #20
 80002d6:	f000 fa9b 	bl	8000810 <LCD_DrawString>
		  LCD_DrawString(100,170,"Playing");
 80002da:	4a0a      	ldr	r2, [pc, #40]	; (8000304 <blank_space_LCD+0x6c>)
 80002dc:	21aa      	movs	r1, #170	; 0xaa
 80002de:	2064      	movs	r0, #100	; 0x64
 80002e0:	f000 fa96 	bl	8000810 <LCD_DrawString>
		  LCD_DrawString(200,200," ");
 80002e4:	4a08      	ldr	r2, [pc, #32]	; (8000308 <blank_space_LCD+0x70>)
 80002e6:	21c8      	movs	r1, #200	; 0xc8
 80002e8:	20c8      	movs	r0, #200	; 0xc8
 80002ea:	f000 fa91 	bl	8000810 <LCD_DrawString>



}
 80002ee:	bf00      	nop
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	080024f8 	.word	0x080024f8
 80002f8:	08002504 	.word	0x08002504
 80002fc:	08002514 	.word	0x08002514
 8000300:	08002528 	.word	0x08002528
 8000304:	08002534 	.word	0x08002534
 8000308:	0800253c 	.word	0x0800253c

0800030c <DY_Init>:
    cmd[length - 1] = checksum;

    HAL_UART_Transmit(DYuart, cmd, length, 1000);
}

void DY_Init(UART_HandleTypeDef *huart) {
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
    DYuart = huart;
 8000314:	4a03      	ldr	r2, [pc, #12]	; (8000324 <DY_Init+0x18>)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	6013      	str	r3, [r2, #0]
}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	bc80      	pop	{r7}
 8000322:	4770      	bx	lr
 8000324:	20000028 	.word	0x20000028

08000328 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	e002      	b.n	8000338 <Delay+0x10>
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	3b01      	subs	r3, #1
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d1f9      	bne.n	8000332 <Delay+0xa>
 800033e:	bf00      	nop
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr

0800034a <LCD_INIT>:

void LCD_INIT ( void )
{
 800034a:	b580      	push	{r7, lr}
 800034c:	b082      	sub	sp, #8
 800034e:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000350:	2001      	movs	r0, #1
 8000352:	f000 f829 	bl	80003a8 <LCD_BackLed_Control>
	LCD_Rst();
 8000356:	f000 f80f 	bl	8000378 <LCD_Rst>
	LCD_REG_Config();
 800035a:	f000 f85f 	bl	800041c <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800035e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000362:	9300      	str	r3, [sp, #0]
 8000364:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000368:	22f0      	movs	r2, #240	; 0xf0
 800036a:	2100      	movs	r1, #0
 800036c:	2000      	movs	r0, #0
 800036e:	f000 f9e6 	bl	800073e <LCD_Clear>
}
 8000372:	bf00      	nop
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	2102      	movs	r1, #2
 8000380:	4807      	ldr	r0, [pc, #28]	; (80003a0 <LCD_Rst+0x28>)
 8000382:	f001 f952 	bl	800162a <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000386:	4807      	ldr	r0, [pc, #28]	; (80003a4 <LCD_Rst+0x2c>)
 8000388:	f7ff ffce 	bl	8000328 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 800038c:	2201      	movs	r2, #1
 800038e:	2102      	movs	r1, #2
 8000390:	4803      	ldr	r0, [pc, #12]	; (80003a0 <LCD_Rst+0x28>)
 8000392:	f001 f94a 	bl	800162a <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000396:	4803      	ldr	r0, [pc, #12]	; (80003a4 <LCD_Rst+0x2c>)
 8000398:	f7ff ffc6 	bl	8000328 <Delay>
}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	40011800 	.word	0x40011800
 80003a4:	0002bffc 	.word	0x0002bffc

080003a8 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d006      	beq.n	80003c6 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80003b8:	2200      	movs	r2, #0
 80003ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003be:	4807      	ldr	r0, [pc, #28]	; (80003dc <LCD_BackLed_Control+0x34>)
 80003c0:	f001 f933 	bl	800162a <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80003c4:	e005      	b.n	80003d2 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80003c6:	2201      	movs	r2, #1
 80003c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003cc:	4803      	ldr	r0, [pc, #12]	; (80003dc <LCD_BackLed_Control+0x34>)
 80003ce:	f001 f92c 	bl	800162a <HAL_GPIO_WritePin>
}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40011400 	.word	0x40011400

080003e0 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	4603      	mov	r3, r0
 80003e8:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003ea:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80003ee:	88fb      	ldrh	r3, [r7, #6]
 80003f0:	8013      	strh	r3, [r2, #0]
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr

080003fc <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000406:	4a04      	ldr	r2, [pc, #16]	; (8000418 <LCD_Write_Data+0x1c>)
 8000408:	88fb      	ldrh	r3, [r7, #6]
 800040a:	8013      	strh	r3, [r2, #0]
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	60020000 	.word	0x60020000

0800041c <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000420:	20cf      	movs	r0, #207	; 0xcf
 8000422:	f7ff ffdd 	bl	80003e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000426:	2000      	movs	r0, #0
 8000428:	f7ff ffe8 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 800042c:	2081      	movs	r0, #129	; 0x81
 800042e:	f7ff ffe5 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000432:	2030      	movs	r0, #48	; 0x30
 8000434:	f7ff ffe2 	bl	80003fc <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000438:	20ed      	movs	r0, #237	; 0xed
 800043a:	f7ff ffd1 	bl	80003e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800043e:	2064      	movs	r0, #100	; 0x64
 8000440:	f7ff ffdc 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000444:	2003      	movs	r0, #3
 8000446:	f7ff ffd9 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 800044a:	2012      	movs	r0, #18
 800044c:	f7ff ffd6 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000450:	2081      	movs	r0, #129	; 0x81
 8000452:	f7ff ffd3 	bl	80003fc <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000456:	20e8      	movs	r0, #232	; 0xe8
 8000458:	f7ff ffc2 	bl	80003e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 800045c:	2085      	movs	r0, #133	; 0x85
 800045e:	f7ff ffcd 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000462:	2010      	movs	r0, #16
 8000464:	f7ff ffca 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000468:	2078      	movs	r0, #120	; 0x78
 800046a:	f7ff ffc7 	bl	80003fc <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800046e:	20cb      	movs	r0, #203	; 0xcb
 8000470:	f7ff ffb6 	bl	80003e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000474:	2039      	movs	r0, #57	; 0x39
 8000476:	f7ff ffc1 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 800047a:	202c      	movs	r0, #44	; 0x2c
 800047c:	f7ff ffbe 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000480:	2000      	movs	r0, #0
 8000482:	f7ff ffbb 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000486:	2034      	movs	r0, #52	; 0x34
 8000488:	f7ff ffb8 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 800048c:	2002      	movs	r0, #2
 800048e:	f7ff ffb5 	bl	80003fc <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8000492:	20f7      	movs	r0, #247	; 0xf7
 8000494:	f7ff ffa4 	bl	80003e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000498:	2020      	movs	r0, #32
 800049a:	f7ff ffaf 	bl	80003fc <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800049e:	20ea      	movs	r0, #234	; 0xea
 80004a0:	f7ff ff9e 	bl	80003e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80004a4:	2000      	movs	r0, #0
 80004a6:	f7ff ffa9 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80004aa:	2000      	movs	r0, #0
 80004ac:	f7ff ffa6 	bl	80003fc <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80004b0:	20b1      	movs	r0, #177	; 0xb1
 80004b2:	f7ff ff95 	bl	80003e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80004b6:	2000      	movs	r0, #0
 80004b8:	f7ff ffa0 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80004bc:	201b      	movs	r0, #27
 80004be:	f7ff ff9d 	bl	80003fc <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80004c2:	20b6      	movs	r0, #182	; 0xb6
 80004c4:	f7ff ff8c 	bl	80003e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80004c8:	200a      	movs	r0, #10
 80004ca:	f7ff ff97 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80004ce:	20a2      	movs	r0, #162	; 0xa2
 80004d0:	f7ff ff94 	bl	80003fc <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80004d4:	20c0      	movs	r0, #192	; 0xc0
 80004d6:	f7ff ff83 	bl	80003e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80004da:	2035      	movs	r0, #53	; 0x35
 80004dc:	f7ff ff8e 	bl	80003fc <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80004e0:	20c1      	movs	r0, #193	; 0xc1
 80004e2:	f7ff ff7d 	bl	80003e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80004e6:	2011      	movs	r0, #17
 80004e8:	f7ff ff88 	bl	80003fc <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80004ec:	20c5      	movs	r0, #197	; 0xc5
 80004ee:	f7ff ff77 	bl	80003e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80004f2:	2045      	movs	r0, #69	; 0x45
 80004f4:	f7ff ff82 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 80004f8:	2045      	movs	r0, #69	; 0x45
 80004fa:	f7ff ff7f 	bl	80003fc <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80004fe:	20c7      	movs	r0, #199	; 0xc7
 8000500:	f7ff ff6e 	bl	80003e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000504:	20a2      	movs	r0, #162	; 0xa2
 8000506:	f7ff ff79 	bl	80003fc <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 800050a:	20f2      	movs	r0, #242	; 0xf2
 800050c:	f7ff ff68 	bl	80003e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000510:	2000      	movs	r0, #0
 8000512:	f7ff ff73 	bl	80003fc <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000516:	2026      	movs	r0, #38	; 0x26
 8000518:	f7ff ff62 	bl	80003e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 800051c:	2001      	movs	r0, #1
 800051e:	f7ff ff6d 	bl	80003fc <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000522:	20e0      	movs	r0, #224	; 0xe0
 8000524:	f7ff ff5c 	bl	80003e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000528:	200f      	movs	r0, #15
 800052a:	f7ff ff67 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800052e:	2026      	movs	r0, #38	; 0x26
 8000530:	f7ff ff64 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000534:	2024      	movs	r0, #36	; 0x24
 8000536:	f7ff ff61 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 800053a:	200b      	movs	r0, #11
 800053c:	f7ff ff5e 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000540:	200e      	movs	r0, #14
 8000542:	f7ff ff5b 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000546:	2009      	movs	r0, #9
 8000548:	f7ff ff58 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 800054c:	2054      	movs	r0, #84	; 0x54
 800054e:	f7ff ff55 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8000552:	20a8      	movs	r0, #168	; 0xa8
 8000554:	f7ff ff52 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000558:	2046      	movs	r0, #70	; 0x46
 800055a:	f7ff ff4f 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800055e:	200c      	movs	r0, #12
 8000560:	f7ff ff4c 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000564:	2017      	movs	r0, #23
 8000566:	f7ff ff49 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800056a:	2009      	movs	r0, #9
 800056c:	f7ff ff46 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000570:	200f      	movs	r0, #15
 8000572:	f7ff ff43 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000576:	2007      	movs	r0, #7
 8000578:	f7ff ff40 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800057c:	2000      	movs	r0, #0
 800057e:	f7ff ff3d 	bl	80003fc <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000582:	20e1      	movs	r0, #225	; 0xe1
 8000584:	f7ff ff2c 	bl	80003e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000588:	2000      	movs	r0, #0
 800058a:	f7ff ff37 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800058e:	2019      	movs	r0, #25
 8000590:	f7ff ff34 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000594:	201b      	movs	r0, #27
 8000596:	f7ff ff31 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 800059a:	2004      	movs	r0, #4
 800059c:	f7ff ff2e 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80005a0:	2010      	movs	r0, #16
 80005a2:	f7ff ff2b 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80005a6:	2007      	movs	r0, #7
 80005a8:	f7ff ff28 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80005ac:	202a      	movs	r0, #42	; 0x2a
 80005ae:	f7ff ff25 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80005b2:	2047      	movs	r0, #71	; 0x47
 80005b4:	f7ff ff22 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80005b8:	2039      	movs	r0, #57	; 0x39
 80005ba:	f7ff ff1f 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80005be:	2003      	movs	r0, #3
 80005c0:	f7ff ff1c 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80005c4:	2006      	movs	r0, #6
 80005c6:	f7ff ff19 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80005ca:	2006      	movs	r0, #6
 80005cc:	f7ff ff16 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80005d0:	2030      	movs	r0, #48	; 0x30
 80005d2:	f7ff ff13 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80005d6:	2038      	movs	r0, #56	; 0x38
 80005d8:	f7ff ff10 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80005dc:	200f      	movs	r0, #15
 80005de:	f7ff ff0d 	bl	80003fc <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80005e2:	2036      	movs	r0, #54	; 0x36
 80005e4:	f7ff fefc 	bl	80003e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 80005e8:	20c8      	movs	r0, #200	; 0xc8
 80005ea:	f7ff ff07 	bl	80003fc <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80005ee:	202a      	movs	r0, #42	; 0x2a
 80005f0:	f7ff fef6 	bl	80003e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80005f4:	2000      	movs	r0, #0
 80005f6:	f7ff ff01 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff fefe 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000600:	2000      	movs	r0, #0
 8000602:	f7ff fefb 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000606:	20ef      	movs	r0, #239	; 0xef
 8000608:	f7ff fef8 	bl	80003fc <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 800060c:	202b      	movs	r0, #43	; 0x2b
 800060e:	f7ff fee7 	bl	80003e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000612:	2000      	movs	r0, #0
 8000614:	f7ff fef2 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000618:	2000      	movs	r0, #0
 800061a:	f7ff feef 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800061e:	2001      	movs	r0, #1
 8000620:	f7ff feec 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000624:	203f      	movs	r0, #63	; 0x3f
 8000626:	f7ff fee9 	bl	80003fc <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 800062a:	203a      	movs	r0, #58	; 0x3a
 800062c:	f7ff fed8 	bl	80003e0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000630:	2055      	movs	r0, #85	; 0x55
 8000632:	f7ff fee3 	bl	80003fc <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000636:	2011      	movs	r0, #17
 8000638:	f7ff fed2 	bl	80003e0 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <LCD_REG_Config+0x230>)
 800063e:	f7ff fe73 	bl	8000328 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000642:	2029      	movs	r0, #41	; 0x29
 8000644:	f7ff fecc 	bl	80003e0 <LCD_Write_Cmd>
	
	
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	0002bffc 	.word	0x0002bffc

08000650 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000650:	b590      	push	{r4, r7, lr}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	4604      	mov	r4, r0
 8000658:	4608      	mov	r0, r1
 800065a:	4611      	mov	r1, r2
 800065c:	461a      	mov	r2, r3
 800065e:	4623      	mov	r3, r4
 8000660:	80fb      	strh	r3, [r7, #6]
 8000662:	4603      	mov	r3, r0
 8000664:	80bb      	strh	r3, [r7, #4]
 8000666:	460b      	mov	r3, r1
 8000668:	807b      	strh	r3, [r7, #2]
 800066a:	4613      	mov	r3, r2
 800066c:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800066e:	202a      	movs	r0, #42	; 0x2a
 8000670:	f7ff feb6 	bl	80003e0 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000674:	88fb      	ldrh	r3, [r7, #6]
 8000676:	0a1b      	lsrs	r3, r3, #8
 8000678:	b29b      	uxth	r3, r3
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff febe 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	b29b      	uxth	r3, r3
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff feb8 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 800068c:	88fa      	ldrh	r2, [r7, #6]
 800068e:	887b      	ldrh	r3, [r7, #2]
 8000690:	4413      	add	r3, r2
 8000692:	3b01      	subs	r3, #1
 8000694:	121b      	asrs	r3, r3, #8
 8000696:	b29b      	uxth	r3, r3
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff feaf 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800069e:	88fa      	ldrh	r2, [r7, #6]
 80006a0:	887b      	ldrh	r3, [r7, #2]
 80006a2:	4413      	add	r3, r2
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	3b01      	subs	r3, #1
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff fea4 	bl	80003fc <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80006b4:	202b      	movs	r0, #43	; 0x2b
 80006b6:	f7ff fe93 	bl	80003e0 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80006ba:	88bb      	ldrh	r3, [r7, #4]
 80006bc:	0a1b      	lsrs	r3, r3, #8
 80006be:	b29b      	uxth	r3, r3
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff fe9b 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80006c6:	88bb      	ldrh	r3, [r7, #4]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff fe95 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80006d2:	88ba      	ldrh	r2, [r7, #4]
 80006d4:	883b      	ldrh	r3, [r7, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	3b01      	subs	r3, #1
 80006da:	121b      	asrs	r3, r3, #8
 80006dc:	b29b      	uxth	r3, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff fe8c 	bl	80003fc <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80006e4:	88ba      	ldrh	r2, [r7, #4]
 80006e6:	883b      	ldrh	r3, [r7, #0]
 80006e8:	4413      	add	r3, r2
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	3b01      	subs	r3, #1
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fe81 	bl	80003fc <LCD_Write_Data>
	
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd90      	pop	{r4, r7, pc}

08000702 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b084      	sub	sp, #16
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
 800070a:	460b      	mov	r3, r1
 800070c:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000712:	202c      	movs	r0, #44	; 0x2c
 8000714:	f7ff fe64 	bl	80003e0 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	e006      	b.n	800072c <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800071e:	887b      	ldrh	r3, [r7, #2]
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fe6b 	bl	80003fc <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	3301      	adds	r3, #1
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fa      	ldr	r2, [r7, #12]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	429a      	cmp	r2, r3
 8000732:	d3f4      	bcc.n	800071e <LCD_FillColor+0x1c>
		
}
 8000734:	bf00      	nop
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 800073e:	b590      	push	{r4, r7, lr}
 8000740:	b083      	sub	sp, #12
 8000742:	af00      	add	r7, sp, #0
 8000744:	4604      	mov	r4, r0
 8000746:	4608      	mov	r0, r1
 8000748:	4611      	mov	r1, r2
 800074a:	461a      	mov	r2, r3
 800074c:	4623      	mov	r3, r4
 800074e:	80fb      	strh	r3, [r7, #6]
 8000750:	4603      	mov	r3, r0
 8000752:	80bb      	strh	r3, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	807b      	strh	r3, [r7, #2]
 8000758:	4613      	mov	r3, r2
 800075a:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 800075c:	883b      	ldrh	r3, [r7, #0]
 800075e:	887a      	ldrh	r2, [r7, #2]
 8000760:	88b9      	ldrh	r1, [r7, #4]
 8000762:	88f8      	ldrh	r0, [r7, #6]
 8000764:	f7ff ff74 	bl	8000650 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000768:	887b      	ldrh	r3, [r7, #2]
 800076a:	883a      	ldrh	r2, [r7, #0]
 800076c:	fb02 f303 	mul.w	r3, r2, r3
 8000770:	461a      	mov	r2, r3
 8000772:	8b3b      	ldrh	r3, [r7, #24]
 8000774:	4619      	mov	r1, r3
 8000776:	4610      	mov	r0, r2
 8000778:	f7ff ffc3 	bl	8000702 <LCD_FillColor>
	
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	bd90      	pop	{r4, r7, pc}

08000784 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	80fb      	strh	r3, [r7, #6]
 800078e:	460b      	mov	r3, r1
 8000790:	80bb      	strh	r3, [r7, #4]
 8000792:	4613      	mov	r3, r2
 8000794:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000796:	78fb      	ldrb	r3, [r7, #3]
 8000798:	3b20      	subs	r3, #32
 800079a:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 800079c:	88b9      	ldrh	r1, [r7, #4]
 800079e:	88f8      	ldrh	r0, [r7, #6]
 80007a0:	2310      	movs	r3, #16
 80007a2:	2208      	movs	r2, #8
 80007a4:	f7ff ff54 	bl	8000650 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80007a8:	202c      	movs	r0, #44	; 0x2c
 80007aa:	f7ff fe19 	bl	80003e0 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80007ae:	2300      	movs	r3, #0
 80007b0:	73bb      	strb	r3, [r7, #14]
 80007b2:	e023      	b.n	80007fc <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80007b4:	7b3a      	ldrb	r2, [r7, #12]
 80007b6:	7bbb      	ldrb	r3, [r7, #14]
 80007b8:	4914      	ldr	r1, [pc, #80]	; (800080c <LCD_DrawChar+0x88>)
 80007ba:	0112      	lsls	r2, r2, #4
 80007bc:	440a      	add	r2, r1
 80007be:	4413      	add	r3, r2
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80007c4:	2300      	movs	r3, #0
 80007c6:	737b      	strb	r3, [r7, #13]
 80007c8:	e012      	b.n	80007f0 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d003      	beq.n	80007dc <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x0000 );
 80007d4:	2000      	movs	r0, #0
 80007d6:	f7ff fe11 	bl	80003fc <LCD_Write_Data>
 80007da:	e003      	b.n	80007e4 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 80007dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80007e0:	f7ff fe0c 	bl	80003fc <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	085b      	lsrs	r3, r3, #1
 80007e8:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80007ea:	7b7b      	ldrb	r3, [r7, #13]
 80007ec:	3301      	adds	r3, #1
 80007ee:	737b      	strb	r3, [r7, #13]
 80007f0:	7b7b      	ldrb	r3, [r7, #13]
 80007f2:	2b07      	cmp	r3, #7
 80007f4:	d9e9      	bls.n	80007ca <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80007f6:	7bbb      	ldrb	r3, [r7, #14]
 80007f8:	3301      	adds	r3, #1
 80007fa:	73bb      	strb	r3, [r7, #14]
 80007fc:	7bbb      	ldrb	r3, [r7, #14]
 80007fe:	2b0f      	cmp	r3, #15
 8000800:	d9d8      	bls.n	80007b4 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8000802:	bf00      	nop
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	08002648 	.word	0x08002648

08000810 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	603a      	str	r2, [r7, #0]
 800081a:	80fb      	strh	r3, [r7, #6]
 800081c:	460b      	mov	r3, r1
 800081e:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8000820:	e01c      	b.n	800085c <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	2be8      	cmp	r3, #232	; 0xe8
 8000826:	d904      	bls.n	8000832 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000828:	2300      	movs	r3, #0
 800082a:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 800082c:	88bb      	ldrh	r3, [r7, #4]
 800082e:	3310      	adds	r3, #16
 8000830:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8000832:	88bb      	ldrh	r3, [r7, #4]
 8000834:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000838:	d903      	bls.n	8000842 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800083a:	2300      	movs	r3, #0
 800083c:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800083e:	2300      	movs	r3, #0
 8000840:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	781a      	ldrb	r2, [r3, #0]
 8000846:	88b9      	ldrh	r1, [r7, #4]
 8000848:	88fb      	ldrh	r3, [r7, #6]
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ff9a 	bl	8000784 <LCD_DrawChar>
		
		pStr ++;
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8000856:	88fb      	ldrh	r3, [r7, #6]
 8000858:	3308      	adds	r3, #8
 800085a:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d1de      	bne.n	8000822 <LCD_DrawString+0x12>
		
	}
	
}
 8000864:	bf00      	nop
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b08b      	sub	sp, #44	; 0x2c
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000876:	f000 fbc3 	bl	8001000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087a:	f000 f895 	bl	80009a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087e:	f000 f903 	bl	8000a88 <MX_GPIO_Init>
  MX_FSMC_Init();
 8000882:	f000 f9a5 	bl	8000bd0 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8000886:	f000 f8d5 	bl	8000a34 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 800088a:	f7ff fd5e 	bl	800034a <LCD_INIT>
  HAL_UART_Init(&huart1);
 800088e:	4841      	ldr	r0, [pc, #260]	; (8000994 <main+0x124>)
 8000890:	f001 fb4b 	bl	8001f2a <HAL_UART_Init>
  DY_Init(&huart1);
 8000894:	483f      	ldr	r0, [pc, #252]	; (8000994 <main+0x124>)
 8000896:	f7ff fd39 	bl	800030c <DY_Init>
  int page = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  int menuTrue = 1;
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
  uint8_t cmdPlay1[] = {0xAA, 0x08, 0x0B, 0x02, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x2A, 0x4D, 0x50, 0x33, 0xD9};
 80008a2:	4b3d      	ldr	r3, [pc, #244]	; (8000998 <main+0x128>)
 80008a4:	f107 0410 	add.w	r4, r7, #16
 80008a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008aa:	c407      	stmia	r4!, {r0, r1, r2}
 80008ac:	8023      	strh	r3, [r4, #0]
 80008ae:	3402      	adds	r4, #2
 80008b0:	0c1b      	lsrs	r3, r3, #16
 80008b2:	7023      	strb	r3, [r4, #0]
  uint8_t cmdPlay2[] = {0xAA, 0x08, 0x0B, 0x02, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x32, 0x2A, 0x4D, 0x50, 0x33, 0xDA};
 80008b4:	4b39      	ldr	r3, [pc, #228]	; (800099c <main+0x12c>)
 80008b6:	463c      	mov	r4, r7
 80008b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ba:	c407      	stmia	r4!, {r0, r1, r2}
 80008bc:	8023      	strh	r3, [r4, #0]
 80008be:	3402      	adds	r4, #2
 80008c0:	0c1b      	lsrs	r3, r3, #16
 80008c2:	7023      	strb	r3, [r4, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // initialize to the menu
	  if (menuTrue == 1) {
 80008c4:	6a3b      	ldr	r3, [r7, #32]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d102      	bne.n	80008d0 <main+0x60>
		  printMenu(page);
 80008ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80008cc:	f000 f9ea 	bl	8000ca4 <printMenu>
	  }

	  // changing to another page by KEY1
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 80008d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d4:	4832      	ldr	r0, [pc, #200]	; (80009a0 <main+0x130>)
 80008d6:	f000 fe91 	bl	80015fc <HAL_GPIO_ReadPin>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d115      	bne.n	800090c <main+0x9c>
		  page += 1; // select another songs
 80008e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e2:	3301      	adds	r3, #1
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
		  if( page > 3) {
 80008e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e8:	2b03      	cmp	r3, #3
 80008ea:	dd0f      	ble.n	800090c <main+0x9c>
			  page = page % 4;
 80008ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ee:	425a      	negs	r2, r3
 80008f0:	f003 0303 	and.w	r3, r3, #3
 80008f4:	f002 0203 	and.w	r2, r2, #3
 80008f8:	bf58      	it	pl
 80008fa:	4253      	negpl	r3, r2
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
			  page = (page == 0) ? 1 : page;
 80008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <main+0x98>
 8000904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000906:	e000      	b.n	800090a <main+0x9a>
 8000908:	2301      	movs	r3, #1
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
		  // page = 3 badroom star
	  }


	  // select the song by KEY1 in STM32
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 800090c:	2101      	movs	r1, #1
 800090e:	4825      	ldr	r0, [pc, #148]	; (80009a4 <main+0x134>)
 8000910:	f000 fe74 	bl	80015fc <HAL_GPIO_ReadPin>
 8000914:	4603      	mov	r3, r0
 8000916:	2b01      	cmp	r3, #1
 8000918:	d13a      	bne.n	8000990 <main+0x120>
		  menuTrue = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
		  HAL_Delay(50);
 800091e:	2032      	movs	r0, #50	; 0x32
 8000920:	f000 fbd0 	bl	80010c4 <HAL_Delay>
		  switch (page) {
 8000924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000926:	2b02      	cmp	r3, #2
 8000928:	d025      	beq.n	8000976 <main+0x106>
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092c:	2b02      	cmp	r3, #2
 800092e:	dcc9      	bgt.n	80008c4 <main+0x54>
 8000930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000932:	2b00      	cmp	r3, #0
 8000934:	d003      	beq.n	800093e <main+0xce>
 8000936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000938:	2b01      	cmp	r3, #1
 800093a:	d00e      	beq.n	800095a <main+0xea>
 800093c:	e029      	b.n	8000992 <main+0x122>
		  	  case (0) :
		  	  	  	HAL_UART_Transmit(&huart1, cmdPlay1, sizeof(cmdPlay1), 1000);
 800093e:	f107 0110 	add.w	r1, r7, #16
 8000942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000946:	220f      	movs	r2, #15
 8000948:	4812      	ldr	r0, [pc, #72]	; (8000994 <main+0x124>)
 800094a:	f001 fb3b 	bl	8001fc4 <HAL_UART_Transmit>
		  	  	  	HAL_Delay(50);
 800094e:	2032      	movs	r0, #50	; 0x32
 8000950:	f000 fbb8 	bl	80010c4 <HAL_Delay>
		  	  	  	blank_space_LCD();
 8000954:	f7ff fca0 	bl	8000298 <blank_space_LCD>
		  	  	  	break;
 8000958:	e01b      	b.n	8000992 <main+0x122>
		  	  case (1) :
		  	  	  	HAL_UART_Transmit(&huart1, cmdPlay1, sizeof(cmdPlay1), 1000);
 800095a:	f107 0110 	add.w	r1, r7, #16
 800095e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000962:	220f      	movs	r2, #15
 8000964:	480b      	ldr	r0, [pc, #44]	; (8000994 <main+0x124>)
 8000966:	f001 fb2d 	bl	8001fc4 <HAL_UART_Transmit>
		  	  	  	HAL_Delay(50);
 800096a:	2032      	movs	r0, #50	; 0x32
 800096c:	f000 fbaa 	bl	80010c4 <HAL_Delay>
		  	  	  	blank_space_LCD();
 8000970:	f7ff fc92 	bl	8000298 <blank_space_LCD>
		  	  	  	break;
 8000974:	e00d      	b.n	8000992 <main+0x122>
		  	  case (2) :
					HAL_UART_Transmit(&huart1, cmdPlay2, sizeof(cmdPlay2), 1000);
 8000976:	4639      	mov	r1, r7
 8000978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097c:	220f      	movs	r2, #15
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <main+0x124>)
 8000980:	f001 fb20 	bl	8001fc4 <HAL_UART_Transmit>
		  	  	  	HAL_Delay(50);
 8000984:	2032      	movs	r0, #50	; 0x32
 8000986:	f000 fb9d 	bl	80010c4 <HAL_Delay>
					an_apple_LCD();
 800098a:	f7ff fc4b 	bl	8000224 <an_apple_LCD>
		  	  	  	break;
 800098e:	e000      	b.n	8000992 <main+0x122>

		  }
	  }
 8000990:	bf00      	nop
	  if (menuTrue == 1) {
 8000992:	e797      	b.n	80008c4 <main+0x54>
 8000994:	2000002c 	.word	0x2000002c
 8000998:	08002540 	.word	0x08002540
 800099c:	08002550 	.word	0x08002550
 80009a0:	40011000 	.word	0x40011000
 80009a4:	40010800 	.word	0x40010800

080009a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b090      	sub	sp, #64	; 0x40
 80009ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	f107 0318 	add.w	r3, r7, #24
 80009b2:	2228      	movs	r2, #40	; 0x28
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 fd68 	bl	800248c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ca:	2301      	movs	r3, #1
 80009cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d8:	2301      	movs	r3, #1
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009dc:	2302      	movs	r3, #2
 80009de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ec:	f107 0318 	add.w	r3, r7, #24
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 fe33 	bl	800165c <HAL_RCC_OscConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009fc:	f000 f94c 	bl	8000c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a00:	230f      	movs	r3, #15
 8000a02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a04:	2302      	movs	r3, #2
 8000a06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2102      	movs	r1, #2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f001 f8a0 	bl	8001b60 <HAL_RCC_ClockConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a26:	f000 f937 	bl	8000c98 <Error_Handler>
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	3740      	adds	r7, #64	; 0x40
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <MX_USART1_UART_Init+0x50>)
 8000a3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a6c:	f001 fa5d 	bl	8001f2a <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a76:	f000 f90f 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	2000002c 	.word	0x2000002c
 8000a84:	40013800 	.word	0x40013800

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a9c:	4b47      	ldr	r3, [pc, #284]	; (8000bbc <MX_GPIO_Init+0x134>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a46      	ldr	r2, [pc, #280]	; (8000bbc <MX_GPIO_Init+0x134>)
 8000aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b44      	ldr	r3, [pc, #272]	; (8000bbc <MX_GPIO_Init+0x134>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab4:	4b41      	ldr	r3, [pc, #260]	; (8000bbc <MX_GPIO_Init+0x134>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a40      	ldr	r2, [pc, #256]	; (8000bbc <MX_GPIO_Init+0x134>)
 8000aba:	f043 0310 	orr.w	r3, r3, #16
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b3e      	ldr	r3, [pc, #248]	; (8000bbc <MX_GPIO_Init+0x134>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0310 	and.w	r3, r3, #16
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	4b3b      	ldr	r3, [pc, #236]	; (8000bbc <MX_GPIO_Init+0x134>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a3a      	ldr	r2, [pc, #232]	; (8000bbc <MX_GPIO_Init+0x134>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b38      	ldr	r3, [pc, #224]	; (8000bbc <MX_GPIO_Init+0x134>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae4:	4b35      	ldr	r3, [pc, #212]	; (8000bbc <MX_GPIO_Init+0x134>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a34      	ldr	r2, [pc, #208]	; (8000bbc <MX_GPIO_Init+0x134>)
 8000aea:	f043 0320 	orr.w	r3, r3, #32
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b32      	ldr	r3, [pc, #200]	; (8000bbc <MX_GPIO_Init+0x134>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0320 	and.w	r3, r3, #32
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, red1_Pin|green1_Pin, GPIO_PIN_SET);
 8000afc:	2201      	movs	r2, #1
 8000afe:	2160      	movs	r1, #96	; 0x60
 8000b00:	482f      	ldr	r0, [pc, #188]	; (8000bc0 <MX_GPIO_Init+0x138>)
 8000b02:	f000 fd92 	bl	800162a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b0c:	482d      	ldr	r0, [pc, #180]	; (8000bc4 <MX_GPIO_Init+0x13c>)
 8000b0e:	f000 fd8c 	bl	800162a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(blue1_GPIO_Port, blue1_Pin, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b18:	482b      	ldr	r0, [pc, #172]	; (8000bc8 <MX_GPIO_Init+0x140>)
 8000b1a:	f000 fd86 	bl	800162a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2102      	movs	r1, #2
 8000b22:	4827      	ldr	r0, [pc, #156]	; (8000bc0 <MX_GPIO_Init+0x138>)
 8000b24:	f000 fd81 	bl	800162a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : red1_Pin green1_Pin PE1 */
  GPIO_InitStruct.Pin = red1_Pin|green1_Pin|GPIO_PIN_1;
 8000b28:	2362      	movs	r3, #98	; 0x62
 8000b2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b38:	f107 0310 	add.w	r3, r7, #16
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4820      	ldr	r0, [pc, #128]	; (8000bc0 <MX_GPIO_Init+0x138>)
 8000b40:	f000 fbc8 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : testing2_Pin */
  GPIO_InitStruct.Pin = testing2_Pin;
 8000b44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(testing2_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	4619      	mov	r1, r3
 8000b58:	481b      	ldr	r0, [pc, #108]	; (8000bc8 <MX_GPIO_Init+0x140>)
 8000b5a:	f000 fbbb 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : testing_key_Pin key1_Pin */
  GPIO_InitStruct.Pin = testing_key_Pin|key1_Pin;
 8000b5e:	2341      	movs	r3, #65	; 0x41
 8000b60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0310 	add.w	r3, r7, #16
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4816      	ldr	r0, [pc, #88]	; (8000bcc <MX_GPIO_Init+0x144>)
 8000b72:	f000 fbaf 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <MX_GPIO_Init+0x13c>)
 8000b90:	f000 fba0 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : blue1_Pin */
  GPIO_InitStruct.Pin = blue1_Pin;
 8000b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(blue1_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 0310 	add.w	r3, r7, #16
 8000baa:	4619      	mov	r1, r3
 8000bac:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <MX_GPIO_Init+0x140>)
 8000bae:	f000 fb91 	bl	80012d4 <HAL_GPIO_Init>

}
 8000bb2:	bf00      	nop
 8000bb4:	3720      	adds	r7, #32
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40011800 	.word	0x40011800
 8000bc4:	40011400 	.word	0x40011400
 8000bc8:	40011000 	.word	0x40011000
 8000bcc:	40010800 	.word	0x40010800

08000bd0 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
 8000be4:	615a      	str	r2, [r3, #20]
 8000be6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000be8:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <MX_FSMC_Init+0xbc>)
 8000bea:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000bee:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000bf0:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <MX_FSMC_Init+0xbc>)
 8000bf2:	4a27      	ldr	r2, [pc, #156]	; (8000c90 <MX_FSMC_Init+0xc0>)
 8000bf4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000bf6:	4b25      	ldr	r3, [pc, #148]	; (8000c8c <MX_FSMC_Init+0xbc>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000bfc:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <MX_FSMC_Init+0xbc>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000c02:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <MX_FSMC_Init+0xbc>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000c08:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <MX_FSMC_Init+0xbc>)
 8000c0a:	2210      	movs	r2, #16
 8000c0c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <MX_FSMC_Init+0xbc>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <MX_FSMC_Init+0xbc>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_FSMC_Init+0xbc>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_FSMC_Init+0xbc>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_FSMC_Init+0xbc>)
 8000c28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c2c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <MX_FSMC_Init+0xbc>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <MX_FSMC_Init+0xbc>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_FSMC_Init+0xbc>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <MX_FSMC_Init+0xbc>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000c46:	230f      	movs	r3, #15
 8000c48:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000c4e:	23ff      	movs	r3, #255	; 0xff
 8000c50:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000c52:	230f      	movs	r3, #15
 8000c54:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000c56:	2310      	movs	r3, #16
 8000c58:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000c5a:	2311      	movs	r3, #17
 8000c5c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2200      	movs	r2, #0
 8000c66:	4619      	mov	r1, r3
 8000c68:	4808      	ldr	r0, [pc, #32]	; (8000c8c <MX_FSMC_Init+0xbc>)
 8000c6a:	f001 f911 	bl	8001e90 <HAL_SRAM_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8000c74:	f000 f810 	bl	8000c98 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_FSMC_Init+0xc4>)
 8000c7a:	69db      	ldr	r3, [r3, #28]
 8000c7c:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <MX_FSMC_Init+0xc4>)
 8000c7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c82:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000c84:	bf00      	nop
 8000c86:	3720      	adds	r7, #32
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000070 	.word	0x20000070
 8000c90:	a0000104 	.word	0xa0000104
 8000c94:	40010000 	.word	0x40010000

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9c:	b672      	cpsid	i
}
 8000c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <Error_Handler+0x8>
	...

08000ca4 <printMenu>:

#include "menu.h"
#include "dy_sv17f.h"


void printMenu(int track) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	  LCD_DrawString(10,25,"Welcome back to ");
 8000cac:	4a39      	ldr	r2, [pc, #228]	; (8000d94 <printMenu+0xf0>)
 8000cae:	2119      	movs	r1, #25
 8000cb0:	200a      	movs	r0, #10
 8000cb2:	f7ff fdad 	bl	8000810 <LCD_DrawString>
	  LCD_DrawString(90,50,"Jubeat!");
 8000cb6:	4a38      	ldr	r2, [pc, #224]	; (8000d98 <printMenu+0xf4>)
 8000cb8:	2132      	movs	r1, #50	; 0x32
 8000cba:	205a      	movs	r0, #90	; 0x5a
 8000cbc:	f7ff fda8 	bl	8000810 <LCD_DrawString>
	  LCD_DrawString(10,90,"1.Blank Space - Taylor Swift");
 8000cc0:	4a36      	ldr	r2, [pc, #216]	; (8000d9c <printMenu+0xf8>)
 8000cc2:	215a      	movs	r1, #90	; 0x5a
 8000cc4:	200a      	movs	r0, #10
 8000cc6:	f7ff fda3 	bl	8000810 <LCD_DrawString>
	  LCD_DrawString(10,120,"2.An Apple - Mayday");
 8000cca:	4a35      	ldr	r2, [pc, #212]	; (8000da0 <printMenu+0xfc>)
 8000ccc:	2178      	movs	r1, #120	; 0x78
 8000cce:	200a      	movs	r0, #10
 8000cd0:	f7ff fd9e 	bl	8000810 <LCD_DrawString>
	  LCD_DrawString(10,150,"3.Bedroom Star - TNT");
 8000cd4:	4a33      	ldr	r2, [pc, #204]	; (8000da4 <printMenu+0x100>)
 8000cd6:	2196      	movs	r1, #150	; 0x96
 8000cd8:	200a      	movs	r0, #10
 8000cda:	f7ff fd99 	bl	8000810 <LCD_DrawString>

	  switch (track) {
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b03      	cmp	r3, #3
 8000ce2:	d826      	bhi.n	8000d32 <printMenu+0x8e>
 8000ce4:	a201      	add	r2, pc, #4	; (adr r2, 8000cec <printMenu+0x48>)
 8000ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cea:	bf00      	nop
 8000cec:	08000cfd 	.word	0x08000cfd
 8000cf0:	08000d0b 	.word	0x08000d0b
 8000cf4:	08000d19 	.word	0x08000d19
 8000cf8:	08000d27 	.word	0x08000d27
	  	  case (0):
				LCD_DrawString(15, 300, "< Default : Blank Space  >");
 8000cfc:	4a2a      	ldr	r2, [pc, #168]	; (8000da8 <printMenu+0x104>)
 8000cfe:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000d02:	200f      	movs	r0, #15
 8000d04:	f7ff fd84 	bl	8000810 <LCD_DrawString>
			  	break;
 8000d08:	e013      	b.n	8000d32 <printMenu+0x8e>
	  	  case (1):
				LCD_DrawString(15, 300, "< Selected: Blank Space  >");
 8000d0a:	4a28      	ldr	r2, [pc, #160]	; (8000dac <printMenu+0x108>)
 8000d0c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000d10:	200f      	movs	r0, #15
 8000d12:	f7ff fd7d 	bl	8000810 <LCD_DrawString>
				break;
 8000d16:	e00c      	b.n	8000d32 <printMenu+0x8e>
	  	  case (2):
	  			LCD_DrawString(15, 300, "< Selected: An Apple     >");
 8000d18:	4a25      	ldr	r2, [pc, #148]	; (8000db0 <printMenu+0x10c>)
 8000d1a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000d1e:	200f      	movs	r0, #15
 8000d20:	f7ff fd76 	bl	8000810 <LCD_DrawString>
	  	  	  	break;
 8000d24:	e005      	b.n	8000d32 <printMenu+0x8e>
	  	  case (3):
				LCD_DrawString(15, 300, "< Selected: Bedroom Star >");
 8000d26:	4a23      	ldr	r2, [pc, #140]	; (8000db4 <printMenu+0x110>)
 8000d28:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000d2c:	200f      	movs	r0, #15
 8000d2e:	f7ff fd6f 	bl	8000810 <LCD_DrawString>
	  }


	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);//blue_key1
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d38:	481f      	ldr	r0, [pc, #124]	; (8000db8 <printMenu+0x114>)
 8000d3a:	f000 fc76 	bl	800162a <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000d3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d42:	f000 f9bf 	bl	80010c4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d4c:	481a      	ldr	r0, [pc, #104]	; (8000db8 <printMenu+0x114>)
 8000d4e:	f000 fc6c 	bl	800162a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);//green_key1
 8000d52:	2200      	movs	r2, #0
 8000d54:	2140      	movs	r1, #64	; 0x40
 8000d56:	4819      	ldr	r0, [pc, #100]	; (8000dbc <printMenu+0x118>)
 8000d58:	f000 fc67 	bl	800162a <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d60:	f000 f9b0 	bl	80010c4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8000d64:	2201      	movs	r2, #1
 8000d66:	2140      	movs	r1, #64	; 0x40
 8000d68:	4814      	ldr	r0, [pc, #80]	; (8000dbc <printMenu+0x118>)
 8000d6a:	f000 fc5e 	bl	800162a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET); //red_key1
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2120      	movs	r1, #32
 8000d72:	4812      	ldr	r0, [pc, #72]	; (8000dbc <printMenu+0x118>)
 8000d74:	f000 fc59 	bl	800162a <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000d78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d7c:	f000 f9a2 	bl	80010c4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2120      	movs	r1, #32
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <printMenu+0x118>)
 8000d86:	f000 fc50 	bl	800162a <HAL_GPIO_WritePin>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	08002560 	.word	0x08002560
 8000d98:	08002574 	.word	0x08002574
 8000d9c:	0800257c 	.word	0x0800257c
 8000da0:	0800259c 	.word	0x0800259c
 8000da4:	080025b0 	.word	0x080025b0
 8000da8:	080025c8 	.word	0x080025c8
 8000dac:	080025e4 	.word	0x080025e4
 8000db0:	08002600 	.word	0x08002600
 8000db4:	0800261c 	.word	0x0800261c
 8000db8:	40011000 	.word	0x40011000
 8000dbc:	40011800 	.word	0x40011800

08000dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_MspInit+0x5c>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <HAL_MspInit+0x5c>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6193      	str	r3, [r2, #24]
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_MspInit+0x5c>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <HAL_MspInit+0x5c>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <HAL_MspInit+0x5c>)
 8000de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de8:	61d3      	str	r3, [r2, #28]
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_MspInit+0x5c>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <HAL_MspInit+0x60>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <HAL_MspInit+0x60>)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e12:	bf00      	nop
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40010000 	.word	0x40010000

08000e24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a1c      	ldr	r2, [pc, #112]	; (8000eb0 <HAL_UART_MspInit+0x8c>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d131      	bne.n	8000ea8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <HAL_UART_MspInit+0x90>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a1a      	ldr	r2, [pc, #104]	; (8000eb4 <HAL_UART_MspInit+0x90>)
 8000e4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_UART_MspInit+0x90>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_UART_MspInit+0x90>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <HAL_UART_MspInit+0x90>)
 8000e62:	f043 0304 	orr.w	r3, r3, #4
 8000e66:	6193      	str	r3, [r2, #24]
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_UART_MspInit+0x90>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f003 0304 	and.w	r3, r3, #4
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 0310 	add.w	r3, r7, #16
 8000e86:	4619      	mov	r1, r3
 8000e88:	480b      	ldr	r0, [pc, #44]	; (8000eb8 <HAL_UART_MspInit+0x94>)
 8000e8a:	f000 fa23 	bl	80012d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <HAL_UART_MspInit+0x94>)
 8000ea4:	f000 fa16 	bl	80012d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	3720      	adds	r7, #32
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40013800 	.word	0x40013800
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010800 	.word	0x40010800

08000ebc <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000ed0:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <HAL_FSMC_MspInit+0x78>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d129      	bne.n	8000f2c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <HAL_FSMC_MspInit+0x78>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <HAL_FSMC_MspInit+0x7c>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	4a15      	ldr	r2, [pc, #84]	; (8000f38 <HAL_FSMC_MspInit+0x7c>)
 8000ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee8:	6153      	str	r3, [r2, #20]
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <HAL_FSMC_MspInit+0x7c>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000ef6:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000efa:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f04:	f107 0308 	add.w	r3, r7, #8
 8000f08:	4619      	mov	r1, r3
 8000f0a:	480c      	ldr	r0, [pc, #48]	; (8000f3c <HAL_FSMC_MspInit+0x80>)
 8000f0c:	f000 f9e2 	bl	80012d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f10:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000f14:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	4619      	mov	r1, r3
 8000f24:	4806      	ldr	r0, [pc, #24]	; (8000f40 <HAL_FSMC_MspInit+0x84>)
 8000f26:	f000 f9d5 	bl	80012d4 <HAL_GPIO_Init>
 8000f2a:	e000      	b.n	8000f2e <HAL_FSMC_MspInit+0x72>
    return;
 8000f2c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200000b8 	.word	0x200000b8
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40011800 	.word	0x40011800
 8000f40:	40011400 	.word	0x40011400

08000f44 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000f4c:	f7ff ffb6 	bl	8000ebc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <NMI_Handler+0x4>

08000f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr

08000f82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr

08000f8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr

08000f9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9e:	f000 f875 	bl	800108c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
	...

08000fb4 <Reset_Handler>:
 8000fb4:	f7ff fff7 	bl	8000fa6 <SystemInit>
 8000fb8:	480b      	ldr	r0, [pc, #44]	; (8000fe8 <LoopFillZerobss+0xe>)
 8000fba:	490c      	ldr	r1, [pc, #48]	; (8000fec <LoopFillZerobss+0x12>)
 8000fbc:	4a0c      	ldr	r2, [pc, #48]	; (8000ff0 <LoopFillZerobss+0x16>)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:
 8000fc2:	58d4      	ldr	r4, [r2, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:
 8000fc8:	18c4      	adds	r4, r0, r3
 8000fca:	428c      	cmp	r4, r1
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
 8000fce:	4a09      	ldr	r2, [pc, #36]	; (8000ff4 <LoopFillZerobss+0x1a>)
 8000fd0:	4c09      	ldr	r4, [pc, #36]	; (8000ff8 <LoopFillZerobss+0x1e>)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:
 8000fda:	42a2      	cmp	r2, r4
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>
 8000fde:	f001 fa31 	bl	8002444 <__libc_init_array>
 8000fe2:	f7ff fc45 	bl	8000870 <main>
 8000fe6:	4770      	bx	lr
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	2000000c 	.word	0x2000000c
 8000ff0:	08002c58 	.word	0x08002c58
 8000ff4:	2000000c 	.word	0x2000000c
 8000ff8:	200000c0 	.word	0x200000c0

08000ffc <ADC1_2_IRQHandler>:
 8000ffc:	e7fe      	b.n	8000ffc <ADC1_2_IRQHandler>
	...

08001000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <HAL_Init+0x28>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a07      	ldr	r2, [pc, #28]	; (8001028 <HAL_Init+0x28>)
 800100a:	f043 0310 	orr.w	r3, r3, #16
 800100e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f000 f92b 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001016:	200f      	movs	r0, #15
 8001018:	f000 f808 	bl	800102c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800101c:	f7ff fed0 	bl	8000dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40022000 	.word	0x40022000

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_InitTick+0x54>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_InitTick+0x58>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001042:	fbb3 f3f1 	udiv	r3, r3, r1
 8001046:	fbb2 f3f3 	udiv	r3, r2, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f935 	bl	80012ba <HAL_SYSTICK_Config>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e00e      	b.n	8001078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b0f      	cmp	r3, #15
 800105e:	d80a      	bhi.n	8001076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001060:	2200      	movs	r2, #0
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f000 f90b 	bl	8001282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800106c:	4a06      	ldr	r2, [pc, #24]	; (8001088 <HAL_InitTick+0x5c>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	e000      	b.n	8001078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000000 	.word	0x20000000
 8001084:	20000008 	.word	0x20000008
 8001088:	20000004 	.word	0x20000004

0800108c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_IncTick+0x1c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <HAL_IncTick+0x20>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a03      	ldr	r2, [pc, #12]	; (80010ac <HAL_IncTick+0x20>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	20000008 	.word	0x20000008
 80010ac:	200000bc 	.word	0x200000bc

080010b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return uwTick;
 80010b4:	4b02      	ldr	r3, [pc, #8]	; (80010c0 <HAL_GetTick+0x10>)
 80010b6:	681b      	ldr	r3, [r3, #0]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	200000bc 	.word	0x200000bc

080010c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff fff0 	bl	80010b0 <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010dc:	d005      	beq.n	80010ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_Delay+0x44>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ea:	bf00      	nop
 80010ec:	f7ff ffe0 	bl	80010b0 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d8f7      	bhi.n	80010ec <HAL_Delay+0x28>
  {
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000008 	.word	0x20000008

0800110c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113e:	4a04      	ldr	r2, [pc, #16]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	60d3      	str	r3, [r2, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f7ff ff90 	bl	8001170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff49 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001294:	f7ff ff5e 	bl	8001154 <__NVIC_GetPriorityGrouping>
 8001298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7ff ff90 	bl	80011c4 <NVIC_EncodePriority>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5f 	bl	8001170 <__NVIC_SetPriority>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffb0 	bl	8001228 <SysTick_Config>
 80012c8:	4603      	mov	r3, r0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b08b      	sub	sp, #44	; 0x2c
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e6:	e179      	b.n	80015dc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012e8:	2201      	movs	r2, #1
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	69fa      	ldr	r2, [r7, #28]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	429a      	cmp	r2, r3
 8001302:	f040 8168 	bne.w	80015d6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4a96      	ldr	r2, [pc, #600]	; (8001564 <HAL_GPIO_Init+0x290>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d05e      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 8001310:	4a94      	ldr	r2, [pc, #592]	; (8001564 <HAL_GPIO_Init+0x290>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d875      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 8001316:	4a94      	ldr	r2, [pc, #592]	; (8001568 <HAL_GPIO_Init+0x294>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d058      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 800131c:	4a92      	ldr	r2, [pc, #584]	; (8001568 <HAL_GPIO_Init+0x294>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d86f      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 8001322:	4a92      	ldr	r2, [pc, #584]	; (800156c <HAL_GPIO_Init+0x298>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d052      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 8001328:	4a90      	ldr	r2, [pc, #576]	; (800156c <HAL_GPIO_Init+0x298>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d869      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 800132e:	4a90      	ldr	r2, [pc, #576]	; (8001570 <HAL_GPIO_Init+0x29c>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d04c      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 8001334:	4a8e      	ldr	r2, [pc, #568]	; (8001570 <HAL_GPIO_Init+0x29c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d863      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 800133a:	4a8e      	ldr	r2, [pc, #568]	; (8001574 <HAL_GPIO_Init+0x2a0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d046      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 8001340:	4a8c      	ldr	r2, [pc, #560]	; (8001574 <HAL_GPIO_Init+0x2a0>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d85d      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 8001346:	2b12      	cmp	r3, #18
 8001348:	d82a      	bhi.n	80013a0 <HAL_GPIO_Init+0xcc>
 800134a:	2b12      	cmp	r3, #18
 800134c:	d859      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 800134e:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <HAL_GPIO_Init+0x80>)
 8001350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001354:	080013cf 	.word	0x080013cf
 8001358:	080013a9 	.word	0x080013a9
 800135c:	080013bb 	.word	0x080013bb
 8001360:	080013fd 	.word	0x080013fd
 8001364:	08001403 	.word	0x08001403
 8001368:	08001403 	.word	0x08001403
 800136c:	08001403 	.word	0x08001403
 8001370:	08001403 	.word	0x08001403
 8001374:	08001403 	.word	0x08001403
 8001378:	08001403 	.word	0x08001403
 800137c:	08001403 	.word	0x08001403
 8001380:	08001403 	.word	0x08001403
 8001384:	08001403 	.word	0x08001403
 8001388:	08001403 	.word	0x08001403
 800138c:	08001403 	.word	0x08001403
 8001390:	08001403 	.word	0x08001403
 8001394:	08001403 	.word	0x08001403
 8001398:	080013b1 	.word	0x080013b1
 800139c:	080013c5 	.word	0x080013c5
 80013a0:	4a75      	ldr	r2, [pc, #468]	; (8001578 <HAL_GPIO_Init+0x2a4>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d013      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013a6:	e02c      	b.n	8001402 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	623b      	str	r3, [r7, #32]
          break;
 80013ae:	e029      	b.n	8001404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	3304      	adds	r3, #4
 80013b6:	623b      	str	r3, [r7, #32]
          break;
 80013b8:	e024      	b.n	8001404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	3308      	adds	r3, #8
 80013c0:	623b      	str	r3, [r7, #32]
          break;
 80013c2:	e01f      	b.n	8001404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	330c      	adds	r3, #12
 80013ca:	623b      	str	r3, [r7, #32]
          break;
 80013cc:	e01a      	b.n	8001404 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d102      	bne.n	80013dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013d6:	2304      	movs	r3, #4
 80013d8:	623b      	str	r3, [r7, #32]
          break;
 80013da:	e013      	b.n	8001404 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d105      	bne.n	80013f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e4:	2308      	movs	r3, #8
 80013e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69fa      	ldr	r2, [r7, #28]
 80013ec:	611a      	str	r2, [r3, #16]
          break;
 80013ee:	e009      	b.n	8001404 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013f0:	2308      	movs	r3, #8
 80013f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	615a      	str	r2, [r3, #20]
          break;
 80013fa:	e003      	b.n	8001404 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
          break;
 8001400:	e000      	b.n	8001404 <HAL_GPIO_Init+0x130>
          break;
 8001402:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	2bff      	cmp	r3, #255	; 0xff
 8001408:	d801      	bhi.n	800140e <HAL_GPIO_Init+0x13a>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	e001      	b.n	8001412 <HAL_GPIO_Init+0x13e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3304      	adds	r3, #4
 8001412:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	2bff      	cmp	r3, #255	; 0xff
 8001418:	d802      	bhi.n	8001420 <HAL_GPIO_Init+0x14c>
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	e002      	b.n	8001426 <HAL_GPIO_Init+0x152>
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	3b08      	subs	r3, #8
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	210f      	movs	r1, #15
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	fa01 f303 	lsl.w	r3, r1, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	401a      	ands	r2, r3
 8001438:	6a39      	ldr	r1, [r7, #32]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	fa01 f303 	lsl.w	r3, r1, r3
 8001440:	431a      	orrs	r2, r3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 80c1 	beq.w	80015d6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001454:	4b49      	ldr	r3, [pc, #292]	; (800157c <HAL_GPIO_Init+0x2a8>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4a48      	ldr	r2, [pc, #288]	; (800157c <HAL_GPIO_Init+0x2a8>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6193      	str	r3, [r2, #24]
 8001460:	4b46      	ldr	r3, [pc, #280]	; (800157c <HAL_GPIO_Init+0x2a8>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800146c:	4a44      	ldr	r2, [pc, #272]	; (8001580 <HAL_GPIO_Init+0x2ac>)
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	089b      	lsrs	r3, r3, #2
 8001472:	3302      	adds	r3, #2
 8001474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001478:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	220f      	movs	r2, #15
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	4013      	ands	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a3c      	ldr	r2, [pc, #240]	; (8001584 <HAL_GPIO_Init+0x2b0>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d01f      	beq.n	80014d8 <HAL_GPIO_Init+0x204>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a3b      	ldr	r2, [pc, #236]	; (8001588 <HAL_GPIO_Init+0x2b4>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d019      	beq.n	80014d4 <HAL_GPIO_Init+0x200>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a3a      	ldr	r2, [pc, #232]	; (800158c <HAL_GPIO_Init+0x2b8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d013      	beq.n	80014d0 <HAL_GPIO_Init+0x1fc>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a39      	ldr	r2, [pc, #228]	; (8001590 <HAL_GPIO_Init+0x2bc>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d00d      	beq.n	80014cc <HAL_GPIO_Init+0x1f8>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a38      	ldr	r2, [pc, #224]	; (8001594 <HAL_GPIO_Init+0x2c0>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d007      	beq.n	80014c8 <HAL_GPIO_Init+0x1f4>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a37      	ldr	r2, [pc, #220]	; (8001598 <HAL_GPIO_Init+0x2c4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d101      	bne.n	80014c4 <HAL_GPIO_Init+0x1f0>
 80014c0:	2305      	movs	r3, #5
 80014c2:	e00a      	b.n	80014da <HAL_GPIO_Init+0x206>
 80014c4:	2306      	movs	r3, #6
 80014c6:	e008      	b.n	80014da <HAL_GPIO_Init+0x206>
 80014c8:	2304      	movs	r3, #4
 80014ca:	e006      	b.n	80014da <HAL_GPIO_Init+0x206>
 80014cc:	2303      	movs	r3, #3
 80014ce:	e004      	b.n	80014da <HAL_GPIO_Init+0x206>
 80014d0:	2302      	movs	r3, #2
 80014d2:	e002      	b.n	80014da <HAL_GPIO_Init+0x206>
 80014d4:	2301      	movs	r3, #1
 80014d6:	e000      	b.n	80014da <HAL_GPIO_Init+0x206>
 80014d8:	2300      	movs	r3, #0
 80014da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014dc:	f002 0203 	and.w	r2, r2, #3
 80014e0:	0092      	lsls	r2, r2, #2
 80014e2:	4093      	lsls	r3, r2
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014ea:	4925      	ldr	r1, [pc, #148]	; (8001580 <HAL_GPIO_Init+0x2ac>)
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	089b      	lsrs	r3, r3, #2
 80014f0:	3302      	adds	r3, #2
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d006      	beq.n	8001512 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001504:	4b25      	ldr	r3, [pc, #148]	; (800159c <HAL_GPIO_Init+0x2c8>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4924      	ldr	r1, [pc, #144]	; (800159c <HAL_GPIO_Init+0x2c8>)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	4313      	orrs	r3, r2
 800150e:	600b      	str	r3, [r1, #0]
 8001510:	e006      	b.n	8001520 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001512:	4b22      	ldr	r3, [pc, #136]	; (800159c <HAL_GPIO_Init+0x2c8>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	43db      	mvns	r3, r3
 800151a:	4920      	ldr	r1, [pc, #128]	; (800159c <HAL_GPIO_Init+0x2c8>)
 800151c:	4013      	ands	r3, r2
 800151e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d006      	beq.n	800153a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <HAL_GPIO_Init+0x2c8>)
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	491a      	ldr	r1, [pc, #104]	; (800159c <HAL_GPIO_Init+0x2c8>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	4313      	orrs	r3, r2
 8001536:	604b      	str	r3, [r1, #4]
 8001538:	e006      	b.n	8001548 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <HAL_GPIO_Init+0x2c8>)
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	43db      	mvns	r3, r3
 8001542:	4916      	ldr	r1, [pc, #88]	; (800159c <HAL_GPIO_Init+0x2c8>)
 8001544:	4013      	ands	r3, r2
 8001546:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d025      	beq.n	80015a0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <HAL_GPIO_Init+0x2c8>)
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	4910      	ldr	r1, [pc, #64]	; (800159c <HAL_GPIO_Init+0x2c8>)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	4313      	orrs	r3, r2
 800155e:	608b      	str	r3, [r1, #8]
 8001560:	e025      	b.n	80015ae <HAL_GPIO_Init+0x2da>
 8001562:	bf00      	nop
 8001564:	10320000 	.word	0x10320000
 8001568:	10310000 	.word	0x10310000
 800156c:	10220000 	.word	0x10220000
 8001570:	10210000 	.word	0x10210000
 8001574:	10120000 	.word	0x10120000
 8001578:	10110000 	.word	0x10110000
 800157c:	40021000 	.word	0x40021000
 8001580:	40010000 	.word	0x40010000
 8001584:	40010800 	.word	0x40010800
 8001588:	40010c00 	.word	0x40010c00
 800158c:	40011000 	.word	0x40011000
 8001590:	40011400 	.word	0x40011400
 8001594:	40011800 	.word	0x40011800
 8001598:	40011c00 	.word	0x40011c00
 800159c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015a0:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_GPIO_Init+0x324>)
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	4913      	ldr	r1, [pc, #76]	; (80015f8 <HAL_GPIO_Init+0x324>)
 80015aa:	4013      	ands	r3, r2
 80015ac:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d006      	beq.n	80015c8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <HAL_GPIO_Init+0x324>)
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	490e      	ldr	r1, [pc, #56]	; (80015f8 <HAL_GPIO_Init+0x324>)
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	60cb      	str	r3, [r1, #12]
 80015c6:	e006      	b.n	80015d6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_GPIO_Init+0x324>)
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	4909      	ldr	r1, [pc, #36]	; (80015f8 <HAL_GPIO_Init+0x324>)
 80015d2:	4013      	ands	r3, r2
 80015d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	3301      	adds	r3, #1
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	fa22 f303 	lsr.w	r3, r2, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f47f ae7e 	bne.w	80012e8 <HAL_GPIO_Init+0x14>
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	372c      	adds	r7, #44	; 0x2c
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	40010400 	.word	0x40010400

080015fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	887b      	ldrh	r3, [r7, #2]
 800160e:	4013      	ands	r3, r2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d002      	beq.n	800161a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e001      	b.n	800161e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800161e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	460b      	mov	r3, r1
 8001634:	807b      	strh	r3, [r7, #2]
 8001636:	4613      	mov	r3, r2
 8001638:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800163a:	787b      	ldrb	r3, [r7, #1]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001640:	887a      	ldrh	r2, [r7, #2]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001646:	e003      	b.n	8001650 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001648:	887b      	ldrh	r3, [r7, #2]
 800164a:	041a      	lsls	r2, r3, #16
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	611a      	str	r2, [r3, #16]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
	...

0800165c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e272      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 8087 	beq.w	800178a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800167c:	4b92      	ldr	r3, [pc, #584]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 030c 	and.w	r3, r3, #12
 8001684:	2b04      	cmp	r3, #4
 8001686:	d00c      	beq.n	80016a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001688:	4b8f      	ldr	r3, [pc, #572]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 030c 	and.w	r3, r3, #12
 8001690:	2b08      	cmp	r3, #8
 8001692:	d112      	bne.n	80016ba <HAL_RCC_OscConfig+0x5e>
 8001694:	4b8c      	ldr	r3, [pc, #560]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a0:	d10b      	bne.n	80016ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a2:	4b89      	ldr	r3, [pc, #548]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d06c      	beq.n	8001788 <HAL_RCC_OscConfig+0x12c>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d168      	bne.n	8001788 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e24c      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c2:	d106      	bne.n	80016d2 <HAL_RCC_OscConfig+0x76>
 80016c4:	4b80      	ldr	r3, [pc, #512]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a7f      	ldr	r2, [pc, #508]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	e02e      	b.n	8001730 <HAL_RCC_OscConfig+0xd4>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x98>
 80016da:	4b7b      	ldr	r3, [pc, #492]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a7a      	ldr	r2, [pc, #488]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	4b78      	ldr	r3, [pc, #480]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a77      	ldr	r2, [pc, #476]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	e01d      	b.n	8001730 <HAL_RCC_OscConfig+0xd4>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016fc:	d10c      	bne.n	8001718 <HAL_RCC_OscConfig+0xbc>
 80016fe:	4b72      	ldr	r3, [pc, #456]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a71      	ldr	r2, [pc, #452]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	4b6f      	ldr	r3, [pc, #444]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a6e      	ldr	r2, [pc, #440]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e00b      	b.n	8001730 <HAL_RCC_OscConfig+0xd4>
 8001718:	4b6b      	ldr	r3, [pc, #428]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a6a      	ldr	r2, [pc, #424]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800171e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b68      	ldr	r3, [pc, #416]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a67      	ldr	r2, [pc, #412]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800172a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800172e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d013      	beq.n	8001760 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff fcba 	bl	80010b0 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001740:	f7ff fcb6 	bl	80010b0 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b64      	cmp	r3, #100	; 0x64
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e200      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001752:	4b5d      	ldr	r3, [pc, #372]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f0      	beq.n	8001740 <HAL_RCC_OscConfig+0xe4>
 800175e:	e014      	b.n	800178a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fca6 	bl	80010b0 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff fca2 	bl	80010b0 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e1ec      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177a:	4b53      	ldr	r3, [pc, #332]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x10c>
 8001786:	e000      	b.n	800178a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d063      	beq.n	800185e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001796:	4b4c      	ldr	r3, [pc, #304]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00b      	beq.n	80017ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017a2:	4b49      	ldr	r3, [pc, #292]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d11c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x18c>
 80017ae:	4b46      	ldr	r3, [pc, #280]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d116      	bne.n	80017e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ba:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d005      	beq.n	80017d2 <HAL_RCC_OscConfig+0x176>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d001      	beq.n	80017d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e1c0      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d2:	4b3d      	ldr	r3, [pc, #244]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	4939      	ldr	r1, [pc, #228]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e6:	e03a      	b.n	800185e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d020      	beq.n	8001832 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f0:	4b36      	ldr	r3, [pc, #216]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f6:	f7ff fc5b 	bl	80010b0 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017fe:	f7ff fc57 	bl	80010b0 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e1a1      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001810:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181c:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4927      	ldr	r1, [pc, #156]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800182c:	4313      	orrs	r3, r2
 800182e:	600b      	str	r3, [r1, #0]
 8001830:	e015      	b.n	800185e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001832:	4b26      	ldr	r3, [pc, #152]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff fc3a 	bl	80010b0 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001840:	f7ff fc36 	bl	80010b0 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e180      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001852:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d03a      	beq.n	80018e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d019      	beq.n	80018a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001872:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 8001874:	2201      	movs	r2, #1
 8001876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001878:	f7ff fc1a 	bl	80010b0 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001880:	f7ff fc16 	bl	80010b0 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e160      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800189e:	2001      	movs	r0, #1
 80018a0:	f000 fad8 	bl	8001e54 <RCC_Delay>
 80018a4:	e01c      	b.n	80018e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ac:	f7ff fc00 	bl	80010b0 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b2:	e00f      	b.n	80018d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b4:	f7ff fbfc 	bl	80010b0 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d908      	bls.n	80018d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e146      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000
 80018cc:	42420000 	.word	0x42420000
 80018d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d4:	4b92      	ldr	r3, [pc, #584]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1e9      	bne.n	80018b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 80a6 	beq.w	8001a3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018f2:	4b8b      	ldr	r3, [pc, #556]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10d      	bne.n	800191a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	4b88      	ldr	r3, [pc, #544]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	4a87      	ldr	r2, [pc, #540]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001908:	61d3      	str	r3, [r2, #28]
 800190a:	4b85      	ldr	r3, [pc, #532]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001916:	2301      	movs	r3, #1
 8001918:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191a:	4b82      	ldr	r3, [pc, #520]	; (8001b24 <HAL_RCC_OscConfig+0x4c8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001922:	2b00      	cmp	r3, #0
 8001924:	d118      	bne.n	8001958 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001926:	4b7f      	ldr	r3, [pc, #508]	; (8001b24 <HAL_RCC_OscConfig+0x4c8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a7e      	ldr	r2, [pc, #504]	; (8001b24 <HAL_RCC_OscConfig+0x4c8>)
 800192c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001932:	f7ff fbbd 	bl	80010b0 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800193a:	f7ff fbb9 	bl	80010b0 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b64      	cmp	r3, #100	; 0x64
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e103      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194c:	4b75      	ldr	r3, [pc, #468]	; (8001b24 <HAL_RCC_OscConfig+0x4c8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0f0      	beq.n	800193a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d106      	bne.n	800196e <HAL_RCC_OscConfig+0x312>
 8001960:	4b6f      	ldr	r3, [pc, #444]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	4a6e      	ldr	r2, [pc, #440]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6213      	str	r3, [r2, #32]
 800196c:	e02d      	b.n	80019ca <HAL_RCC_OscConfig+0x36e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10c      	bne.n	8001990 <HAL_RCC_OscConfig+0x334>
 8001976:	4b6a      	ldr	r3, [pc, #424]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	4a69      	ldr	r2, [pc, #420]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 800197c:	f023 0301 	bic.w	r3, r3, #1
 8001980:	6213      	str	r3, [r2, #32]
 8001982:	4b67      	ldr	r3, [pc, #412]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	4a66      	ldr	r2, [pc, #408]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	f023 0304 	bic.w	r3, r3, #4
 800198c:	6213      	str	r3, [r2, #32]
 800198e:	e01c      	b.n	80019ca <HAL_RCC_OscConfig+0x36e>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	2b05      	cmp	r3, #5
 8001996:	d10c      	bne.n	80019b2 <HAL_RCC_OscConfig+0x356>
 8001998:	4b61      	ldr	r3, [pc, #388]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	4a60      	ldr	r2, [pc, #384]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 800199e:	f043 0304 	orr.w	r3, r3, #4
 80019a2:	6213      	str	r3, [r2, #32]
 80019a4:	4b5e      	ldr	r3, [pc, #376]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	4a5d      	ldr	r2, [pc, #372]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6213      	str	r3, [r2, #32]
 80019b0:	e00b      	b.n	80019ca <HAL_RCC_OscConfig+0x36e>
 80019b2:	4b5b      	ldr	r3, [pc, #364]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	4a5a      	ldr	r2, [pc, #360]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	f023 0301 	bic.w	r3, r3, #1
 80019bc:	6213      	str	r3, [r2, #32]
 80019be:	4b58      	ldr	r3, [pc, #352]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	4a57      	ldr	r2, [pc, #348]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	f023 0304 	bic.w	r3, r3, #4
 80019c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d015      	beq.n	80019fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d2:	f7ff fb6d 	bl	80010b0 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d8:	e00a      	b.n	80019f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019da:	f7ff fb69 	bl	80010b0 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e0b1      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f0:	4b4b      	ldr	r3, [pc, #300]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0ee      	beq.n	80019da <HAL_RCC_OscConfig+0x37e>
 80019fc:	e014      	b.n	8001a28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fe:	f7ff fb57 	bl	80010b0 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a04:	e00a      	b.n	8001a1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a06:	f7ff fb53 	bl	80010b0 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e09b      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1c:	4b40      	ldr	r3, [pc, #256]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1ee      	bne.n	8001a06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d105      	bne.n	8001a3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a2e:	4b3c      	ldr	r3, [pc, #240]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	4a3b      	ldr	r2, [pc, #236]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 8087 	beq.w	8001b52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a44:	4b36      	ldr	r3, [pc, #216]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 030c 	and.w	r3, r3, #12
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d061      	beq.n	8001b14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d146      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a58:	4b33      	ldr	r3, [pc, #204]	; (8001b28 <HAL_RCC_OscConfig+0x4cc>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5e:	f7ff fb27 	bl	80010b0 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a66:	f7ff fb23 	bl	80010b0 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e06d      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a78:	4b29      	ldr	r3, [pc, #164]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f0      	bne.n	8001a66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8c:	d108      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a8e:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	4921      	ldr	r1, [pc, #132]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa0:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a19      	ldr	r1, [r3, #32]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	491b      	ldr	r1, [pc, #108]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <HAL_RCC_OscConfig+0x4cc>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abe:	f7ff faf7 	bl	80010b0 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac6:	f7ff faf3 	bl	80010b0 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e03d      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f0      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x46a>
 8001ae4:	e035      	b.n	8001b52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <HAL_RCC_OscConfig+0x4cc>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7ff fae0 	bl	80010b0 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af4:	f7ff fadc 	bl	80010b0 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e026      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x498>
 8001b12:	e01e      	b.n	8001b52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d107      	bne.n	8001b2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e019      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40007000 	.word	0x40007000
 8001b28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_RCC_OscConfig+0x500>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d106      	bne.n	8001b4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d001      	beq.n	8001b52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40021000 	.word	0x40021000

08001b60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0d0      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b74:	4b6a      	ldr	r3, [pc, #424]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d910      	bls.n	8001ba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b82:	4b67      	ldr	r3, [pc, #412]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f023 0207 	bic.w	r2, r3, #7
 8001b8a:	4965      	ldr	r1, [pc, #404]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b92:	4b63      	ldr	r3, [pc, #396]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0b8      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d020      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bbc:	4b59      	ldr	r3, [pc, #356]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	4a58      	ldr	r2, [pc, #352]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0308 	and.w	r3, r3, #8
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bd4:	4b53      	ldr	r3, [pc, #332]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	4a52      	ldr	r2, [pc, #328]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be0:	4b50      	ldr	r3, [pc, #320]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	494d      	ldr	r1, [pc, #308]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d040      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d107      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c06:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d115      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e07f      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1e:	4b41      	ldr	r3, [pc, #260]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e073      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2e:	4b3d      	ldr	r3, [pc, #244]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e06b      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c3e:	4b39      	ldr	r3, [pc, #228]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f023 0203 	bic.w	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	4936      	ldr	r1, [pc, #216]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c50:	f7ff fa2e 	bl	80010b0 <HAL_GetTick>
 8001c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c58:	f7ff fa2a 	bl	80010b0 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e053      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6e:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 020c 	and.w	r2, r3, #12
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d1eb      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c80:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d210      	bcs.n	8001cb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 0207 	bic.w	r2, r3, #7
 8001c96:	4922      	ldr	r1, [pc, #136]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9e:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d001      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e032      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d008      	beq.n	8001cce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cbc:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	4916      	ldr	r1, [pc, #88]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d009      	beq.n	8001cee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	490e      	ldr	r1, [pc, #56]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cee:	f000 f821 	bl	8001d34 <HAL_RCC_GetSysClockFreq>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	490a      	ldr	r1, [pc, #40]	; (8001d28 <HAL_RCC_ClockConfig+0x1c8>)
 8001d00:	5ccb      	ldrb	r3, [r1, r3]
 8001d02:	fa22 f303 	lsr.w	r3, r2, r3
 8001d06:	4a09      	ldr	r2, [pc, #36]	; (8001d2c <HAL_RCC_ClockConfig+0x1cc>)
 8001d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_RCC_ClockConfig+0x1d0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f98c 	bl	800102c <HAL_InitTick>

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40022000 	.word	0x40022000
 8001d24:	40021000 	.word	0x40021000
 8001d28:	08002c38 	.word	0x08002c38
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	20000004 	.word	0x20000004

08001d34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d34:	b490      	push	{r4, r7}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d3a:	4b29      	ldr	r3, [pc, #164]	; (8001de0 <HAL_RCC_GetSysClockFreq+0xac>)
 8001d3c:	1d3c      	adds	r4, r7, #4
 8001d3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d44:	f240 2301 	movw	r3, #513	; 0x201
 8001d48:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
 8001d52:	2300      	movs	r3, #0
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d5e:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d002      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0x40>
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d003      	beq.n	8001d7a <HAL_RCC_GetSysClockFreq+0x46>
 8001d72:	e02b      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d74:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d76:	623b      	str	r3, [r7, #32]
      break;
 8001d78:	e02b      	b.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	0c9b      	lsrs	r3, r3, #18
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	3328      	adds	r3, #40	; 0x28
 8001d84:	443b      	add	r3, r7
 8001d86:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d8a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d012      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d96:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	0c5b      	lsrs	r3, r3, #17
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	3328      	adds	r3, #40	; 0x28
 8001da2:	443b      	add	r3, r7
 8001da4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001da8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	4a0e      	ldr	r2, [pc, #56]	; (8001de8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dae:	fb03 f202 	mul.w	r2, r3, r2
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dba:	e004      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	4a0b      	ldr	r2, [pc, #44]	; (8001dec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc0:	fb02 f303 	mul.w	r3, r2, r3
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	623b      	str	r3, [r7, #32]
      break;
 8001dca:	e002      	b.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dce:	623b      	str	r3, [r7, #32]
      break;
 8001dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3728      	adds	r7, #40	; 0x28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc90      	pop	{r4, r7}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	08002638 	.word	0x08002638
 8001de4:	40021000 	.word	0x40021000
 8001de8:	007a1200 	.word	0x007a1200
 8001dec:	003d0900 	.word	0x003d0900

08001df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001df4:	4b02      	ldr	r3, [pc, #8]	; (8001e00 <HAL_RCC_GetHCLKFreq+0x10>)
 8001df6:	681b      	ldr	r3, [r3, #0]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	20000000 	.word	0x20000000

08001e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e08:	f7ff fff2 	bl	8001df0 <HAL_RCC_GetHCLKFreq>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	4903      	ldr	r1, [pc, #12]	; (8001e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e1a:	5ccb      	ldrb	r3, [r1, r3]
 8001e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40021000 	.word	0x40021000
 8001e28:	08002c48 	.word	0x08002c48

08001e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e30:	f7ff ffde 	bl	8001df0 <HAL_RCC_GetHCLKFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	0adb      	lsrs	r3, r3, #11
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	4903      	ldr	r1, [pc, #12]	; (8001e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	08002c48 	.word	0x08002c48

08001e54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e5c:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <RCC_Delay+0x34>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <RCC_Delay+0x38>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	0a5b      	lsrs	r3, r3, #9
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	fb02 f303 	mul.w	r3, r2, r3
 8001e6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e70:	bf00      	nop
  }
  while (Delay --);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1e5a      	subs	r2, r3, #1
 8001e76:	60fa      	str	r2, [r7, #12]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1f9      	bne.n	8001e70 <RCC_Delay+0x1c>
}
 8001e7c:	bf00      	nop
 8001e7e:	bf00      	nop
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	10624dd3 	.word	0x10624dd3

08001e90 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d004      	beq.n	8001eac <HAL_SRAM_Init+0x1c>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eaa:	d101      	bne.n	8001eb0 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e038      	b.n	8001f22 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d106      	bne.n	8001eca <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f7ff f83d 	bl	8000f44 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	3308      	adds	r3, #8
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	f000 f9df 	bl	8002298 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6818      	ldr	r0, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	f000 fa41 	bl	800236c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6858      	ldr	r0, [r3, #4]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	f000 fa6c 	bl	80023d4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	6892      	ldr	r2, [r2, #8]
 8001f04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	6892      	ldr	r2, [r2, #8]
 8001f10:	f041 0101 	orr.w	r1, r1, #1
 8001f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e03f      	b.n	8001fbc <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d106      	bne.n	8001f56 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7fe ff67 	bl	8000e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2224      	movs	r2, #36	; 0x24
 8001f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f6c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f904 	bl	800217c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691a      	ldr	r2, [r3, #16]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f82:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	695a      	ldr	r2, [r3, #20]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f92:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fa2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2220      	movs	r2, #32
 8001fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	; 0x28
 8001fc8:	af02      	add	r7, sp, #8
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b20      	cmp	r3, #32
 8001fe2:	d17c      	bne.n	80020de <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d002      	beq.n	8001ff0 <HAL_UART_Transmit+0x2c>
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e075      	b.n	80020e0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d101      	bne.n	8002002 <HAL_UART_Transmit+0x3e>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e06e      	b.n	80020e0 <HAL_UART_Transmit+0x11c>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2221      	movs	r2, #33	; 0x21
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002018:	f7ff f84a 	bl	80010b0 <HAL_GetTick>
 800201c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	88fa      	ldrh	r2, [r7, #6]
 8002022:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	88fa      	ldrh	r2, [r7, #6]
 8002028:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002032:	d108      	bne.n	8002046 <HAL_UART_Transmit+0x82>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d104      	bne.n	8002046 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	61bb      	str	r3, [r7, #24]
 8002044:	e003      	b.n	800204e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002056:	e02a      	b.n	80020ae <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2200      	movs	r2, #0
 8002060:	2180      	movs	r1, #128	; 0x80
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 f840 	bl	80020e8 <UART_WaitOnFlagUntilTimeout>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e036      	b.n	80020e0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10b      	bne.n	8002090 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002086:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	3302      	adds	r3, #2
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	e007      	b.n	80020a0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	781a      	ldrb	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3301      	adds	r3, #1
 800209e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1cf      	bne.n	8002058 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	2200      	movs	r2, #0
 80020c0:	2140      	movs	r1, #64	; 0x40
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 f810 	bl	80020e8 <UART_WaitOnFlagUntilTimeout>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e006      	b.n	80020e0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2220      	movs	r2, #32
 80020d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	e000      	b.n	80020e0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80020de:	2302      	movs	r3, #2
  }
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3720      	adds	r7, #32
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	4613      	mov	r3, r2
 80020f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020f8:	e02c      	b.n	8002154 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002100:	d028      	beq.n	8002154 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d007      	beq.n	8002118 <UART_WaitOnFlagUntilTimeout+0x30>
 8002108:	f7fe ffd2 	bl	80010b0 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	429a      	cmp	r2, r3
 8002116:	d21d      	bcs.n	8002154 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002126:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695a      	ldr	r2, [r3, #20]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0201 	bic.w	r2, r2, #1
 8002136:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e00f      	b.n	8002174 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	4013      	ands	r3, r2
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	429a      	cmp	r2, r3
 8002162:	bf0c      	ite	eq
 8002164:	2301      	moveq	r3, #1
 8002166:	2300      	movne	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	461a      	mov	r2, r3
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	429a      	cmp	r2, r3
 8002170:	d0c3      	beq.n	80020fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80021b6:	f023 030c 	bic.w	r3, r3, #12
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	68b9      	ldr	r1, [r7, #8]
 80021c0:	430b      	orrs	r3, r1
 80021c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699a      	ldr	r2, [r3, #24]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a2c      	ldr	r2, [pc, #176]	; (8002290 <UART_SetConfig+0x114>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d103      	bne.n	80021ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021e4:	f7ff fe22 	bl	8001e2c <HAL_RCC_GetPCLK2Freq>
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	e002      	b.n	80021f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80021ec:	f7ff fe0a 	bl	8001e04 <HAL_RCC_GetPCLK1Freq>
 80021f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	009a      	lsls	r2, r3, #2
 80021fc:	441a      	add	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	fbb2 f3f3 	udiv	r3, r2, r3
 8002208:	4a22      	ldr	r2, [pc, #136]	; (8002294 <UART_SetConfig+0x118>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	0119      	lsls	r1, r3, #4
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4613      	mov	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	009a      	lsls	r2, r3, #2
 800221c:	441a      	add	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	fbb2 f2f3 	udiv	r2, r2, r3
 8002228:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <UART_SetConfig+0x118>)
 800222a:	fba3 0302 	umull	r0, r3, r3, r2
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	2064      	movs	r0, #100	; 0x64
 8002232:	fb00 f303 	mul.w	r3, r0, r3
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	3332      	adds	r3, #50	; 0x32
 800223c:	4a15      	ldr	r2, [pc, #84]	; (8002294 <UART_SetConfig+0x118>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002248:	4419      	add	r1, r3
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	009a      	lsls	r2, r3, #2
 8002254:	441a      	add	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <UART_SetConfig+0x118>)
 8002262:	fba3 0302 	umull	r0, r3, r3, r2
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	2064      	movs	r0, #100	; 0x64
 800226a:	fb00 f303 	mul.w	r3, r0, r3
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	3332      	adds	r3, #50	; 0x32
 8002274:	4a07      	ldr	r2, [pc, #28]	; (8002294 <UART_SetConfig+0x118>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	f003 020f 	and.w	r2, r3, #15
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	440a      	add	r2, r1
 8002286:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002288:	bf00      	nop
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40013800 	.word	0x40013800
 8002294:	51eb851f 	.word	0x51eb851f

08002298 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	f023 0101 	bic.w	r1, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d102      	bne.n	80022c8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80022c2:	2340      	movs	r3, #64	; 0x40
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	e001      	b.n	80022cc <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80022d8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80022de:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80022e4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80022ea:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80022f0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80022f6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80022fc:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8002302:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8002308:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800230e:	4313      	orrs	r3, r2
 8002310:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <FSMC_NORSRAM_Init+0xd0>)
 8002328:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002330:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002338:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	43db      	mvns	r3, r3
 8002348:	ea02 0103 	and.w	r1, r2, r3
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4319      	orrs	r1, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	371c      	adds	r7, #28
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	0008fb7f 	.word	0x0008fb7f

0800236c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002382:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	431a      	orrs	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	431a      	orrs	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	041b      	lsls	r3, r3, #16
 80023a0:	431a      	orrs	r2, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	051b      	lsls	r3, r3, #20
 80023aa:	431a      	orrs	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	3b02      	subs	r3, #2
 80023b2:	061b      	lsls	r3, r3, #24
 80023b4:	431a      	orrs	r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	3201      	adds	r2, #1
 80023c0:	4319      	orrs	r1, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023e8:	d11d      	bne.n	8002426 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80023f2:	4b13      	ldr	r3, [pc, #76]	; (8002440 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	6811      	ldr	r1, [r2, #0]
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	6852      	ldr	r2, [r2, #4]
 80023fe:	0112      	lsls	r2, r2, #4
 8002400:	4311      	orrs	r1, r2
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	6892      	ldr	r2, [r2, #8]
 8002406:	0212      	lsls	r2, r2, #8
 8002408:	4311      	orrs	r1, r2
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	6992      	ldr	r2, [r2, #24]
 800240e:	4311      	orrs	r1, r2
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	68d2      	ldr	r2, [r2, #12]
 8002414:	0412      	lsls	r2, r2, #16
 8002416:	430a      	orrs	r2, r1
 8002418:	ea43 0102 	orr.w	r1, r3, r2
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002424:	e005      	b.n	8002432 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800242e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	cff00000 	.word	0xcff00000

08002444 <__libc_init_array>:
 8002444:	b570      	push	{r4, r5, r6, lr}
 8002446:	2600      	movs	r6, #0
 8002448:	4d0c      	ldr	r5, [pc, #48]	; (800247c <__libc_init_array+0x38>)
 800244a:	4c0d      	ldr	r4, [pc, #52]	; (8002480 <__libc_init_array+0x3c>)
 800244c:	1b64      	subs	r4, r4, r5
 800244e:	10a4      	asrs	r4, r4, #2
 8002450:	42a6      	cmp	r6, r4
 8002452:	d109      	bne.n	8002468 <__libc_init_array+0x24>
 8002454:	f000 f822 	bl	800249c <_init>
 8002458:	2600      	movs	r6, #0
 800245a:	4d0a      	ldr	r5, [pc, #40]	; (8002484 <__libc_init_array+0x40>)
 800245c:	4c0a      	ldr	r4, [pc, #40]	; (8002488 <__libc_init_array+0x44>)
 800245e:	1b64      	subs	r4, r4, r5
 8002460:	10a4      	asrs	r4, r4, #2
 8002462:	42a6      	cmp	r6, r4
 8002464:	d105      	bne.n	8002472 <__libc_init_array+0x2e>
 8002466:	bd70      	pop	{r4, r5, r6, pc}
 8002468:	f855 3b04 	ldr.w	r3, [r5], #4
 800246c:	4798      	blx	r3
 800246e:	3601      	adds	r6, #1
 8002470:	e7ee      	b.n	8002450 <__libc_init_array+0xc>
 8002472:	f855 3b04 	ldr.w	r3, [r5], #4
 8002476:	4798      	blx	r3
 8002478:	3601      	adds	r6, #1
 800247a:	e7f2      	b.n	8002462 <__libc_init_array+0x1e>
 800247c:	08002c50 	.word	0x08002c50
 8002480:	08002c50 	.word	0x08002c50
 8002484:	08002c50 	.word	0x08002c50
 8002488:	08002c54 	.word	0x08002c54

0800248c <memset>:
 800248c:	4603      	mov	r3, r0
 800248e:	4402      	add	r2, r0
 8002490:	4293      	cmp	r3, r2
 8002492:	d100      	bne.n	8002496 <memset+0xa>
 8002494:	4770      	bx	lr
 8002496:	f803 1b01 	strb.w	r1, [r3], #1
 800249a:	e7f9      	b.n	8002490 <memset+0x4>

0800249c <_init>:
 800249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249e:	bf00      	nop
 80024a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024a2:	bc08      	pop	{r3}
 80024a4:	469e      	mov	lr, r3
 80024a6:	4770      	bx	lr

080024a8 <_fini>:
 80024a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024aa:	bf00      	nop
 80024ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ae:	bc08      	pop	{r3}
 80024b0:	469e      	mov	lr, r3
 80024b2:	4770      	bx	lr
