
ELEC3300_project_jubeat_imitate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000314c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000794  08003330  08003330  00013330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ac4  08003ac4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ac4  08003ac4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ac4  08003ac4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ac4  08003ac4  00013ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ac8  08003ac8  00013ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003acc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  08003ad8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003ad8  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cccc  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021fd  00000000  00000000  0002cd01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  0002ef00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  0002fde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac42  00000000  00000000  00030bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f69d  00000000  00000000  0004b80a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009be48  00000000  00000000  0005aea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6cef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d78  00000000  00000000  000f6d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08003318 	.word	0x08003318

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08003318 	.word	0x08003318

08000224 <an_apple_LCD>:

uint32_t lastToggleTime_apple = 0;
uint8_t currentState_apple = 0;
int cycleFinished_apple = 0;

void an_apple_LCD(void) {
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af02      	add	r7, sp, #8
		  LCD_Clear(0, 0, 240, 320, WHITE);
 800022a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800022e:	9300      	str	r3, [sp, #0]
 8000230:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000234:	22f0      	movs	r2, #240	; 0xf0
 8000236:	2100      	movs	r1, #0
 8000238:	2000      	movs	r0, #0
 800023a:	f000 fcb2 	bl	8000ba2 <LCD_Clear>
		  LCD_DrawString(60,50,"An Apple");
 800023e:	4a0e      	ldr	r2, [pc, #56]	; (8000278 <an_apple_LCD+0x54>)
 8000240:	2132      	movs	r1, #50	; 0x32
 8000242:	203c      	movs	r0, #60	; 0x3c
 8000244:	f000 fd16 	bl	8000c74 <LCD_DrawString>
		  LCD_DrawString(100,80,"-- Mayday ");
 8000248:	4a0c      	ldr	r2, [pc, #48]	; (800027c <an_apple_LCD+0x58>)
 800024a:	2150      	movs	r1, #80	; 0x50
 800024c:	2064      	movs	r0, #100	; 0x64
 800024e:	f000 fd11 	bl	8000c74 <LCD_DrawString>
		  LCD_DrawString(20,110,"Difficulty: Normal");
 8000252:	4a0b      	ldr	r2, [pc, #44]	; (8000280 <an_apple_LCD+0x5c>)
 8000254:	216e      	movs	r1, #110	; 0x6e
 8000256:	2014      	movs	r0, #20
 8000258:	f000 fd0c 	bl	8000c74 <LCD_DrawString>
		  LCD_DrawString(100,170,"Playing");
 800025c:	4a09      	ldr	r2, [pc, #36]	; (8000284 <an_apple_LCD+0x60>)
 800025e:	21aa      	movs	r1, #170	; 0xaa
 8000260:	2064      	movs	r0, #100	; 0x64
 8000262:	f000 fd07 	bl	8000c74 <LCD_DrawString>
		  LCD_DrawString(200,200," ");
 8000266:	4a08      	ldr	r2, [pc, #32]	; (8000288 <an_apple_LCD+0x64>)
 8000268:	21c8      	movs	r1, #200	; 0xc8
 800026a:	20c8      	movs	r0, #200	; 0xc8
 800026c:	f000 fd02 	bl	8000c74 <LCD_DrawString>
}
 8000270:	bf00      	nop
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	08003330 	.word	0x08003330
 800027c:	0800333c 	.word	0x0800333c
 8000280:	08003348 	.word	0x08003348
 8000284:	0800335c 	.word	0x0800335c
 8000288:	08003364 	.word	0x08003364

0800028c <an_apple_musicMap>:

void an_apple_musicMap(void) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000292:	2201      	movs	r2, #1
 8000294:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000298:	4893      	ldr	r0, [pc, #588]	; (80004e8 <an_apple_musicMap+0x25c>)
 800029a:	f001 fd14 	bl	8001cc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 800029e:	2201      	movs	r2, #1
 80002a0:	2120      	movs	r1, #32
 80002a2:	4892      	ldr	r0, [pc, #584]	; (80004ec <an_apple_musicMap+0x260>)
 80002a4:	f001 fd0f 	bl	8001cc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80002a8:	2201      	movs	r2, #1
 80002aa:	2180      	movs	r1, #128	; 0x80
 80002ac:	488e      	ldr	r0, [pc, #568]	; (80004e8 <an_apple_musicMap+0x25c>)
 80002ae:	f001 fd0a 	bl	8001cc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80002b2:	2201      	movs	r2, #1
 80002b4:	2140      	movs	r1, #64	; 0x40
 80002b6:	488c      	ldr	r0, [pc, #560]	; (80004e8 <an_apple_musicMap+0x25c>)
 80002b8:	f001 fd05 	bl	8001cc6 <HAL_GPIO_WritePin>

    uint32_t currentTime = HAL_GetTick();
 80002bc:	f001 fa46 	bl	800174c <HAL_GetTick>
 80002c0:	6038      	str	r0, [r7, #0]
    uint32_t interval;

    switch (currentState_apple % 2) {
 80002c2:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <an_apple_musicMap+0x264>)
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	f003 0301 	and.w	r3, r3, #1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d002      	beq.n	80002d4 <an_apple_musicMap+0x48>
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d003      	beq.n	80002da <an_apple_musicMap+0x4e>
 80002d2:	e005      	b.n	80002e0 <an_apple_musicMap+0x54>
        case 0:
            interval = 100; // 100ms
 80002d4:	2364      	movs	r3, #100	; 0x64
 80002d6:	607b      	str	r3, [r7, #4]
            break;
 80002d8:	e005      	b.n	80002e6 <an_apple_musicMap+0x5a>
        case 1:
            interval = 172; // 172ms
 80002da:	23ac      	movs	r3, #172	; 0xac
 80002dc:	607b      	str	r3, [r7, #4]
            break;
 80002de:	e002      	b.n	80002e6 <an_apple_musicMap+0x5a>
        default:
            interval = 172;
 80002e0:	23ac      	movs	r3, #172	; 0xac
 80002e2:	607b      	str	r3, [r7, #4]
            break;
 80002e4:	bf00      	nop
    }

    // Change states based on the current time and interval
    if (currentTime - lastToggleTime_apple >= interval && cycleFinished_apple < 38) {
 80002e6:	4b83      	ldr	r3, [pc, #524]	; (80004f4 <an_apple_musicMap+0x268>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	683a      	ldr	r2, [r7, #0]
 80002ec:	1ad3      	subs	r3, r2, r3
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	f200 80f4 	bhi.w	80004de <an_apple_musicMap+0x252>
 80002f6:	4b80      	ldr	r3, [pc, #512]	; (80004f8 <an_apple_musicMap+0x26c>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	2b25      	cmp	r3, #37	; 0x25
 80002fc:	f300 80ef 	bgt.w	80004de <an_apple_musicMap+0x252>
        lastToggleTime_apple = currentTime;
 8000300:	4a7c      	ldr	r2, [pc, #496]	; (80004f4 <an_apple_musicMap+0x268>)
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	6013      	str	r3, [r2, #0]

        switch (currentState_apple) {
 8000306:	4b7a      	ldr	r3, [pc, #488]	; (80004f0 <an_apple_musicMap+0x264>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2b0d      	cmp	r3, #13
 800030c:	f200 80ca 	bhi.w	80004a4 <an_apple_musicMap+0x218>
 8000310:	a201      	add	r2, pc, #4	; (adr r2, 8000318 <an_apple_musicMap+0x8c>)
 8000312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000316:	bf00      	nop
 8000318:	08000351 	.word	0x08000351
 800031c:	08000369 	.word	0x08000369
 8000320:	08000383 	.word	0x08000383
 8000324:	0800039b 	.word	0x0800039b
 8000328:	080003b1 	.word	0x080003b1
 800032c:	080003c9 	.word	0x080003c9
 8000330:	080003e3 	.word	0x080003e3
 8000334:	080003fb 	.word	0x080003fb
 8000338:	08000411 	.word	0x08000411
 800033c:	08000429 	.word	0x08000429
 8000340:	08000443 	.word	0x08000443
 8000344:	0800045b 	.word	0x0800045b
 8000348:	08000471 	.word	0x08000471
 800034c:	08000487 	.word	0x08000487
            case 0:
            	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET); // key 1 red off
 8000350:	2201      	movs	r2, #1
 8000352:	2120      	movs	r1, #32
 8000354:	4865      	ldr	r0, [pc, #404]	; (80004ec <an_apple_musicMap+0x260>)
 8000356:	f001 fcb6 	bl	8001cc6 <HAL_GPIO_WritePin>
        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // key 3 green on
 800035a:	2200      	movs	r2, #0
 800035c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000360:	4861      	ldr	r0, [pc, #388]	; (80004e8 <an_apple_musicMap+0x25c>)
 8000362:	f001 fcb0 	bl	8001cc6 <HAL_GPIO_WritePin>
                break;
 8000366:	e0a8      	b.n	80004ba <an_apple_musicMap+0x22e>
            case 1:
        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // key 3 green off
 8000368:	2201      	movs	r2, #1
 800036a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800036e:	485e      	ldr	r0, [pc, #376]	; (80004e8 <an_apple_musicMap+0x25c>)
 8000370:	f001 fca9 	bl	8001cc6 <HAL_GPIO_WritePin>
        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // key3 red on
 8000374:	2200      	movs	r2, #0
 8000376:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800037a:	485b      	ldr	r0, [pc, #364]	; (80004e8 <an_apple_musicMap+0x25c>)
 800037c:	f001 fca3 	bl	8001cc6 <HAL_GPIO_WritePin>
                break;
 8000380:	e09b      	b.n	80004ba <an_apple_musicMap+0x22e>
            case 2:
        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // key3 red off
 8000382:	2201      	movs	r2, #1
 8000384:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000388:	4857      	ldr	r0, [pc, #348]	; (80004e8 <an_apple_musicMap+0x25c>)
 800038a:	f001 fc9c 	bl	8001cc6 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET); //key 1 green on
 800038e:	2200      	movs	r2, #0
 8000390:	2140      	movs	r1, #64	; 0x40
 8000392:	4856      	ldr	r0, [pc, #344]	; (80004ec <an_apple_musicMap+0x260>)
 8000394:	f001 fc97 	bl	8001cc6 <HAL_GPIO_WritePin>
                break;
 8000398:	e08f      	b.n	80004ba <an_apple_musicMap+0x22e>
            case 3:
                HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET); // key 1 green off
 800039a:	2201      	movs	r2, #1
 800039c:	2140      	movs	r1, #64	; 0x40
 800039e:	4853      	ldr	r0, [pc, #332]	; (80004ec <an_apple_musicMap+0x260>)
 80003a0:	f001 fc91 	bl	8001cc6 <HAL_GPIO_WritePin>
        		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET); //key 1 red on
 80003a4:	2200      	movs	r2, #0
 80003a6:	2120      	movs	r1, #32
 80003a8:	4850      	ldr	r0, [pc, #320]	; (80004ec <an_apple_musicMap+0x260>)
 80003aa:	f001 fc8c 	bl	8001cc6 <HAL_GPIO_WritePin>
                break;
 80003ae:	e084      	b.n	80004ba <an_apple_musicMap+0x22e>
            case 4:
        		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET); //key 1 red off
 80003b0:	2201      	movs	r2, #1
 80003b2:	2120      	movs	r1, #32
 80003b4:	484d      	ldr	r0, [pc, #308]	; (80004ec <an_apple_musicMap+0x260>)
 80003b6:	f001 fc86 	bl	8001cc6 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); //key 4 green on
 80003ba:	2200      	movs	r2, #0
 80003bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003c0:	4849      	ldr	r0, [pc, #292]	; (80004e8 <an_apple_musicMap+0x25c>)
 80003c2:	f001 fc80 	bl	8001cc6 <HAL_GPIO_WritePin>
                break;
 80003c6:	e078      	b.n	80004ba <an_apple_musicMap+0x22e>
            case 5:
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // key 4 green off
 80003c8:	2201      	movs	r2, #1
 80003ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ce:	4846      	ldr	r0, [pc, #280]	; (80004e8 <an_apple_musicMap+0x25c>)
 80003d0:	f001 fc79 	bl	8001cc6 <HAL_GPIO_WritePin>
        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); //key 4 red on
 80003d4:	2200      	movs	r2, #0
 80003d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003da:	4843      	ldr	r0, [pc, #268]	; (80004e8 <an_apple_musicMap+0x25c>)
 80003dc:	f001 fc73 	bl	8001cc6 <HAL_GPIO_WritePin>
        		break;
 80003e0:	e06b      	b.n	80004ba <an_apple_musicMap+0x22e>
            case 6:
            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // key 4 red off
 80003e2:	2201      	movs	r2, #1
 80003e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e8:	483f      	ldr	r0, [pc, #252]	; (80004e8 <an_apple_musicMap+0x25c>)
 80003ea:	f001 fc6c 	bl	8001cc6 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // key 2 green on
 80003ee:	2200      	movs	r2, #0
 80003f0:	2140      	movs	r1, #64	; 0x40
 80003f2:	483d      	ldr	r0, [pc, #244]	; (80004e8 <an_apple_musicMap+0x25c>)
 80003f4:	f001 fc67 	bl	8001cc6 <HAL_GPIO_WritePin>
            	break;
 80003f8:	e05f      	b.n	80004ba <an_apple_musicMap+0x22e>
            case 7:
            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // key 2 green off
 80003fa:	2201      	movs	r2, #1
 80003fc:	2140      	movs	r1, #64	; 0x40
 80003fe:	483a      	ldr	r0, [pc, #232]	; (80004e8 <an_apple_musicMap+0x25c>)
 8000400:	f001 fc61 	bl	8001cc6 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // key 2 red on
 8000404:	2200      	movs	r2, #0
 8000406:	2180      	movs	r1, #128	; 0x80
 8000408:	4837      	ldr	r0, [pc, #220]	; (80004e8 <an_apple_musicMap+0x25c>)
 800040a:	f001 fc5c 	bl	8001cc6 <HAL_GPIO_WritePin>
            	break;
 800040e:	e054      	b.n	80004ba <an_apple_musicMap+0x22e>
            case 8:
        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // key 2 red off
 8000410:	2201      	movs	r2, #1
 8000412:	2180      	movs	r1, #128	; 0x80
 8000414:	4834      	ldr	r0, [pc, #208]	; (80004e8 <an_apple_musicMap+0x25c>)
 8000416:	f001 fc56 	bl	8001cc6 <HAL_GPIO_WritePin>
        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); //key 3 green on
 800041a:	2200      	movs	r2, #0
 800041c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000420:	4831      	ldr	r0, [pc, #196]	; (80004e8 <an_apple_musicMap+0x25c>)
 8000422:	f001 fc50 	bl	8001cc6 <HAL_GPIO_WritePin>
        		break;
 8000426:	e048      	b.n	80004ba <an_apple_musicMap+0x22e>
            case 9:
            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // key 3 green off
 8000428:	2201      	movs	r2, #1
 800042a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800042e:	482e      	ldr	r0, [pc, #184]	; (80004e8 <an_apple_musicMap+0x25c>)
 8000430:	f001 fc49 	bl	8001cc6 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // key 3 red on
 8000434:	2200      	movs	r2, #0
 8000436:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800043a:	482b      	ldr	r0, [pc, #172]	; (80004e8 <an_apple_musicMap+0x25c>)
 800043c:	f001 fc43 	bl	8001cc6 <HAL_GPIO_WritePin>
            	break;
 8000440:	e03b      	b.n	80004ba <an_apple_musicMap+0x22e>
            case 10:
            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // key 3 red off
 8000442:	2201      	movs	r2, #1
 8000444:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000448:	4827      	ldr	r0, [pc, #156]	; (80004e8 <an_apple_musicMap+0x25c>)
 800044a:	f001 fc3c 	bl	8001cc6 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // key 2 green on
 800044e:	2200      	movs	r2, #0
 8000450:	2140      	movs	r1, #64	; 0x40
 8000452:	4825      	ldr	r0, [pc, #148]	; (80004e8 <an_apple_musicMap+0x25c>)
 8000454:	f001 fc37 	bl	8001cc6 <HAL_GPIO_WritePin>
            	break;
 8000458:	e02f      	b.n	80004ba <an_apple_musicMap+0x22e>
            case 11:
            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); //key 2 green off
 800045a:	2201      	movs	r2, #1
 800045c:	2140      	movs	r1, #64	; 0x40
 800045e:	4822      	ldr	r0, [pc, #136]	; (80004e8 <an_apple_musicMap+0x25c>)
 8000460:	f001 fc31 	bl	8001cc6 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // key 2 red on
 8000464:	2200      	movs	r2, #0
 8000466:	2140      	movs	r1, #64	; 0x40
 8000468:	481f      	ldr	r0, [pc, #124]	; (80004e8 <an_apple_musicMap+0x25c>)
 800046a:	f001 fc2c 	bl	8001cc6 <HAL_GPIO_WritePin>
            	break;
 800046e:	e024      	b.n	80004ba <an_apple_musicMap+0x22e>
            case 12:
            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // key 2 red off
 8000470:	2201      	movs	r2, #1
 8000472:	2140      	movs	r1, #64	; 0x40
 8000474:	481c      	ldr	r0, [pc, #112]	; (80004e8 <an_apple_musicMap+0x25c>)
 8000476:	f001 fc26 	bl	8001cc6 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET); // key 1 green on
 800047a:	2200      	movs	r2, #0
 800047c:	2140      	movs	r1, #64	; 0x40
 800047e:	481b      	ldr	r0, [pc, #108]	; (80004ec <an_apple_musicMap+0x260>)
 8000480:	f001 fc21 	bl	8001cc6 <HAL_GPIO_WritePin>
            	break;
 8000484:	e019      	b.n	80004ba <an_apple_musicMap+0x22e>
            case 13:
            	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET); // key 1 green off
 8000486:	2201      	movs	r2, #1
 8000488:	2140      	movs	r1, #64	; 0x40
 800048a:	4818      	ldr	r0, [pc, #96]	; (80004ec <an_apple_musicMap+0x260>)
 800048c:	f001 fc1b 	bl	8001cc6 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET); // key 1 red on
 8000490:	2200      	movs	r2, #0
 8000492:	2120      	movs	r1, #32
 8000494:	4815      	ldr	r0, [pc, #84]	; (80004ec <an_apple_musicMap+0x260>)
 8000496:	f001 fc16 	bl	8001cc6 <HAL_GPIO_WritePin>
            	cycleFinished_apple += 1;
 800049a:	4b17      	ldr	r3, [pc, #92]	; (80004f8 <an_apple_musicMap+0x26c>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3301      	adds	r3, #1
 80004a0:	4a15      	ldr	r2, [pc, #84]	; (80004f8 <an_apple_musicMap+0x26c>)
 80004a2:	6013      	str	r3, [r2, #0]
            default:
                HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2140      	movs	r1, #64	; 0x40
 80004a8:	4810      	ldr	r0, [pc, #64]	; (80004ec <an_apple_musicMap+0x260>)
 80004aa:	f001 fc0c 	bl	8001cc6 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 80004ae:	2201      	movs	r2, #1
 80004b0:	2120      	movs	r1, #32
 80004b2:	480e      	ldr	r0, [pc, #56]	; (80004ec <an_apple_musicMap+0x260>)
 80004b4:	f001 fc07 	bl	8001cc6 <HAL_GPIO_WritePin>
                break;
 80004b8:	bf00      	nop
        }

        currentState_apple = (currentState_apple + 1) % 14;
 80004ba:	4b0d      	ldr	r3, [pc, #52]	; (80004f0 <an_apple_musicMap+0x264>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	1c5a      	adds	r2, r3, #1
 80004c0:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <an_apple_musicMap+0x270>)
 80004c2:	fb83 1302 	smull	r1, r3, r3, r2
 80004c6:	4413      	add	r3, r2
 80004c8:	10d9      	asrs	r1, r3, #3
 80004ca:	17d3      	asrs	r3, r2, #31
 80004cc:	1ac9      	subs	r1, r1, r3
 80004ce:	460b      	mov	r3, r1
 80004d0:	00db      	lsls	r3, r3, #3
 80004d2:	1a5b      	subs	r3, r3, r1
 80004d4:	005b      	lsls	r3, r3, #1
 80004d6:	1ad1      	subs	r1, r2, r3
 80004d8:	b2ca      	uxtb	r2, r1
 80004da:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <an_apple_musicMap+0x264>)
 80004dc:	701a      	strb	r2, [r3, #0]
    }
}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40010c00 	.word	0x40010c00
 80004ec:	40011800 	.word	0x40011800
 80004f0:	2000002c 	.word	0x2000002c
 80004f4:	20000028 	.word	0x20000028
 80004f8:	20000030 	.word	0x20000030
 80004fc:	92492493 	.word	0x92492493

08000500 <blank_space_LCD>:

uint32_t lastToggleTime_blank = 0;
uint8_t currentState_blank = 0;
int cycleFinished_blank = 0;

void blank_space_LCD(void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af02      	add	r7, sp, #8
		  LCD_Clear(0, 0, 240, 320, WHITE);
 8000506:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000510:	22f0      	movs	r2, #240	; 0xf0
 8000512:	2100      	movs	r1, #0
 8000514:	2000      	movs	r0, #0
 8000516:	f000 fb44 	bl	8000ba2 <LCD_Clear>
		  LCD_DrawString(60,50,"Blank Space");
 800051a:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <blank_space_LCD+0x54>)
 800051c:	2132      	movs	r1, #50	; 0x32
 800051e:	203c      	movs	r0, #60	; 0x3c
 8000520:	f000 fba8 	bl	8000c74 <LCD_DrawString>
		  LCD_DrawString(100,80,"--Taylor Swift ");
 8000524:	4a0c      	ldr	r2, [pc, #48]	; (8000558 <blank_space_LCD+0x58>)
 8000526:	2150      	movs	r1, #80	; 0x50
 8000528:	2064      	movs	r0, #100	; 0x64
 800052a:	f000 fba3 	bl	8000c74 <LCD_DrawString>
		  LCD_DrawString(20,110,"Difficulty: Easy");
 800052e:	4a0b      	ldr	r2, [pc, #44]	; (800055c <blank_space_LCD+0x5c>)
 8000530:	216e      	movs	r1, #110	; 0x6e
 8000532:	2014      	movs	r0, #20
 8000534:	f000 fb9e 	bl	8000c74 <LCD_DrawString>
		  LCD_DrawString(100,170,"Playing");
 8000538:	4a09      	ldr	r2, [pc, #36]	; (8000560 <blank_space_LCD+0x60>)
 800053a:	21aa      	movs	r1, #170	; 0xaa
 800053c:	2064      	movs	r0, #100	; 0x64
 800053e:	f000 fb99 	bl	8000c74 <LCD_DrawString>
		  LCD_DrawString(200,200," ");
 8000542:	4a08      	ldr	r2, [pc, #32]	; (8000564 <blank_space_LCD+0x64>)
 8000544:	21c8      	movs	r1, #200	; 0xc8
 8000546:	20c8      	movs	r0, #200	; 0xc8
 8000548:	f000 fb94 	bl	8000c74 <LCD_DrawString>

}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	08003368 	.word	0x08003368
 8000558:	08003374 	.word	0x08003374
 800055c:	08003384 	.word	0x08003384
 8000560:	08003398 	.word	0x08003398
 8000564:	080033a0 	.word	0x080033a0

08000568 <blank_space_musicMap>:

void blank_space_musicMap(void) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000574:	4878      	ldr	r0, [pc, #480]	; (8000758 <blank_space_musicMap+0x1f0>)
 8000576:	f001 fba6 	bl	8001cc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 800057a:	2201      	movs	r2, #1
 800057c:	2120      	movs	r1, #32
 800057e:	4877      	ldr	r0, [pc, #476]	; (800075c <blank_space_musicMap+0x1f4>)
 8000580:	f001 fba1 	bl	8001cc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	2180      	movs	r1, #128	; 0x80
 8000588:	4873      	ldr	r0, [pc, #460]	; (8000758 <blank_space_musicMap+0x1f0>)
 800058a:	f001 fb9c 	bl	8001cc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2140      	movs	r1, #64	; 0x40
 8000592:	4871      	ldr	r0, [pc, #452]	; (8000758 <blank_space_musicMap+0x1f0>)
 8000594:	f001 fb97 	bl	8001cc6 <HAL_GPIO_WritePin>

    uint32_t currentTime = HAL_GetTick();
 8000598:	f001 f8d8 	bl	800174c <HAL_GetTick>
 800059c:	6038      	str	r0, [r7, #0]
    uint32_t interval;

    switch (currentState_blank % 2) {
 800059e:	4b70      	ldr	r3, [pc, #448]	; (8000760 <blank_space_musicMap+0x1f8>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d002      	beq.n	80005b0 <blank_space_musicMap+0x48>
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d003      	beq.n	80005b6 <blank_space_musicMap+0x4e>
 80005ae:	e006      	b.n	80005be <blank_space_musicMap+0x56>
        case 0:
            interval = 250; // 250ms
 80005b0:	23fa      	movs	r3, #250	; 0xfa
 80005b2:	607b      	str	r3, [r7, #4]
            break;
 80005b4:	e007      	b.n	80005c6 <blank_space_musicMap+0x5e>
        case 1:
            interval = 300; // 300ms
 80005b6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80005ba:	607b      	str	r3, [r7, #4]
            break;
 80005bc:	e003      	b.n	80005c6 <blank_space_musicMap+0x5e>
        default:
            interval = 300;
 80005be:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80005c2:	607b      	str	r3, [r7, #4]
            break;
 80005c4:	bf00      	nop
    }

    // Change states based on the current time and interval
    if (currentTime - lastToggleTime_blank >= interval && cycleFinished_blank < 32) {
 80005c6:	4b67      	ldr	r3, [pc, #412]	; (8000764 <blank_space_musicMap+0x1fc>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	683a      	ldr	r2, [r7, #0]
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	f200 80bc 	bhi.w	800074e <blank_space_musicMap+0x1e6>
 80005d6:	4b64      	ldr	r3, [pc, #400]	; (8000768 <blank_space_musicMap+0x200>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b1f      	cmp	r3, #31
 80005dc:	f300 80b7 	bgt.w	800074e <blank_space_musicMap+0x1e6>
        lastToggleTime_blank = currentTime;
 80005e0:	4a60      	ldr	r2, [pc, #384]	; (8000764 <blank_space_musicMap+0x1fc>)
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	6013      	str	r3, [r2, #0]

        switch (currentState_blank) {
 80005e6:	4b5e      	ldr	r3, [pc, #376]	; (8000760 <blank_space_musicMap+0x1f8>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b09      	cmp	r3, #9
 80005ec:	f200 8093 	bhi.w	8000716 <blank_space_musicMap+0x1ae>
 80005f0:	a201      	add	r2, pc, #4	; (adr r2, 80005f8 <blank_space_musicMap+0x90>)
 80005f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f6:	bf00      	nop
 80005f8:	08000621 	.word	0x08000621
 80005fc:	08000639 	.word	0x08000639
 8000600:	0800064f 	.word	0x0800064f
 8000604:	08000665 	.word	0x08000665
 8000608:	0800067b 	.word	0x0800067b
 800060c:	08000693 	.word	0x08000693
 8000610:	080006ad 	.word	0x080006ad
 8000614:	080006c5 	.word	0x080006c5
 8000618:	080006db 	.word	0x080006db
 800061c:	080006f3 	.word	0x080006f3
            case 0:
            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // key 3 red off
 8000620:	2201      	movs	r2, #1
 8000622:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000626:	484c      	ldr	r0, [pc, #304]	; (8000758 <blank_space_musicMap+0x1f0>)
 8000628:	f001 fb4d 	bl	8001cc6 <HAL_GPIO_WritePin>
        		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET); // key 1 green on
 800062c:	2200      	movs	r2, #0
 800062e:	2140      	movs	r1, #64	; 0x40
 8000630:	484a      	ldr	r0, [pc, #296]	; (800075c <blank_space_musicMap+0x1f4>)
 8000632:	f001 fb48 	bl	8001cc6 <HAL_GPIO_WritePin>
                break;
 8000636:	e079      	b.n	800072c <blank_space_musicMap+0x1c4>
            case 1:
        		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET); // key 1 green off
 8000638:	2201      	movs	r2, #1
 800063a:	2140      	movs	r1, #64	; 0x40
 800063c:	4847      	ldr	r0, [pc, #284]	; (800075c <blank_space_musicMap+0x1f4>)
 800063e:	f001 fb42 	bl	8001cc6 <HAL_GPIO_WritePin>
        		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET); // key1 red on
 8000642:	2200      	movs	r2, #0
 8000644:	2120      	movs	r1, #32
 8000646:	4845      	ldr	r0, [pc, #276]	; (800075c <blank_space_musicMap+0x1f4>)
 8000648:	f001 fb3d 	bl	8001cc6 <HAL_GPIO_WritePin>
                break;
 800064c:	e06e      	b.n	800072c <blank_space_musicMap+0x1c4>
            case 2:
        		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET); // key1 red off
 800064e:	2201      	movs	r2, #1
 8000650:	2120      	movs	r1, #32
 8000652:	4842      	ldr	r0, [pc, #264]	; (800075c <blank_space_musicMap+0x1f4>)
 8000654:	f001 fb37 	bl	8001cc6 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); //key 2 green on
 8000658:	2200      	movs	r2, #0
 800065a:	2140      	movs	r1, #64	; 0x40
 800065c:	483e      	ldr	r0, [pc, #248]	; (8000758 <blank_space_musicMap+0x1f0>)
 800065e:	f001 fb32 	bl	8001cc6 <HAL_GPIO_WritePin>
                break;
 8000662:	e063      	b.n	800072c <blank_space_musicMap+0x1c4>
            case 3:
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // key 2 green off
 8000664:	2201      	movs	r2, #1
 8000666:	2140      	movs	r1, #64	; 0x40
 8000668:	483b      	ldr	r0, [pc, #236]	; (8000758 <blank_space_musicMap+0x1f0>)
 800066a:	f001 fb2c 	bl	8001cc6 <HAL_GPIO_WritePin>
        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); //key 2 red on
 800066e:	2200      	movs	r2, #0
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	4839      	ldr	r0, [pc, #228]	; (8000758 <blank_space_musicMap+0x1f0>)
 8000674:	f001 fb27 	bl	8001cc6 <HAL_GPIO_WritePin>
                break;
 8000678:	e058      	b.n	800072c <blank_space_musicMap+0x1c4>
            case 4:
        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); //key 2 red off
 800067a:	2201      	movs	r2, #1
 800067c:	2180      	movs	r1, #128	; 0x80
 800067e:	4836      	ldr	r0, [pc, #216]	; (8000758 <blank_space_musicMap+0x1f0>)
 8000680:	f001 fb21 	bl	8001cc6 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); //key 4 green on
 8000684:	2200      	movs	r2, #0
 8000686:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800068a:	4833      	ldr	r0, [pc, #204]	; (8000758 <blank_space_musicMap+0x1f0>)
 800068c:	f001 fb1b 	bl	8001cc6 <HAL_GPIO_WritePin>
                break;
 8000690:	e04c      	b.n	800072c <blank_space_musicMap+0x1c4>
            case 5:
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // key 4 green off
 8000692:	2201      	movs	r2, #1
 8000694:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000698:	482f      	ldr	r0, [pc, #188]	; (8000758 <blank_space_musicMap+0x1f0>)
 800069a:	f001 fb14 	bl	8001cc6 <HAL_GPIO_WritePin>
        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); //key 4 red on
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a4:	482c      	ldr	r0, [pc, #176]	; (8000758 <blank_space_musicMap+0x1f0>)
 80006a6:	f001 fb0e 	bl	8001cc6 <HAL_GPIO_WritePin>
        		break;
 80006aa:	e03f      	b.n	800072c <blank_space_musicMap+0x1c4>
            case 6:
            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // key 4 red off
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b2:	4829      	ldr	r0, [pc, #164]	; (8000758 <blank_space_musicMap+0x1f0>)
 80006b4:	f001 fb07 	bl	8001cc6 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET); // key 1 green on
 80006b8:	2200      	movs	r2, #0
 80006ba:	2140      	movs	r1, #64	; 0x40
 80006bc:	4827      	ldr	r0, [pc, #156]	; (800075c <blank_space_musicMap+0x1f4>)
 80006be:	f001 fb02 	bl	8001cc6 <HAL_GPIO_WritePin>
            	break;
 80006c2:	e033      	b.n	800072c <blank_space_musicMap+0x1c4>
            case 7:
            	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET); // key 1 green off
 80006c4:	2201      	movs	r2, #1
 80006c6:	2140      	movs	r1, #64	; 0x40
 80006c8:	4824      	ldr	r0, [pc, #144]	; (800075c <blank_space_musicMap+0x1f4>)
 80006ca:	f001 fafc 	bl	8001cc6 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET); // key 1 red on
 80006ce:	2200      	movs	r2, #0
 80006d0:	2120      	movs	r1, #32
 80006d2:	4822      	ldr	r0, [pc, #136]	; (800075c <blank_space_musicMap+0x1f4>)
 80006d4:	f001 faf7 	bl	8001cc6 <HAL_GPIO_WritePin>
            	break;
 80006d8:	e028      	b.n	800072c <blank_space_musicMap+0x1c4>
            case 8:
        		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET); // key 1 red off
 80006da:	2201      	movs	r2, #1
 80006dc:	2120      	movs	r1, #32
 80006de:	481f      	ldr	r0, [pc, #124]	; (800075c <blank_space_musicMap+0x1f4>)
 80006e0:	f001 faf1 	bl	8001cc6 <HAL_GPIO_WritePin>
        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); //key 3 green on
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ea:	481b      	ldr	r0, [pc, #108]	; (8000758 <blank_space_musicMap+0x1f0>)
 80006ec:	f001 faeb 	bl	8001cc6 <HAL_GPIO_WritePin>
        		break;
 80006f0:	e01c      	b.n	800072c <blank_space_musicMap+0x1c4>
            case 9:
            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // key 3 green off
 80006f2:	2201      	movs	r2, #1
 80006f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f8:	4817      	ldr	r0, [pc, #92]	; (8000758 <blank_space_musicMap+0x1f0>)
 80006fa:	f001 fae4 	bl	8001cc6 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // key 3 red on
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000704:	4814      	ldr	r0, [pc, #80]	; (8000758 <blank_space_musicMap+0x1f0>)
 8000706:	f001 fade 	bl	8001cc6 <HAL_GPIO_WritePin>
            	cycleFinished_blank += 1;
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <blank_space_musicMap+0x200>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	3301      	adds	r3, #1
 8000710:	4a15      	ldr	r2, [pc, #84]	; (8000768 <blank_space_musicMap+0x200>)
 8000712:	6013      	str	r3, [r2, #0]
            	break;
 8000714:	e00a      	b.n	800072c <blank_space_musicMap+0x1c4>

            default:
                HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	2140      	movs	r1, #64	; 0x40
 800071a:	4810      	ldr	r0, [pc, #64]	; (800075c <blank_space_musicMap+0x1f4>)
 800071c:	f001 fad3 	bl	8001cc6 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	2120      	movs	r1, #32
 8000724:	480d      	ldr	r0, [pc, #52]	; (800075c <blank_space_musicMap+0x1f4>)
 8000726:	f001 face 	bl	8001cc6 <HAL_GPIO_WritePin>
                break;
 800072a:	bf00      	nop
        }

        currentState_blank = (currentState_blank + 1) % 10;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <blank_space_musicMap+0x1f8>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	1c5a      	adds	r2, r3, #1
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <blank_space_musicMap+0x204>)
 8000734:	fb83 1302 	smull	r1, r3, r3, r2
 8000738:	1099      	asrs	r1, r3, #2
 800073a:	17d3      	asrs	r3, r2, #31
 800073c:	1ac9      	subs	r1, r1, r3
 800073e:	460b      	mov	r3, r1
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	440b      	add	r3, r1
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	1ad1      	subs	r1, r2, r3
 8000748:	b2ca      	uxtb	r2, r1
 800074a:	4b05      	ldr	r3, [pc, #20]	; (8000760 <blank_space_musicMap+0x1f8>)
 800074c:	701a      	strb	r2, [r3, #0]
    }
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40010c00 	.word	0x40010c00
 800075c:	40011800 	.word	0x40011800
 8000760:	20000038 	.word	0x20000038
 8000764:	20000034 	.word	0x20000034
 8000768:	2000003c 	.word	0x2000003c
 800076c:	66666667 	.word	0x66666667

08000770 <DY_Init>:
    cmd[length - 1] = checksum;

    HAL_UART_Transmit(DYuart, cmd, length, 1000);
}

void DY_Init(UART_HandleTypeDef *huart) {
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
    DYuart = huart;
 8000778:	4a03      	ldr	r2, [pc, #12]	; (8000788 <DY_Init+0x18>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6013      	str	r3, [r2, #0]
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	20000040 	.word	0x20000040

0800078c <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	e002      	b.n	800079c <Delay+0x10>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	3b01      	subs	r3, #1
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d1f9      	bne.n	8000796 <Delay+0xa>
 80007a2:	bf00      	nop
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr

080007ae <LCD_INIT>:

void LCD_INIT ( void )
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 80007b4:	2001      	movs	r0, #1
 80007b6:	f000 f829 	bl	800080c <LCD_BackLed_Control>
	LCD_Rst();
 80007ba:	f000 f80f 	bl	80007dc <LCD_Rst>
	LCD_REG_Config();
 80007be:	f000 f85f 	bl	8000880 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 80007c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80007cc:	22f0      	movs	r2, #240	; 0xf0
 80007ce:	2100      	movs	r1, #0
 80007d0:	2000      	movs	r0, #0
 80007d2:	f000 f9e6 	bl	8000ba2 <LCD_Clear>
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <LCD_Rst>:



void LCD_Rst ( void )
{			
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2102      	movs	r1, #2
 80007e4:	4807      	ldr	r0, [pc, #28]	; (8000804 <LCD_Rst+0x28>)
 80007e6:	f001 fa6e 	bl	8001cc6 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 80007ea:	4807      	ldr	r0, [pc, #28]	; (8000808 <LCD_Rst+0x2c>)
 80007ec:	f7ff ffce 	bl	800078c <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2102      	movs	r1, #2
 80007f4:	4803      	ldr	r0, [pc, #12]	; (8000804 <LCD_Rst+0x28>)
 80007f6:	f001 fa66 	bl	8001cc6 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 80007fa:	4803      	ldr	r0, [pc, #12]	; (8000808 <LCD_Rst+0x2c>)
 80007fc:	f7ff ffc6 	bl	800078c <Delay>
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40011800 	.word	0x40011800
 8000808:	0002bffc 	.word	0x0002bffc

0800080c <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d006      	beq.n	800082a <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000822:	4807      	ldr	r0, [pc, #28]	; (8000840 <LCD_BackLed_Control+0x34>)
 8000824:	f001 fa4f 	bl	8001cc6 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000828:	e005      	b.n	8000836 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000830:	4803      	ldr	r0, [pc, #12]	; (8000840 <LCD_BackLed_Control+0x34>)
 8000832:	f001 fa48 	bl	8001cc6 <HAL_GPIO_WritePin>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40011400 	.word	0x40011400

08000844 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800084e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000852:	88fb      	ldrh	r3, [r7, #6]
 8000854:	8013      	strh	r3, [r2, #0]
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800086a:	4a04      	ldr	r2, [pc, #16]	; (800087c <LCD_Write_Data+0x1c>)
 800086c:	88fb      	ldrh	r3, [r7, #6]
 800086e:	8013      	strh	r3, [r2, #0]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	60020000 	.word	0x60020000

08000880 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000884:	20cf      	movs	r0, #207	; 0xcf
 8000886:	f7ff ffdd 	bl	8000844 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 800088a:	2000      	movs	r0, #0
 800088c:	f7ff ffe8 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000890:	2081      	movs	r0, #129	; 0x81
 8000892:	f7ff ffe5 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000896:	2030      	movs	r0, #48	; 0x30
 8000898:	f7ff ffe2 	bl	8000860 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 800089c:	20ed      	movs	r0, #237	; 0xed
 800089e:	f7ff ffd1 	bl	8000844 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80008a2:	2064      	movs	r0, #100	; 0x64
 80008a4:	f7ff ffdc 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80008a8:	2003      	movs	r0, #3
 80008aa:	f7ff ffd9 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80008ae:	2012      	movs	r0, #18
 80008b0:	f7ff ffd6 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80008b4:	2081      	movs	r0, #129	; 0x81
 80008b6:	f7ff ffd3 	bl	8000860 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 80008ba:	20e8      	movs	r0, #232	; 0xe8
 80008bc:	f7ff ffc2 	bl	8000844 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 80008c0:	2085      	movs	r0, #133	; 0x85
 80008c2:	f7ff ffcd 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80008c6:	2010      	movs	r0, #16
 80008c8:	f7ff ffca 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 80008cc:	2078      	movs	r0, #120	; 0x78
 80008ce:	f7ff ffc7 	bl	8000860 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 80008d2:	20cb      	movs	r0, #203	; 0xcb
 80008d4:	f7ff ffb6 	bl	8000844 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 80008d8:	2039      	movs	r0, #57	; 0x39
 80008da:	f7ff ffc1 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 80008de:	202c      	movs	r0, #44	; 0x2c
 80008e0:	f7ff ffbe 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ffbb 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 80008ea:	2034      	movs	r0, #52	; 0x34
 80008ec:	f7ff ffb8 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 80008f0:	2002      	movs	r0, #2
 80008f2:	f7ff ffb5 	bl	8000860 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 80008f6:	20f7      	movs	r0, #247	; 0xf7
 80008f8:	f7ff ffa4 	bl	8000844 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 80008fc:	2020      	movs	r0, #32
 80008fe:	f7ff ffaf 	bl	8000860 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8000902:	20ea      	movs	r0, #234	; 0xea
 8000904:	f7ff ff9e 	bl	8000844 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff ffa9 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800090e:	2000      	movs	r0, #0
 8000910:	f7ff ffa6 	bl	8000860 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000914:	20b1      	movs	r0, #177	; 0xb1
 8000916:	f7ff ff95 	bl	8000844 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800091a:	2000      	movs	r0, #0
 800091c:	f7ff ffa0 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000920:	201b      	movs	r0, #27
 8000922:	f7ff ff9d 	bl	8000860 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000926:	20b6      	movs	r0, #182	; 0xb6
 8000928:	f7ff ff8c 	bl	8000844 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 800092c:	200a      	movs	r0, #10
 800092e:	f7ff ff97 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8000932:	20a2      	movs	r0, #162	; 0xa2
 8000934:	f7ff ff94 	bl	8000860 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000938:	20c0      	movs	r0, #192	; 0xc0
 800093a:	f7ff ff83 	bl	8000844 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 800093e:	2035      	movs	r0, #53	; 0x35
 8000940:	f7ff ff8e 	bl	8000860 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000944:	20c1      	movs	r0, #193	; 0xc1
 8000946:	f7ff ff7d 	bl	8000844 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 800094a:	2011      	movs	r0, #17
 800094c:	f7ff ff88 	bl	8000860 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000950:	20c5      	movs	r0, #197	; 0xc5
 8000952:	f7ff ff77 	bl	8000844 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000956:	2045      	movs	r0, #69	; 0x45
 8000958:	f7ff ff82 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 800095c:	2045      	movs	r0, #69	; 0x45
 800095e:	f7ff ff7f 	bl	8000860 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8000962:	20c7      	movs	r0, #199	; 0xc7
 8000964:	f7ff ff6e 	bl	8000844 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000968:	20a2      	movs	r0, #162	; 0xa2
 800096a:	f7ff ff79 	bl	8000860 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 800096e:	20f2      	movs	r0, #242	; 0xf2
 8000970:	f7ff ff68 	bl	8000844 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000974:	2000      	movs	r0, #0
 8000976:	f7ff ff73 	bl	8000860 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 800097a:	2026      	movs	r0, #38	; 0x26
 800097c:	f7ff ff62 	bl	8000844 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000980:	2001      	movs	r0, #1
 8000982:	f7ff ff6d 	bl	8000860 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000986:	20e0      	movs	r0, #224	; 0xe0
 8000988:	f7ff ff5c 	bl	8000844 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 800098c:	200f      	movs	r0, #15
 800098e:	f7ff ff67 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8000992:	2026      	movs	r0, #38	; 0x26
 8000994:	f7ff ff64 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000998:	2024      	movs	r0, #36	; 0x24
 800099a:	f7ff ff61 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 800099e:	200b      	movs	r0, #11
 80009a0:	f7ff ff5e 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80009a4:	200e      	movs	r0, #14
 80009a6:	f7ff ff5b 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80009aa:	2009      	movs	r0, #9
 80009ac:	f7ff ff58 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80009b0:	2054      	movs	r0, #84	; 0x54
 80009b2:	f7ff ff55 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80009b6:	20a8      	movs	r0, #168	; 0xa8
 80009b8:	f7ff ff52 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80009bc:	2046      	movs	r0, #70	; 0x46
 80009be:	f7ff ff4f 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 80009c2:	200c      	movs	r0, #12
 80009c4:	f7ff ff4c 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 80009c8:	2017      	movs	r0, #23
 80009ca:	f7ff ff49 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80009ce:	2009      	movs	r0, #9
 80009d0:	f7ff ff46 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80009d4:	200f      	movs	r0, #15
 80009d6:	f7ff ff43 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80009da:	2007      	movs	r0, #7
 80009dc:	f7ff ff40 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80009e0:	2000      	movs	r0, #0
 80009e2:	f7ff ff3d 	bl	8000860 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 80009e6:	20e1      	movs	r0, #225	; 0xe1
 80009e8:	f7ff ff2c 	bl	8000844 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80009ec:	2000      	movs	r0, #0
 80009ee:	f7ff ff37 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 80009f2:	2019      	movs	r0, #25
 80009f4:	f7ff ff34 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80009f8:	201b      	movs	r0, #27
 80009fa:	f7ff ff31 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 80009fe:	2004      	movs	r0, #4
 8000a00:	f7ff ff2e 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000a04:	2010      	movs	r0, #16
 8000a06:	f7ff ff2b 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000a0a:	2007      	movs	r0, #7
 8000a0c:	f7ff ff28 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000a10:	202a      	movs	r0, #42	; 0x2a
 8000a12:	f7ff ff25 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8000a16:	2047      	movs	r0, #71	; 0x47
 8000a18:	f7ff ff22 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000a1c:	2039      	movs	r0, #57	; 0x39
 8000a1e:	f7ff ff1f 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000a22:	2003      	movs	r0, #3
 8000a24:	f7ff ff1c 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000a28:	2006      	movs	r0, #6
 8000a2a:	f7ff ff19 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000a2e:	2006      	movs	r0, #6
 8000a30:	f7ff ff16 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000a34:	2030      	movs	r0, #48	; 0x30
 8000a36:	f7ff ff13 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000a3a:	2038      	movs	r0, #56	; 0x38
 8000a3c:	f7ff ff10 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000a40:	200f      	movs	r0, #15
 8000a42:	f7ff ff0d 	bl	8000860 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000a46:	2036      	movs	r0, #54	; 0x36
 8000a48:	f7ff fefc 	bl	8000844 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8000a4c:	20c8      	movs	r0, #200	; 0xc8
 8000a4e:	f7ff ff07 	bl	8000860 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000a52:	202a      	movs	r0, #42	; 0x2a
 8000a54:	f7ff fef6 	bl	8000844 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff ff01 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f7ff fefe 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000a64:	2000      	movs	r0, #0
 8000a66:	f7ff fefb 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000a6a:	20ef      	movs	r0, #239	; 0xef
 8000a6c:	f7ff fef8 	bl	8000860 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000a70:	202b      	movs	r0, #43	; 0x2b
 8000a72:	f7ff fee7 	bl	8000844 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000a76:	2000      	movs	r0, #0
 8000a78:	f7ff fef2 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f7ff feef 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000a82:	2001      	movs	r0, #1
 8000a84:	f7ff feec 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000a88:	203f      	movs	r0, #63	; 0x3f
 8000a8a:	f7ff fee9 	bl	8000860 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000a8e:	203a      	movs	r0, #58	; 0x3a
 8000a90:	f7ff fed8 	bl	8000844 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000a94:	2055      	movs	r0, #85	; 0x55
 8000a96:	f7ff fee3 	bl	8000860 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000a9a:	2011      	movs	r0, #17
 8000a9c:	f7ff fed2 	bl	8000844 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000aa0:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <LCD_REG_Config+0x230>)
 8000aa2:	f7ff fe73 	bl	800078c <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000aa6:	2029      	movs	r0, #41	; 0x29
 8000aa8:	f7ff fecc 	bl	8000844 <LCD_Write_Cmd>
	
	
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	0002bffc 	.word	0x0002bffc

08000ab4 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4604      	mov	r4, r0
 8000abc:	4608      	mov	r0, r1
 8000abe:	4611      	mov	r1, r2
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4623      	mov	r3, r4
 8000ac4:	80fb      	strh	r3, [r7, #6]
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	80bb      	strh	r3, [r7, #4]
 8000aca:	460b      	mov	r3, r1
 8000acc:	807b      	strh	r3, [r7, #2]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000ad2:	202a      	movs	r0, #42	; 0x2a
 8000ad4:	f7ff feb6 	bl	8000844 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000ad8:	88fb      	ldrh	r3, [r7, #6]
 8000ada:	0a1b      	lsrs	r3, r3, #8
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff febe 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000ae4:	88fb      	ldrh	r3, [r7, #6]
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff feb8 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000af0:	88fa      	ldrh	r2, [r7, #6]
 8000af2:	887b      	ldrh	r3, [r7, #2]
 8000af4:	4413      	add	r3, r2
 8000af6:	3b01      	subs	r3, #1
 8000af8:	121b      	asrs	r3, r3, #8
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff feaf 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000b02:	88fa      	ldrh	r2, [r7, #6]
 8000b04:	887b      	ldrh	r3, [r7, #2]
 8000b06:	4413      	add	r3, r2
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fea4 	bl	8000860 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000b18:	202b      	movs	r0, #43	; 0x2b
 8000b1a:	f7ff fe93 	bl	8000844 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000b1e:	88bb      	ldrh	r3, [r7, #4]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fe9b 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000b2a:	88bb      	ldrh	r3, [r7, #4]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fe95 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000b36:	88ba      	ldrh	r2, [r7, #4]
 8000b38:	883b      	ldrh	r3, [r7, #0]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	121b      	asrs	r3, r3, #8
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fe8c 	bl	8000860 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000b48:	88ba      	ldrh	r2, [r7, #4]
 8000b4a:	883b      	ldrh	r3, [r7, #0]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	3b01      	subs	r3, #1
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fe81 	bl	8000860 <LCD_Write_Data>
	
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd90      	pop	{r4, r7, pc}

08000b66 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b084      	sub	sp, #16
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000b76:	202c      	movs	r0, #44	; 0x2c
 8000b78:	f7ff fe64 	bl	8000844 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	e006      	b.n	8000b90 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fe6b 	bl	8000860 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fa      	ldr	r2, [r7, #12]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d3f4      	bcc.n	8000b82 <LCD_FillColor+0x1c>
		
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000ba2:	b590      	push	{r4, r7, lr}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4604      	mov	r4, r0
 8000baa:	4608      	mov	r0, r1
 8000bac:	4611      	mov	r1, r2
 8000bae:	461a      	mov	r2, r3
 8000bb0:	4623      	mov	r3, r4
 8000bb2:	80fb      	strh	r3, [r7, #6]
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	80bb      	strh	r3, [r7, #4]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	807b      	strh	r3, [r7, #2]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000bc0:	883b      	ldrh	r3, [r7, #0]
 8000bc2:	887a      	ldrh	r2, [r7, #2]
 8000bc4:	88b9      	ldrh	r1, [r7, #4]
 8000bc6:	88f8      	ldrh	r0, [r7, #6]
 8000bc8:	f7ff ff74 	bl	8000ab4 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000bcc:	887b      	ldrh	r3, [r7, #2]
 8000bce:	883a      	ldrh	r2, [r7, #0]
 8000bd0:	fb02 f303 	mul.w	r3, r2, r3
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	8b3b      	ldrh	r3, [r7, #24]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4610      	mov	r0, r2
 8000bdc:	f7ff ffc3 	bl	8000b66 <LCD_FillColor>
	
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd90      	pop	{r4, r7, pc}

08000be8 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	80fb      	strh	r3, [r7, #6]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	80bb      	strh	r3, [r7, #4]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000bfa:	78fb      	ldrb	r3, [r7, #3]
 8000bfc:	3b20      	subs	r3, #32
 8000bfe:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000c00:	88b9      	ldrh	r1, [r7, #4]
 8000c02:	88f8      	ldrh	r0, [r7, #6]
 8000c04:	2310      	movs	r3, #16
 8000c06:	2208      	movs	r2, #8
 8000c08:	f7ff ff54 	bl	8000ab4 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000c0c:	202c      	movs	r0, #44	; 0x2c
 8000c0e:	f7ff fe19 	bl	8000844 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000c12:	2300      	movs	r3, #0
 8000c14:	73bb      	strb	r3, [r7, #14]
 8000c16:	e023      	b.n	8000c60 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8000c18:	7b3a      	ldrb	r2, [r7, #12]
 8000c1a:	7bbb      	ldrb	r3, [r7, #14]
 8000c1c:	4914      	ldr	r1, [pc, #80]	; (8000c70 <LCD_DrawChar+0x88>)
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	440a      	add	r2, r1
 8000c22:	4413      	add	r3, r2
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000c28:	2300      	movs	r3, #0
 8000c2a:	737b      	strb	r3, [r7, #13]
 8000c2c:	e012      	b.n	8000c54 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x0000 );
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f7ff fe11 	bl	8000860 <LCD_Write_Data>
 8000c3e:	e003      	b.n	8000c48 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8000c40:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c44:	f7ff fe0c 	bl	8000860 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	085b      	lsrs	r3, r3, #1
 8000c4c:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000c4e:	7b7b      	ldrb	r3, [r7, #13]
 8000c50:	3301      	adds	r3, #1
 8000c52:	737b      	strb	r3, [r7, #13]
 8000c54:	7b7b      	ldrb	r3, [r7, #13]
 8000c56:	2b07      	cmp	r3, #7
 8000c58:	d9e9      	bls.n	8000c2e <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000c5a:	7bbb      	ldrb	r3, [r7, #14]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	73bb      	strb	r3, [r7, #14]
 8000c60:	7bbb      	ldrb	r3, [r7, #14]
 8000c62:	2b0f      	cmp	r3, #15
 8000c64:	d9d8      	bls.n	8000c18 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8000c66:	bf00      	nop
 8000c68:	bf00      	nop
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	080034bc 	.word	0x080034bc

08000c74 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	603a      	str	r2, [r7, #0]
 8000c7e:	80fb      	strh	r3, [r7, #6]
 8000c80:	460b      	mov	r3, r1
 8000c82:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8000c84:	e01c      	b.n	8000cc0 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	2be8      	cmp	r3, #232	; 0xe8
 8000c8a:	d904      	bls.n	8000c96 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8000c90:	88bb      	ldrh	r3, [r7, #4]
 8000c92:	3310      	adds	r3, #16
 8000c94:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8000c96:	88bb      	ldrh	r3, [r7, #4]
 8000c98:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000c9c:	d903      	bls.n	8000ca6 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	781a      	ldrb	r2, [r3, #0]
 8000caa:	88b9      	ldrh	r1, [r7, #4]
 8000cac:	88fb      	ldrh	r3, [r7, #6]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff9a 	bl	8000be8 <LCD_DrawChar>
		
		pStr ++;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8000cba:	88fb      	ldrh	r3, [r7, #6]
 8000cbc:	3308      	adds	r3, #8
 8000cbe:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d1de      	bne.n	8000c86 <LCD_DrawString+0x12>
		
	}
	
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b08f      	sub	sp, #60	; 0x3c
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cda:	f000 fcdf 	bl	800169c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cde:	f000 f8ef 	bl	8000ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce2:	f000 f9e3 	bl	80010ac <MX_GPIO_Init>
  MX_FSMC_Init();
 8000ce6:	f000 fa9f 	bl	8001228 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8000cea:	f000 f9b5 	bl	8001058 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000cee:	f000 f92d 	bl	8000f4c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 8000cf2:	f7ff fd5c 	bl	80007ae <LCD_INIT>
  HAL_UART_Init(&huart1);
 8000cf6:	4869      	ldr	r0, [pc, #420]	; (8000e9c <main+0x1c8>)
 8000cf8:	f002 f855 	bl	8002da6 <HAL_UART_Init>
  DY_Init(&huart1);
 8000cfc:	4867      	ldr	r0, [pc, #412]	; (8000e9c <main+0x1c8>)
 8000cfe:	f7ff fd37 	bl	8000770 <DY_Init>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  int page = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	637b      	str	r3, [r7, #52]	; 0x34
  int menuTrue = 1;
 8000d06:	2301      	movs	r3, #1
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // initialize to the menu
	  if (menuTrue == 1) {
 8000d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d117      	bne.n	8000d40 <main+0x6c>
		  printMenu(page);
 8000d10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000d12:	f000 faf3 	bl	80012fc <printMenu>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2120      	movs	r1, #32
 8000d1a:	4861      	ldr	r0, [pc, #388]	; (8000ea0 <main+0x1cc>)
 8000d1c:	f000 ffd3 	bl	8001cc6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2140      	movs	r1, #64	; 0x40
 8000d24:	485f      	ldr	r0, [pc, #380]	; (8000ea4 <main+0x1d0>)
 8000d26:	f000 ffce 	bl	8001cc6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2180      	movs	r1, #128	; 0x80
 8000d2e:	485d      	ldr	r0, [pc, #372]	; (8000ea4 <main+0x1d0>)
 8000d30:	f000 ffc9 	bl	8001cc6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d3a:	485a      	ldr	r0, [pc, #360]	; (8000ea4 <main+0x1d0>)
 8000d3c:	f000 ffc3 	bl	8001cc6 <HAL_GPIO_WritePin>
		  //menuLED();
	  }

	  // changing to another page by KE2
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == GPIO_PIN_SET) {
 8000d40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d44:	4858      	ldr	r0, [pc, #352]	; (8000ea8 <main+0x1d4>)
 8000d46:	f000 ffa7 	bl	8001c98 <HAL_GPIO_ReadPin>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d118      	bne.n	8000d82 <main+0xae>
		  HAL_Delay(200);
 8000d50:	20c8      	movs	r0, #200	; 0xc8
 8000d52:	f000 fd05 	bl	8001760 <HAL_Delay>
		  page += 1; // select another songs
 8000d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d58:	3301      	adds	r3, #1
 8000d5a:	637b      	str	r3, [r7, #52]	; 0x34
		  if( page > 3) {
 8000d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	dd0f      	ble.n	8000d82 <main+0xae>
			  page = page % 4;
 8000d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d64:	425a      	negs	r2, r3
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	f002 0203 	and.w	r2, r2, #3
 8000d6e:	bf58      	it	pl
 8000d70:	4253      	negpl	r3, r2
 8000d72:	637b      	str	r3, [r7, #52]	; 0x34
			  page = (page == 0) ? 1 : page;
 8000d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <main+0xaa>
 8000d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d7c:	e000      	b.n	8000d80 <main+0xac>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	637b      	str	r3, [r7, #52]	; 0x34
		  // page = 1 blank space
		  // page = 2 an apple
		  // page = 3 badroom star
	  }
	  //change to last page by key1
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) != GPIO_PIN_SET) {
 8000d82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d86:	4848      	ldr	r0, [pc, #288]	; (8000ea8 <main+0x1d4>)
 8000d88:	f000 ff86 	bl	8001c98 <HAL_GPIO_ReadPin>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d00a      	beq.n	8000da8 <main+0xd4>
	  		  HAL_Delay(200);
 8000d92:	20c8      	movs	r0, #200	; 0xc8
 8000d94:	f000 fce4 	bl	8001760 <HAL_Delay>
	  		  page -= 1; // select another songs
 8000d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34
	  		  if( page <= 0) {
 8000d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	dc01      	bgt.n	8000da8 <main+0xd4>
	  			  page = 3;
 8000da4:	2303      	movs	r3, #3
 8000da6:	637b      	str	r3, [r7, #52]	; 0x34
	  		  }
	  }


	  // select the song by KEY1 in STM32
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8000da8:	2101      	movs	r1, #1
 8000daa:	4840      	ldr	r0, [pc, #256]	; (8000eac <main+0x1d8>)
 8000dac:	f000 ff74 	bl	8001c98 <HAL_GPIO_ReadPin>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d16c      	bne.n	8000e90 <main+0x1bc>
		  menuTrue = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	633b      	str	r3, [r7, #48]	; 0x30
		  uint8_t cmdPlay1[] = {0xAA, 0x08, 0x0B, 0x02, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x2A, 0x4D, 0x50, 0x33, 0xD9};
 8000dba:	4b3d      	ldr	r3, [pc, #244]	; (8000eb0 <main+0x1dc>)
 8000dbc:	f107 0420 	add.w	r4, r7, #32
 8000dc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dc2:	c407      	stmia	r4!, {r0, r1, r2}
 8000dc4:	8023      	strh	r3, [r4, #0]
 8000dc6:	3402      	adds	r4, #2
 8000dc8:	0c1b      	lsrs	r3, r3, #16
 8000dca:	7023      	strb	r3, [r4, #0]
		  uint8_t cmdPlay2[] = {0xAA, 0x08, 0x0B, 0x02, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x32, 0x2A, 0x4D, 0x50, 0x33, 0xDA};
 8000dcc:	4b39      	ldr	r3, [pc, #228]	; (8000eb4 <main+0x1e0>)
 8000dce:	f107 0410 	add.w	r4, r7, #16
 8000dd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dd4:	c407      	stmia	r4!, {r0, r1, r2}
 8000dd6:	8023      	strh	r3, [r4, #0]
 8000dd8:	3402      	adds	r4, #2
 8000dda:	0c1b      	lsrs	r3, r3, #16
 8000ddc:	7023      	strb	r3, [r4, #0]
		  uint8_t cmdPlay3[] = {0xAA, 0x08, 0x0B, 0x02, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x33, 0x2A, 0x4D, 0x50, 0x33, 0xDB};
 8000dde:	4b36      	ldr	r3, [pc, #216]	; (8000eb8 <main+0x1e4>)
 8000de0:	463c      	mov	r4, r7
 8000de2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000de4:	c407      	stmia	r4!, {r0, r1, r2}
 8000de6:	8023      	strh	r3, [r4, #0]
 8000de8:	3402      	adds	r4, #2
 8000dea:	0c1b      	lsrs	r3, r3, #16
 8000dec:	7023      	strb	r3, [r4, #0]

		  HAL_Delay(50);
 8000dee:	2032      	movs	r0, #50	; 0x32
 8000df0:	f000 fcb6 	bl	8001760 <HAL_Delay>
		  switch (page) {
 8000df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	d84a      	bhi.n	8000e90 <main+0x1bc>
 8000dfa:	a201      	add	r2, pc, #4	; (adr r2, 8000e00 <main+0x12c>)
 8000dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e00:	08000e11 	.word	0x08000e11
 8000e04:	08000e33 	.word	0x08000e33
 8000e08:	08000e55 	.word	0x08000e55
 8000e0c:	08000e77 	.word	0x08000e77
		  	  case (0) :
		  	  	  	blank_space_LCD();
 8000e10:	f7ff fb76 	bl	8000500 <blank_space_LCD>
		  	  	  	HAL_Delay(500);
 8000e14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e18:	f000 fca2 	bl	8001760 <HAL_Delay>
		  	  	  	HAL_UART_Transmit(&huart1, cmdPlay1, sizeof(cmdPlay1), 1000);
 8000e1c:	f107 0120 	add.w	r1, r7, #32
 8000e20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e24:	220f      	movs	r2, #15
 8000e26:	481d      	ldr	r0, [pc, #116]	; (8000e9c <main+0x1c8>)
 8000e28:	f002 f80a 	bl	8002e40 <HAL_UART_Transmit>
		  		    blank_space_musicMap();
 8000e2c:	f7ff fb9c 	bl	8000568 <blank_space_musicMap>
		  	  	  	break;
 8000e30:	e02e      	b.n	8000e90 <main+0x1bc>
		  	  case (1) :
		  	  	  	blank_space_LCD();
 8000e32:	f7ff fb65 	bl	8000500 <blank_space_LCD>
		  	  	  	HAL_Delay(500);
 8000e36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e3a:	f000 fc91 	bl	8001760 <HAL_Delay>
		  	  	  	HAL_UART_Transmit(&huart1, cmdPlay1, sizeof(cmdPlay1), 1000);
 8000e3e:	f107 0120 	add.w	r1, r7, #32
 8000e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e46:	220f      	movs	r2, #15
 8000e48:	4814      	ldr	r0, [pc, #80]	; (8000e9c <main+0x1c8>)
 8000e4a:	f001 fff9 	bl	8002e40 <HAL_UART_Transmit>
		  		    blank_space_musicMap();
 8000e4e:	f7ff fb8b 	bl	8000568 <blank_space_musicMap>
		  	  	  	break;
 8000e52:	e01d      	b.n	8000e90 <main+0x1bc>
		  	  case (2) :
					an_apple_LCD();
 8000e54:	f7ff f9e6 	bl	8000224 <an_apple_LCD>
		  	  	  	HAL_Delay(500);
 8000e58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e5c:	f000 fc80 	bl	8001760 <HAL_Delay>
		  	  	  	HAL_UART_Transmit(&huart1, cmdPlay2, sizeof(cmdPlay2), 1000);
 8000e60:	f107 0110 	add.w	r1, r7, #16
 8000e64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e68:	220f      	movs	r2, #15
 8000e6a:	480c      	ldr	r0, [pc, #48]	; (8000e9c <main+0x1c8>)
 8000e6c:	f001 ffe8 	bl	8002e40 <HAL_UART_Transmit>
		  	  	  	an_apple_musicMap();
 8000e70:	f7ff fa0c 	bl	800028c <an_apple_musicMap>
		  	  	  	break;
 8000e74:	e00c      	b.n	8000e90 <main+0x1bc>
		  	  case (3) :
		  			// haven't write music map
		  	  	  	HAL_Delay(500);
 8000e76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e7a:	f000 fc71 	bl	8001760 <HAL_Delay>
		  	  	  	HAL_UART_Transmit(&huart1, cmdPlay2, sizeof(cmdPlay3), 1000);
 8000e7e:	f107 0110 	add.w	r1, r7, #16
 8000e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e86:	220f      	movs	r2, #15
 8000e88:	4804      	ldr	r0, [pc, #16]	; (8000e9c <main+0x1c8>)
 8000e8a:	f001 ffd9 	bl	8002e40 <HAL_UART_Transmit>
		  	  	  	break;
 8000e8e:	bf00      	nop

		  }
	  }

	  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) != GPIO_PIN_SET) {
 8000e90:	2104      	movs	r1, #4
 8000e92:	480a      	ldr	r0, [pc, #40]	; (8000ebc <main+0x1e8>)
 8000e94:	f000 ff00 	bl	8001c98 <HAL_GPIO_ReadPin>
	  if (menuTrue == 1) {
 8000e98:	e737      	b.n	8000d0a <main+0x36>
 8000e9a:	bf00      	nop
 8000e9c:	2000008c 	.word	0x2000008c
 8000ea0:	40011800 	.word	0x40011800
 8000ea4:	40010c00 	.word	0x40010c00
 8000ea8:	40011000 	.word	0x40011000
 8000eac:	40010800 	.word	0x40010800
 8000eb0:	080033a4 	.word	0x080033a4
 8000eb4:	080033b4 	.word	0x080033b4
 8000eb8:	080033c4 	.word	0x080033c4
 8000ebc:	40011400 	.word	0x40011400

08000ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b090      	sub	sp, #64	; 0x40
 8000ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec6:	f107 0318 	add.w	r3, r7, #24
 8000eca:	2228      	movs	r2, #40	; 0x28
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f002 fa1a 	bl	8003308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ee6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ef8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000efc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000efe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f04:	f107 0318 	add.w	r3, r7, #24
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 fef5 	bl	8001cf8 <HAL_RCC_OscConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f14:	f000 f9ec 	bl	80012f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f18:	230f      	movs	r3, #15
 8000f1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	2102      	movs	r1, #2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 f962 	bl	80021fc <HAL_RCC_ClockConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f3e:	f000 f9d7 	bl	80012f0 <Error_Handler>
  }
}
 8000f42:	bf00      	nop
 8000f44:	3740      	adds	r7, #64	; 0x40
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b092      	sub	sp, #72	; 0x48
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f52:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
 8000f6c:	615a      	str	r2, [r3, #20]
 8000f6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	2220      	movs	r2, #32
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f002 f9c6 	bl	8003308 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f7c:	4b34      	ldr	r3, [pc, #208]	; (8001050 <MX_TIM1_Init+0x104>)
 8000f7e:	4a35      	ldr	r2, [pc, #212]	; (8001054 <MX_TIM1_Init+0x108>)
 8000f80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = T1_PRE;
 8000f82:	4b33      	ldr	r3, [pc, #204]	; (8001050 <MX_TIM1_Init+0x104>)
 8000f84:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000f88:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8a:	4b31      	ldr	r3, [pc, #196]	; (8001050 <MX_TIM1_Init+0x104>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = T1_CNT;
 8000f90:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <MX_TIM1_Init+0x104>)
 8000f92:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f98:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <MX_TIM1_Init+0x104>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f9e:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <MX_TIM1_Init+0x104>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa4:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <MX_TIM1_Init+0x104>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000faa:	4829      	ldr	r0, [pc, #164]	; (8001050 <MX_TIM1_Init+0x104>)
 8000fac:	f001 fb0b 	bl	80025c6 <HAL_TIM_PWM_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000fb6:	f000 f99b 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fc2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4821      	ldr	r0, [pc, #132]	; (8001050 <MX_TIM1_Init+0x104>)
 8000fca:	f001 fe2f 	bl	8002c2c <HAL_TIMEx_MasterConfigSynchronization>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000fd4:	f000 f98c 	bl	80012f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd8:	2360      	movs	r3, #96	; 0x60
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = PWM_1;
 8000fdc:	f241 3387 	movw	r3, #4999	; 0x1387
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4814      	ldr	r0, [pc, #80]	; (8001050 <MX_TIM1_Init+0x104>)
 8001000:	f001 fb30 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800100a:	f000 f971 	bl	80012f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001022:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001026:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	4619      	mov	r1, r3
 8001030:	4807      	ldr	r0, [pc, #28]	; (8001050 <MX_TIM1_Init+0x104>)
 8001032:	f001 fe67 	bl	8002d04 <HAL_TIMEx_ConfigBreakDeadTime>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 800103c:	f000 f958 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001040:	4803      	ldr	r0, [pc, #12]	; (8001050 <MX_TIM1_Init+0x104>)
 8001042:	f000 fa09 	bl	8001458 <HAL_TIM_MspPostInit>

}
 8001046:	bf00      	nop
 8001048:	3748      	adds	r7, #72	; 0x48
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000044 	.word	0x20000044
 8001054:	40012c00 	.word	0x40012c00

08001058 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_USART1_UART_Init+0x4c>)
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <MX_USART1_UART_Init+0x50>)
 8001060:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001064:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001068:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_USART1_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_USART1_UART_Init+0x4c>)
 800107e:	220c      	movs	r2, #12
 8001080:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_USART1_UART_Init+0x4c>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001090:	f001 fe89 	bl	8002da6 <HAL_UART_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800109a:	f000 f929 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000008c 	.word	0x2000008c
 80010a8:	40013800 	.word	0x40013800

080010ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 0318 	add.w	r3, r7, #24
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010c0:	4b53      	ldr	r3, [pc, #332]	; (8001210 <MX_GPIO_Init+0x164>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a52      	ldr	r2, [pc, #328]	; (8001210 <MX_GPIO_Init+0x164>)
 80010c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b50      	ldr	r3, [pc, #320]	; (8001210 <MX_GPIO_Init+0x164>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d8:	4b4d      	ldr	r3, [pc, #308]	; (8001210 <MX_GPIO_Init+0x164>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a4c      	ldr	r2, [pc, #304]	; (8001210 <MX_GPIO_Init+0x164>)
 80010de:	f043 0310 	orr.w	r3, r3, #16
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b4a      	ldr	r3, [pc, #296]	; (8001210 <MX_GPIO_Init+0x164>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f0:	4b47      	ldr	r3, [pc, #284]	; (8001210 <MX_GPIO_Init+0x164>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	4a46      	ldr	r2, [pc, #280]	; (8001210 <MX_GPIO_Init+0x164>)
 80010f6:	f043 0304 	orr.w	r3, r3, #4
 80010fa:	6193      	str	r3, [r2, #24]
 80010fc:	4b44      	ldr	r3, [pc, #272]	; (8001210 <MX_GPIO_Init+0x164>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001108:	4b41      	ldr	r3, [pc, #260]	; (8001210 <MX_GPIO_Init+0x164>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a40      	ldr	r2, [pc, #256]	; (8001210 <MX_GPIO_Init+0x164>)
 800110e:	f043 0308 	orr.w	r3, r3, #8
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b3e      	ldr	r3, [pc, #248]	; (8001210 <MX_GPIO_Init+0x164>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0308 	and.w	r3, r3, #8
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001120:	4b3b      	ldr	r3, [pc, #236]	; (8001210 <MX_GPIO_Init+0x164>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a3a      	ldr	r2, [pc, #232]	; (8001210 <MX_GPIO_Init+0x164>)
 8001126:	f043 0320 	orr.w	r3, r3, #32
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b38      	ldr	r3, [pc, #224]	; (8001210 <MX_GPIO_Init+0x164>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0320 	and.w	r3, r3, #32
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, red1_Pin|green1_Pin, GPIO_PIN_SET);
 8001138:	2201      	movs	r2, #1
 800113a:	2160      	movs	r1, #96	; 0x60
 800113c:	4835      	ldr	r0, [pc, #212]	; (8001214 <MX_GPIO_Init+0x168>)
 800113e:	f000 fdc2 	bl	8001cc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, green4_Pin|red4_Pin|green3_Pin|red3_Pin
 8001142:	2201      	movs	r2, #1
 8001144:	f24f 01c0 	movw	r1, #61632	; 0xf0c0
 8001148:	4833      	ldr	r0, [pc, #204]	; (8001218 <MX_GPIO_Init+0x16c>)
 800114a:	f000 fdbc 	bl	8001cc6 <HAL_GPIO_WritePin>
                          |green2_Pin|red2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001154:	4831      	ldr	r0, [pc, #196]	; (800121c <MX_GPIO_Init+0x170>)
 8001156:	f000 fdb6 	bl	8001cc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	2102      	movs	r1, #2
 800115e:	482d      	ldr	r0, [pc, #180]	; (8001214 <MX_GPIO_Init+0x168>)
 8001160:	f000 fdb1 	bl	8001cc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : red1_Pin green1_Pin PE1 */
  GPIO_InitStruct.Pin = red1_Pin|green1_Pin|GPIO_PIN_1;
 8001164:	2362      	movs	r3, #98	; 0x62
 8001166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001174:	f107 0318 	add.w	r3, r7, #24
 8001178:	4619      	mov	r1, r3
 800117a:	4826      	ldr	r0, [pc, #152]	; (8001214 <MX_GPIO_Init+0x168>)
 800117c:	f000 fbf8 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pins : testing2_Pin key2_Pin key3_Pin */
  GPIO_InitStruct.Pin = testing2_Pin|key2_Pin|key3_Pin;
 8001180:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118a:	2301      	movs	r3, #1
 800118c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118e:	f107 0318 	add.w	r3, r7, #24
 8001192:	4619      	mov	r1, r3
 8001194:	4822      	ldr	r0, [pc, #136]	; (8001220 <MX_GPIO_Init+0x174>)
 8001196:	f000 fbeb 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pins : testing_key_Pin key1_Pin */
  GPIO_InitStruct.Pin = testing_key_Pin|key1_Pin;
 800119a:	2341      	movs	r3, #65	; 0x41
 800119c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 0318 	add.w	r3, r7, #24
 80011aa:	4619      	mov	r1, r3
 80011ac:	481d      	ldr	r0, [pc, #116]	; (8001224 <MX_GPIO_Init+0x178>)
 80011ae:	f000 fbdf 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pins : green4_Pin red4_Pin green3_Pin red3_Pin
                           green2_Pin red2_Pin */
  GPIO_InitStruct.Pin = green4_Pin|red4_Pin|green3_Pin|red3_Pin
 80011b2:	f24f 03c0 	movw	r3, #61632	; 0xf0c0
 80011b6:	61bb      	str	r3, [r7, #24]
                          |green2_Pin|red2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 0318 	add.w	r3, r7, #24
 80011c8:	4619      	mov	r1, r3
 80011ca:	4813      	ldr	r0, [pc, #76]	; (8001218 <MX_GPIO_Init+0x16c>)
 80011cc:	f000 fbd0 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011de:	2303      	movs	r3, #3
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e2:	f107 0318 	add.w	r3, r7, #24
 80011e6:	4619      	mov	r1, r3
 80011e8:	480c      	ldr	r0, [pc, #48]	; (800121c <MX_GPIO_Init+0x170>)
 80011ea:	f000 fbc1 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pin : key4_Pin */
  GPIO_InitStruct.Pin = key4_Pin;
 80011ee:	2304      	movs	r3, #4
 80011f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(key4_GPIO_Port, &GPIO_InitStruct);
 80011fa:	f107 0318 	add.w	r3, r7, #24
 80011fe:	4619      	mov	r1, r3
 8001200:	4806      	ldr	r0, [pc, #24]	; (800121c <MX_GPIO_Init+0x170>)
 8001202:	f000 fbb5 	bl	8001970 <HAL_GPIO_Init>

}
 8001206:	bf00      	nop
 8001208:	3728      	adds	r7, #40	; 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40021000 	.word	0x40021000
 8001214:	40011800 	.word	0x40011800
 8001218:	40010c00 	.word	0x40010c00
 800121c:	40011400 	.word	0x40011400
 8001220:	40011000 	.word	0x40011000
 8001224:	40010800 	.word	0x40010800

08001228 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
 800123c:	615a      	str	r2, [r3, #20]
 800123e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001240:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <MX_FSMC_Init+0xbc>)
 8001242:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001246:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001248:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <MX_FSMC_Init+0xbc>)
 800124a:	4a27      	ldr	r2, [pc, #156]	; (80012e8 <MX_FSMC_Init+0xc0>)
 800124c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800124e:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <MX_FSMC_Init+0xbc>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001254:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <MX_FSMC_Init+0xbc>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800125a:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <MX_FSMC_Init+0xbc>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001260:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <MX_FSMC_Init+0xbc>)
 8001262:	2210      	movs	r2, #16
 8001264:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001266:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <MX_FSMC_Init+0xbc>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800126c:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <MX_FSMC_Init+0xbc>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <MX_FSMC_Init+0xbc>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_FSMC_Init+0xbc>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <MX_FSMC_Init+0xbc>)
 8001280:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001284:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <MX_FSMC_Init+0xbc>)
 8001288:	2200      	movs	r2, #0
 800128a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800128c:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <MX_FSMC_Init+0xbc>)
 800128e:	2200      	movs	r2, #0
 8001290:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_FSMC_Init+0xbc>)
 8001294:	2200      	movs	r2, #0
 8001296:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_FSMC_Init+0xbc>)
 800129a:	2200      	movs	r2, #0
 800129c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800129e:	230f      	movs	r3, #15
 80012a0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80012a2:	230f      	movs	r3, #15
 80012a4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80012a6:	23ff      	movs	r3, #255	; 0xff
 80012a8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80012aa:	230f      	movs	r3, #15
 80012ac:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80012ae:	2310      	movs	r3, #16
 80012b0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80012b2:	2311      	movs	r3, #17
 80012b4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2200      	movs	r2, #0
 80012be:	4619      	mov	r1, r3
 80012c0:	4808      	ldr	r0, [pc, #32]	; (80012e4 <MX_FSMC_Init+0xbc>)
 80012c2:	f001 f933 	bl	800252c <HAL_SRAM_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80012cc:	f000 f810 	bl	80012f0 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_FSMC_Init+0xc4>)
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	4a05      	ldr	r2, [pc, #20]	; (80012ec <MX_FSMC_Init+0xc4>)
 80012d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012da:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80012dc:	bf00      	nop
 80012de:	3720      	adds	r7, #32
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200000d0 	.word	0x200000d0
 80012e8:	a0000104 	.word	0xa0000104
 80012ec:	40010000 	.word	0x40010000

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <Error_Handler+0x8>
	...

080012fc <printMenu>:

#include "menu.h"
#include "dy_sv17f.h"
#include "led_blink.h"

void printMenu(int track) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	  LCD_DrawString(10,25,"Welcome back to ");
 8001304:	4a23      	ldr	r2, [pc, #140]	; (8001394 <printMenu+0x98>)
 8001306:	2119      	movs	r1, #25
 8001308:	200a      	movs	r0, #10
 800130a:	f7ff fcb3 	bl	8000c74 <LCD_DrawString>
	  LCD_DrawString(90,50,"Jubeat!");
 800130e:	4a22      	ldr	r2, [pc, #136]	; (8001398 <printMenu+0x9c>)
 8001310:	2132      	movs	r1, #50	; 0x32
 8001312:	205a      	movs	r0, #90	; 0x5a
 8001314:	f7ff fcae 	bl	8000c74 <LCD_DrawString>
	  LCD_DrawString(10,90,"1.Blank Space - Taylor Swift");
 8001318:	4a20      	ldr	r2, [pc, #128]	; (800139c <printMenu+0xa0>)
 800131a:	215a      	movs	r1, #90	; 0x5a
 800131c:	200a      	movs	r0, #10
 800131e:	f7ff fca9 	bl	8000c74 <LCD_DrawString>
	  LCD_DrawString(10,120,"2.An Apple - Mayday");
 8001322:	4a1f      	ldr	r2, [pc, #124]	; (80013a0 <printMenu+0xa4>)
 8001324:	2178      	movs	r1, #120	; 0x78
 8001326:	200a      	movs	r0, #10
 8001328:	f7ff fca4 	bl	8000c74 <LCD_DrawString>
	  LCD_DrawString(10,150,"3.Bedroom Star - TNT");
 800132c:	4a1d      	ldr	r2, [pc, #116]	; (80013a4 <printMenu+0xa8>)
 800132e:	2196      	movs	r1, #150	; 0x96
 8001330:	200a      	movs	r0, #10
 8001332:	f7ff fc9f 	bl	8000c74 <LCD_DrawString>

	  switch (track) {
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b03      	cmp	r3, #3
 800133a:	d827      	bhi.n	800138c <printMenu+0x90>
 800133c:	a201      	add	r2, pc, #4	; (adr r2, 8001344 <printMenu+0x48>)
 800133e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001342:	bf00      	nop
 8001344:	08001355 	.word	0x08001355
 8001348:	08001363 	.word	0x08001363
 800134c:	08001371 	.word	0x08001371
 8001350:	0800137f 	.word	0x0800137f
	  	  case (0):
				LCD_DrawString(15, 300, "< Default : Blank Space  >");
 8001354:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <printMenu+0xac>)
 8001356:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800135a:	200f      	movs	r0, #15
 800135c:	f7ff fc8a 	bl	8000c74 <LCD_DrawString>
			  	break;
 8001360:	e014      	b.n	800138c <printMenu+0x90>
	  	  case (1):
				LCD_DrawString(15, 300, "< Selected: Blank Space  >");
 8001362:	4a12      	ldr	r2, [pc, #72]	; (80013ac <printMenu+0xb0>)
 8001364:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001368:	200f      	movs	r0, #15
 800136a:	f7ff fc83 	bl	8000c74 <LCD_DrawString>
				break;
 800136e:	e00d      	b.n	800138c <printMenu+0x90>
	  	  case (2):
	  			LCD_DrawString(15, 300, "< Selected: An Apple     >");
 8001370:	4a0f      	ldr	r2, [pc, #60]	; (80013b0 <printMenu+0xb4>)
 8001372:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001376:	200f      	movs	r0, #15
 8001378:	f7ff fc7c 	bl	8000c74 <LCD_DrawString>
	  	  	  	break;
 800137c:	e006      	b.n	800138c <printMenu+0x90>
	  	  case (3):
				LCD_DrawString(15, 300, "< Selected: Bedroom Star >");
 800137e:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <printMenu+0xb8>)
 8001380:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001384:	200f      	movs	r0, #15
 8001386:	f7ff fc75 	bl	8000c74 <LCD_DrawString>
	  }
}
 800138a:	e7ff      	b.n	800138c <printMenu+0x90>
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	080033d4 	.word	0x080033d4
 8001398:	080033e8 	.word	0x080033e8
 800139c:	080033f0 	.word	0x080033f0
 80013a0:	08003410 	.word	0x08003410
 80013a4:	08003424 	.word	0x08003424
 80013a8:	0800343c 	.word	0x0800343c
 80013ac:	08003458 	.word	0x08003458
 80013b0:	08003474 	.word	0x08003474
 80013b4:	08003490 	.word	0x08003490

080013b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_MspInit+0x5c>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	4a14      	ldr	r2, [pc, #80]	; (8001414 <HAL_MspInit+0x5c>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6193      	str	r3, [r2, #24]
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_MspInit+0x5c>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <HAL_MspInit+0x5c>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4a0e      	ldr	r2, [pc, #56]	; (8001414 <HAL_MspInit+0x5c>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e0:	61d3      	str	r3, [r2, #28]
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <HAL_MspInit+0x5c>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_MspInit+0x60>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <HAL_MspInit+0x60>)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	40021000 	.word	0x40021000
 8001418:	40010000 	.word	0x40010000

0800141c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a09      	ldr	r2, [pc, #36]	; (8001450 <HAL_TIM_PWM_MspInit+0x34>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d10b      	bne.n	8001446 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <HAL_TIM_PWM_MspInit+0x38>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	4a08      	ldr	r2, [pc, #32]	; (8001454 <HAL_TIM_PWM_MspInit+0x38>)
 8001434:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001438:	6193      	str	r3, [r2, #24]
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_TIM_PWM_MspInit+0x38>)
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	40012c00 	.word	0x40012c00
 8001454:	40021000 	.word	0x40021000

08001458 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a10      	ldr	r2, [pc, #64]	; (80014b4 <HAL_TIM_MspPostInit+0x5c>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d118      	bne.n	80014aa <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_TIM_MspPostInit+0x60>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <HAL_TIM_MspPostInit+0x60>)
 800147e:	f043 0304 	orr.w	r3, r3, #4
 8001482:	6193      	str	r3, [r2, #24]
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <HAL_TIM_MspPostInit+0x60>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001494:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2302      	movs	r3, #2
 800149c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 0310 	add.w	r3, r7, #16
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <HAL_TIM_MspPostInit+0x64>)
 80014a6:	f000 fa63 	bl	8001970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014aa:	bf00      	nop
 80014ac:	3720      	adds	r7, #32
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40012c00 	.word	0x40012c00
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010800 	.word	0x40010800

080014c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0310 	add.w	r3, r7, #16
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a1c      	ldr	r2, [pc, #112]	; (800154c <HAL_UART_MspInit+0x8c>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d131      	bne.n	8001544 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_UART_MspInit+0x90>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a1a      	ldr	r2, [pc, #104]	; (8001550 <HAL_UART_MspInit+0x90>)
 80014e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b18      	ldr	r3, [pc, #96]	; (8001550 <HAL_UART_MspInit+0x90>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_UART_MspInit+0x90>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a14      	ldr	r2, [pc, #80]	; (8001550 <HAL_UART_MspInit+0x90>)
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_UART_MspInit+0x90>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001514:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 0310 	add.w	r3, r7, #16
 8001522:	4619      	mov	r1, r3
 8001524:	480b      	ldr	r0, [pc, #44]	; (8001554 <HAL_UART_MspInit+0x94>)
 8001526:	f000 fa23 	bl	8001970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800152a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800152e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	4619      	mov	r1, r3
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <HAL_UART_MspInit+0x94>)
 8001540:	f000 fa16 	bl	8001970 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001544:	bf00      	nop
 8001546:	3720      	adds	r7, #32
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40013800 	.word	0x40013800
 8001550:	40021000 	.word	0x40021000
 8001554:	40010800 	.word	0x40010800

08001558 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 800156c:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <HAL_FSMC_MspInit+0x78>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d129      	bne.n	80015c8 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001574:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <HAL_FSMC_MspInit+0x78>)
 8001576:	2201      	movs	r2, #1
 8001578:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800157a:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <HAL_FSMC_MspInit+0x7c>)
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	4a15      	ldr	r2, [pc, #84]	; (80015d4 <HAL_FSMC_MspInit+0x7c>)
 8001580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001584:	6153      	str	r3, [r2, #20]
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <HAL_FSMC_MspInit+0x7c>)
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001592:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001596:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015a0:	f107 0308 	add.w	r3, r7, #8
 80015a4:	4619      	mov	r1, r3
 80015a6:	480c      	ldr	r0, [pc, #48]	; (80015d8 <HAL_FSMC_MspInit+0x80>)
 80015a8:	f000 f9e2 	bl	8001970 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80015ac:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 80015b0:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015b6:	2303      	movs	r3, #3
 80015b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	4619      	mov	r1, r3
 80015c0:	4806      	ldr	r0, [pc, #24]	; (80015dc <HAL_FSMC_MspInit+0x84>)
 80015c2:	f000 f9d5 	bl	8001970 <HAL_GPIO_Init>
 80015c6:	e000      	b.n	80015ca <HAL_FSMC_MspInit+0x72>
    return;
 80015c8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000118 	.word	0x20000118
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40011800 	.word	0x40011800
 80015dc:	40011400 	.word	0x40011400

080015e0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80015e8:	f7ff ffb6 	bl	8001558 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <NMI_Handler+0x4>

080015fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <HardFault_Handler+0x4>

08001600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <MemManage_Handler+0x4>

08001606 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <BusFault_Handler+0x4>

0800160c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <UsageFault_Handler+0x4>

08001612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr

0800161e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163a:	f000 f875 	bl	8001728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}

08001642 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
	...

08001650 <Reset_Handler>:
 8001650:	f7ff fff7 	bl	8001642 <SystemInit>
 8001654:	480b      	ldr	r0, [pc, #44]	; (8001684 <LoopFillZerobss+0xe>)
 8001656:	490c      	ldr	r1, [pc, #48]	; (8001688 <LoopFillZerobss+0x12>)
 8001658:	4a0c      	ldr	r2, [pc, #48]	; (800168c <LoopFillZerobss+0x16>)
 800165a:	2300      	movs	r3, #0
 800165c:	e002      	b.n	8001664 <LoopCopyDataInit>

0800165e <CopyDataInit>:
 800165e:	58d4      	ldr	r4, [r2, r3]
 8001660:	50c4      	str	r4, [r0, r3]
 8001662:	3304      	adds	r3, #4

08001664 <LoopCopyDataInit>:
 8001664:	18c4      	adds	r4, r0, r3
 8001666:	428c      	cmp	r4, r1
 8001668:	d3f9      	bcc.n	800165e <CopyDataInit>
 800166a:	4a09      	ldr	r2, [pc, #36]	; (8001690 <LoopFillZerobss+0x1a>)
 800166c:	4c09      	ldr	r4, [pc, #36]	; (8001694 <LoopFillZerobss+0x1e>)
 800166e:	2300      	movs	r3, #0
 8001670:	e001      	b.n	8001676 <LoopFillZerobss>

08001672 <FillZerobss>:
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	3204      	adds	r2, #4

08001676 <LoopFillZerobss>:
 8001676:	42a2      	cmp	r2, r4
 8001678:	d3fb      	bcc.n	8001672 <FillZerobss>
 800167a:	f001 fe21 	bl	80032c0 <__libc_init_array>
 800167e:	f7ff fb29 	bl	8000cd4 <main>
 8001682:	4770      	bx	lr
 8001684:	20000000 	.word	0x20000000
 8001688:	2000000c 	.word	0x2000000c
 800168c:	08003acc 	.word	0x08003acc
 8001690:	2000000c 	.word	0x2000000c
 8001694:	20000120 	.word	0x20000120

08001698 <ADC1_2_IRQHandler>:
 8001698:	e7fe      	b.n	8001698 <ADC1_2_IRQHandler>
	...

0800169c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_Init+0x28>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <HAL_Init+0x28>)
 80016a6:	f043 0310 	orr.w	r3, r3, #16
 80016aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ac:	2003      	movs	r0, #3
 80016ae:	f000 f92b 	bl	8001908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b2:	200f      	movs	r0, #15
 80016b4:	f000 f808 	bl	80016c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b8:	f7ff fe7e 	bl	80013b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40022000 	.word	0x40022000

080016c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0x54>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_InitTick+0x58>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016de:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 f935 	bl	8001956 <HAL_SYSTICK_Config>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00e      	b.n	8001714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b0f      	cmp	r3, #15
 80016fa:	d80a      	bhi.n	8001712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fc:	2200      	movs	r2, #0
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f000 f90b 	bl	800191e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001708:	4a06      	ldr	r2, [pc, #24]	; (8001724 <HAL_InitTick+0x5c>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e000      	b.n	8001714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000000 	.word	0x20000000
 8001720:	20000008 	.word	0x20000008
 8001724:	20000004 	.word	0x20000004

08001728 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_IncTick+0x1c>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_IncTick+0x20>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4413      	add	r3, r2
 8001738:	4a03      	ldr	r2, [pc, #12]	; (8001748 <HAL_IncTick+0x20>)
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	20000008 	.word	0x20000008
 8001748:	2000011c 	.word	0x2000011c

0800174c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return uwTick;
 8001750:	4b02      	ldr	r3, [pc, #8]	; (800175c <HAL_GetTick+0x10>)
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	2000011c 	.word	0x2000011c

08001760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001768:	f7ff fff0 	bl	800174c <HAL_GetTick>
 800176c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001778:	d005      	beq.n	8001786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_Delay+0x44>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4413      	add	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001786:	bf00      	nop
 8001788:	f7ff ffe0 	bl	800174c <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	429a      	cmp	r2, r3
 8001796:	d8f7      	bhi.n	8001788 <HAL_Delay+0x28>
  {
  }
}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000008 	.word	0x20000008

080017a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c4:	4013      	ands	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017da:	4a04      	ldr	r2, [pc, #16]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	60d3      	str	r3, [r2, #12]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <__NVIC_GetPriorityGrouping+0x18>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	f003 0307 	and.w	r3, r3, #7
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	6039      	str	r1, [r7, #0]
 8001816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	2b00      	cmp	r3, #0
 800181e:	db0a      	blt.n	8001836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	490c      	ldr	r1, [pc, #48]	; (8001858 <__NVIC_SetPriority+0x4c>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	0112      	lsls	r2, r2, #4
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	440b      	add	r3, r1
 8001830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001834:	e00a      	b.n	800184c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4908      	ldr	r1, [pc, #32]	; (800185c <__NVIC_SetPriority+0x50>)
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	3b04      	subs	r3, #4
 8001844:	0112      	lsls	r2, r2, #4
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	440b      	add	r3, r1
 800184a:	761a      	strb	r2, [r3, #24]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000e100 	.word	0xe000e100
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	; 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f1c3 0307 	rsb	r3, r3, #7
 800187a:	2b04      	cmp	r3, #4
 800187c:	bf28      	it	cs
 800187e:	2304      	movcs	r3, #4
 8001880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3304      	adds	r3, #4
 8001886:	2b06      	cmp	r3, #6
 8001888:	d902      	bls.n	8001890 <NVIC_EncodePriority+0x30>
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3b03      	subs	r3, #3
 800188e:	e000      	b.n	8001892 <NVIC_EncodePriority+0x32>
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	f04f 32ff 	mov.w	r2, #4294967295
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43da      	mvns	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	401a      	ands	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	43d9      	mvns	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	4313      	orrs	r3, r2
         );
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3724      	adds	r7, #36	; 0x24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d4:	d301      	bcc.n	80018da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00f      	b.n	80018fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <SysTick_Config+0x40>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e2:	210f      	movs	r1, #15
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f7ff ff90 	bl	800180c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <SysTick_Config+0x40>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <SysTick_Config+0x40>)
 80018f4:	2207      	movs	r2, #7
 80018f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	e000e010 	.word	0xe000e010

08001908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff49 	bl	80017a8 <__NVIC_SetPriorityGrouping>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001930:	f7ff ff5e 	bl	80017f0 <__NVIC_GetPriorityGrouping>
 8001934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	6978      	ldr	r0, [r7, #20]
 800193c:	f7ff ff90 	bl	8001860 <NVIC_EncodePriority>
 8001940:	4602      	mov	r2, r0
 8001942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff5f 	bl	800180c <__NVIC_SetPriority>
}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ffb0 	bl	80018c4 <SysTick_Config>
 8001964:	4603      	mov	r3, r0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001970:	b480      	push	{r7}
 8001972:	b08b      	sub	sp, #44	; 0x2c
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800197a:	2300      	movs	r3, #0
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800197e:	2300      	movs	r3, #0
 8001980:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001982:	e179      	b.n	8001c78 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001984:	2201      	movs	r2, #1
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	69fa      	ldr	r2, [r7, #28]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	429a      	cmp	r2, r3
 800199e:	f040 8168 	bne.w	8001c72 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	4a96      	ldr	r2, [pc, #600]	; (8001c00 <HAL_GPIO_Init+0x290>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d05e      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
 80019ac:	4a94      	ldr	r2, [pc, #592]	; (8001c00 <HAL_GPIO_Init+0x290>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d875      	bhi.n	8001a9e <HAL_GPIO_Init+0x12e>
 80019b2:	4a94      	ldr	r2, [pc, #592]	; (8001c04 <HAL_GPIO_Init+0x294>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d058      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
 80019b8:	4a92      	ldr	r2, [pc, #584]	; (8001c04 <HAL_GPIO_Init+0x294>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d86f      	bhi.n	8001a9e <HAL_GPIO_Init+0x12e>
 80019be:	4a92      	ldr	r2, [pc, #584]	; (8001c08 <HAL_GPIO_Init+0x298>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d052      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
 80019c4:	4a90      	ldr	r2, [pc, #576]	; (8001c08 <HAL_GPIO_Init+0x298>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d869      	bhi.n	8001a9e <HAL_GPIO_Init+0x12e>
 80019ca:	4a90      	ldr	r2, [pc, #576]	; (8001c0c <HAL_GPIO_Init+0x29c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d04c      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
 80019d0:	4a8e      	ldr	r2, [pc, #568]	; (8001c0c <HAL_GPIO_Init+0x29c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d863      	bhi.n	8001a9e <HAL_GPIO_Init+0x12e>
 80019d6:	4a8e      	ldr	r2, [pc, #568]	; (8001c10 <HAL_GPIO_Init+0x2a0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d046      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
 80019dc:	4a8c      	ldr	r2, [pc, #560]	; (8001c10 <HAL_GPIO_Init+0x2a0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d85d      	bhi.n	8001a9e <HAL_GPIO_Init+0x12e>
 80019e2:	2b12      	cmp	r3, #18
 80019e4:	d82a      	bhi.n	8001a3c <HAL_GPIO_Init+0xcc>
 80019e6:	2b12      	cmp	r3, #18
 80019e8:	d859      	bhi.n	8001a9e <HAL_GPIO_Init+0x12e>
 80019ea:	a201      	add	r2, pc, #4	; (adr r2, 80019f0 <HAL_GPIO_Init+0x80>)
 80019ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f0:	08001a6b 	.word	0x08001a6b
 80019f4:	08001a45 	.word	0x08001a45
 80019f8:	08001a57 	.word	0x08001a57
 80019fc:	08001a99 	.word	0x08001a99
 8001a00:	08001a9f 	.word	0x08001a9f
 8001a04:	08001a9f 	.word	0x08001a9f
 8001a08:	08001a9f 	.word	0x08001a9f
 8001a0c:	08001a9f 	.word	0x08001a9f
 8001a10:	08001a9f 	.word	0x08001a9f
 8001a14:	08001a9f 	.word	0x08001a9f
 8001a18:	08001a9f 	.word	0x08001a9f
 8001a1c:	08001a9f 	.word	0x08001a9f
 8001a20:	08001a9f 	.word	0x08001a9f
 8001a24:	08001a9f 	.word	0x08001a9f
 8001a28:	08001a9f 	.word	0x08001a9f
 8001a2c:	08001a9f 	.word	0x08001a9f
 8001a30:	08001a9f 	.word	0x08001a9f
 8001a34:	08001a4d 	.word	0x08001a4d
 8001a38:	08001a61 	.word	0x08001a61
 8001a3c:	4a75      	ldr	r2, [pc, #468]	; (8001c14 <HAL_GPIO_Init+0x2a4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d013      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a42:	e02c      	b.n	8001a9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	623b      	str	r3, [r7, #32]
          break;
 8001a4a:	e029      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	3304      	adds	r3, #4
 8001a52:	623b      	str	r3, [r7, #32]
          break;
 8001a54:	e024      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	3308      	adds	r3, #8
 8001a5c:	623b      	str	r3, [r7, #32]
          break;
 8001a5e:	e01f      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	330c      	adds	r3, #12
 8001a66:	623b      	str	r3, [r7, #32]
          break;
 8001a68:	e01a      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d102      	bne.n	8001a78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a72:	2304      	movs	r3, #4
 8001a74:	623b      	str	r3, [r7, #32]
          break;
 8001a76:	e013      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d105      	bne.n	8001a8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a80:	2308      	movs	r3, #8
 8001a82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	611a      	str	r2, [r3, #16]
          break;
 8001a8a:	e009      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69fa      	ldr	r2, [r7, #28]
 8001a94:	615a      	str	r2, [r3, #20]
          break;
 8001a96:	e003      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
          break;
 8001a9c:	e000      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
          break;
 8001a9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2bff      	cmp	r3, #255	; 0xff
 8001aa4:	d801      	bhi.n	8001aaa <HAL_GPIO_Init+0x13a>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	e001      	b.n	8001aae <HAL_GPIO_Init+0x13e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3304      	adds	r3, #4
 8001aae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2bff      	cmp	r3, #255	; 0xff
 8001ab4:	d802      	bhi.n	8001abc <HAL_GPIO_Init+0x14c>
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	e002      	b.n	8001ac2 <HAL_GPIO_Init+0x152>
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	3b08      	subs	r3, #8
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	210f      	movs	r1, #15
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	6a39      	ldr	r1, [r7, #32]
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	431a      	orrs	r2, r3
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 80c1 	beq.w	8001c72 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001af0:	4b49      	ldr	r3, [pc, #292]	; (8001c18 <HAL_GPIO_Init+0x2a8>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4a48      	ldr	r2, [pc, #288]	; (8001c18 <HAL_GPIO_Init+0x2a8>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6193      	str	r3, [r2, #24]
 8001afc:	4b46      	ldr	r3, [pc, #280]	; (8001c18 <HAL_GPIO_Init+0x2a8>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b08:	4a44      	ldr	r2, [pc, #272]	; (8001c1c <HAL_GPIO_Init+0x2ac>)
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	089b      	lsrs	r3, r3, #2
 8001b0e:	3302      	adds	r3, #2
 8001b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	220f      	movs	r2, #15
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a3c      	ldr	r2, [pc, #240]	; (8001c20 <HAL_GPIO_Init+0x2b0>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d01f      	beq.n	8001b74 <HAL_GPIO_Init+0x204>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a3b      	ldr	r2, [pc, #236]	; (8001c24 <HAL_GPIO_Init+0x2b4>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d019      	beq.n	8001b70 <HAL_GPIO_Init+0x200>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a3a      	ldr	r2, [pc, #232]	; (8001c28 <HAL_GPIO_Init+0x2b8>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d013      	beq.n	8001b6c <HAL_GPIO_Init+0x1fc>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a39      	ldr	r2, [pc, #228]	; (8001c2c <HAL_GPIO_Init+0x2bc>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d00d      	beq.n	8001b68 <HAL_GPIO_Init+0x1f8>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a38      	ldr	r2, [pc, #224]	; (8001c30 <HAL_GPIO_Init+0x2c0>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d007      	beq.n	8001b64 <HAL_GPIO_Init+0x1f4>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a37      	ldr	r2, [pc, #220]	; (8001c34 <HAL_GPIO_Init+0x2c4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d101      	bne.n	8001b60 <HAL_GPIO_Init+0x1f0>
 8001b5c:	2305      	movs	r3, #5
 8001b5e:	e00a      	b.n	8001b76 <HAL_GPIO_Init+0x206>
 8001b60:	2306      	movs	r3, #6
 8001b62:	e008      	b.n	8001b76 <HAL_GPIO_Init+0x206>
 8001b64:	2304      	movs	r3, #4
 8001b66:	e006      	b.n	8001b76 <HAL_GPIO_Init+0x206>
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e004      	b.n	8001b76 <HAL_GPIO_Init+0x206>
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e002      	b.n	8001b76 <HAL_GPIO_Init+0x206>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <HAL_GPIO_Init+0x206>
 8001b74:	2300      	movs	r3, #0
 8001b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b78:	f002 0203 	and.w	r2, r2, #3
 8001b7c:	0092      	lsls	r2, r2, #2
 8001b7e:	4093      	lsls	r3, r2
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b86:	4925      	ldr	r1, [pc, #148]	; (8001c1c <HAL_GPIO_Init+0x2ac>)
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	089b      	lsrs	r3, r3, #2
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d006      	beq.n	8001bae <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ba0:	4b25      	ldr	r3, [pc, #148]	; (8001c38 <HAL_GPIO_Init+0x2c8>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4924      	ldr	r1, [pc, #144]	; (8001c38 <HAL_GPIO_Init+0x2c8>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	600b      	str	r3, [r1, #0]
 8001bac:	e006      	b.n	8001bbc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bae:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <HAL_GPIO_Init+0x2c8>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	4920      	ldr	r1, [pc, #128]	; (8001c38 <HAL_GPIO_Init+0x2c8>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d006      	beq.n	8001bd6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <HAL_GPIO_Init+0x2c8>)
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	491a      	ldr	r1, [pc, #104]	; (8001c38 <HAL_GPIO_Init+0x2c8>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <HAL_GPIO_Init+0x2c8>)
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	4916      	ldr	r1, [pc, #88]	; (8001c38 <HAL_GPIO_Init+0x2c8>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d025      	beq.n	8001c3c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <HAL_GPIO_Init+0x2c8>)
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	4910      	ldr	r1, [pc, #64]	; (8001c38 <HAL_GPIO_Init+0x2c8>)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	608b      	str	r3, [r1, #8]
 8001bfc:	e025      	b.n	8001c4a <HAL_GPIO_Init+0x2da>
 8001bfe:	bf00      	nop
 8001c00:	10320000 	.word	0x10320000
 8001c04:	10310000 	.word	0x10310000
 8001c08:	10220000 	.word	0x10220000
 8001c0c:	10210000 	.word	0x10210000
 8001c10:	10120000 	.word	0x10120000
 8001c14:	10110000 	.word	0x10110000
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010000 	.word	0x40010000
 8001c20:	40010800 	.word	0x40010800
 8001c24:	40010c00 	.word	0x40010c00
 8001c28:	40011000 	.word	0x40011000
 8001c2c:	40011400 	.word	0x40011400
 8001c30:	40011800 	.word	0x40011800
 8001c34:	40011c00 	.word	0x40011c00
 8001c38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c3c:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_GPIO_Init+0x324>)
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	4913      	ldr	r1, [pc, #76]	; (8001c94 <HAL_GPIO_Init+0x324>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d006      	beq.n	8001c64 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <HAL_GPIO_Init+0x324>)
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	490e      	ldr	r1, [pc, #56]	; (8001c94 <HAL_GPIO_Init+0x324>)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60cb      	str	r3, [r1, #12]
 8001c62:	e006      	b.n	8001c72 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_GPIO_Init+0x324>)
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	4909      	ldr	r1, [pc, #36]	; (8001c94 <HAL_GPIO_Init+0x324>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	3301      	adds	r3, #1
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f47f ae7e 	bne.w	8001984 <HAL_GPIO_Init+0x14>
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	372c      	adds	r7, #44	; 0x2c
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	40010400 	.word	0x40010400

08001c98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	887b      	ldrh	r3, [r7, #2]
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
 8001cb4:	e001      	b.n	8001cba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	807b      	strh	r3, [r7, #2]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cd6:	787b      	ldrb	r3, [r7, #1]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cdc:	887a      	ldrh	r2, [r7, #2]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ce2:	e003      	b.n	8001cec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ce4:	887b      	ldrh	r3, [r7, #2]
 8001ce6:	041a      	lsls	r2, r3, #16
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	611a      	str	r2, [r3, #16]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr
	...

08001cf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e272      	b.n	80021f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 8087 	beq.w	8001e26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d18:	4b92      	ldr	r3, [pc, #584]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d00c      	beq.n	8001d3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d24:	4b8f      	ldr	r3, [pc, #572]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 030c 	and.w	r3, r3, #12
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d112      	bne.n	8001d56 <HAL_RCC_OscConfig+0x5e>
 8001d30:	4b8c      	ldr	r3, [pc, #560]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3c:	d10b      	bne.n	8001d56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3e:	4b89      	ldr	r3, [pc, #548]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d06c      	beq.n	8001e24 <HAL_RCC_OscConfig+0x12c>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d168      	bne.n	8001e24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e24c      	b.n	80021f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d5e:	d106      	bne.n	8001d6e <HAL_RCC_OscConfig+0x76>
 8001d60:	4b80      	ldr	r3, [pc, #512]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a7f      	ldr	r2, [pc, #508]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	e02e      	b.n	8001dcc <HAL_RCC_OscConfig+0xd4>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x98>
 8001d76:	4b7b      	ldr	r3, [pc, #492]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a7a      	ldr	r2, [pc, #488]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	4b78      	ldr	r3, [pc, #480]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a77      	ldr	r2, [pc, #476]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	e01d      	b.n	8001dcc <HAL_RCC_OscConfig+0xd4>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCC_OscConfig+0xbc>
 8001d9a:	4b72      	ldr	r3, [pc, #456]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a71      	ldr	r2, [pc, #452]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	4b6f      	ldr	r3, [pc, #444]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a6e      	ldr	r2, [pc, #440]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e00b      	b.n	8001dcc <HAL_RCC_OscConfig+0xd4>
 8001db4:	4b6b      	ldr	r3, [pc, #428]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a6a      	ldr	r2, [pc, #424]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4b68      	ldr	r3, [pc, #416]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a67      	ldr	r2, [pc, #412]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d013      	beq.n	8001dfc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7ff fcba 	bl	800174c <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ddc:	f7ff fcb6 	bl	800174c <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b64      	cmp	r3, #100	; 0x64
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e200      	b.n	80021f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dee:	4b5d      	ldr	r3, [pc, #372]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0xe4>
 8001dfa:	e014      	b.n	8001e26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fca6 	bl	800174c <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e04:	f7ff fca2 	bl	800174c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	; 0x64
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e1ec      	b.n	80021f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e16:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x10c>
 8001e22:	e000      	b.n	8001e26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d063      	beq.n	8001efa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e32:	4b4c      	ldr	r3, [pc, #304]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00b      	beq.n	8001e56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e3e:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d11c      	bne.n	8001e84 <HAL_RCC_OscConfig+0x18c>
 8001e4a:	4b46      	ldr	r3, [pc, #280]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d116      	bne.n	8001e84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e56:	4b43      	ldr	r3, [pc, #268]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <HAL_RCC_OscConfig+0x176>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d001      	beq.n	8001e6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e1c0      	b.n	80021f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6e:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4939      	ldr	r1, [pc, #228]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e82:	e03a      	b.n	8001efa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d020      	beq.n	8001ece <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e8c:	4b36      	ldr	r3, [pc, #216]	; (8001f68 <HAL_RCC_OscConfig+0x270>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e92:	f7ff fc5b 	bl	800174c <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9a:	f7ff fc57 	bl	800174c <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e1a1      	b.n	80021f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eac:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb8:	4b2a      	ldr	r3, [pc, #168]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4927      	ldr	r1, [pc, #156]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	600b      	str	r3, [r1, #0]
 8001ecc:	e015      	b.n	8001efa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ece:	4b26      	ldr	r3, [pc, #152]	; (8001f68 <HAL_RCC_OscConfig+0x270>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7ff fc3a 	bl	800174c <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001edc:	f7ff fc36 	bl	800174c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e180      	b.n	80021f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eee:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d03a      	beq.n	8001f7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d019      	beq.n	8001f42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f0e:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <HAL_RCC_OscConfig+0x274>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f14:	f7ff fc1a 	bl	800174c <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f1c:	f7ff fc16 	bl	800174c <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e160      	b.n	80021f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f3a:	2001      	movs	r0, #1
 8001f3c:	f000 fad8 	bl	80024f0 <RCC_Delay>
 8001f40:	e01c      	b.n	8001f7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <HAL_RCC_OscConfig+0x274>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f48:	f7ff fc00 	bl	800174c <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f4e:	e00f      	b.n	8001f70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f50:	f7ff fbfc 	bl	800174c <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d908      	bls.n	8001f70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e146      	b.n	80021f0 <HAL_RCC_OscConfig+0x4f8>
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	42420000 	.word	0x42420000
 8001f6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f70:	4b92      	ldr	r3, [pc, #584]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1e9      	bne.n	8001f50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 80a6 	beq.w	80020d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8e:	4b8b      	ldr	r3, [pc, #556]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10d      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	4b88      	ldr	r3, [pc, #544]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4a87      	ldr	r2, [pc, #540]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	61d3      	str	r3, [r2, #28]
 8001fa6:	4b85      	ldr	r3, [pc, #532]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb6:	4b82      	ldr	r3, [pc, #520]	; (80021c0 <HAL_RCC_OscConfig+0x4c8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d118      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fc2:	4b7f      	ldr	r3, [pc, #508]	; (80021c0 <HAL_RCC_OscConfig+0x4c8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a7e      	ldr	r2, [pc, #504]	; (80021c0 <HAL_RCC_OscConfig+0x4c8>)
 8001fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fce:	f7ff fbbd 	bl	800174c <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd6:	f7ff fbb9 	bl	800174c <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b64      	cmp	r3, #100	; 0x64
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e103      	b.n	80021f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe8:	4b75      	ldr	r3, [pc, #468]	; (80021c0 <HAL_RCC_OscConfig+0x4c8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_OscConfig+0x312>
 8001ffc:	4b6f      	ldr	r3, [pc, #444]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	4a6e      	ldr	r2, [pc, #440]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6213      	str	r3, [r2, #32]
 8002008:	e02d      	b.n	8002066 <HAL_RCC_OscConfig+0x36e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0x334>
 8002012:	4b6a      	ldr	r3, [pc, #424]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	4a69      	ldr	r2, [pc, #420]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	6213      	str	r3, [r2, #32]
 800201e:	4b67      	ldr	r3, [pc, #412]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	4a66      	ldr	r2, [pc, #408]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 8002024:	f023 0304 	bic.w	r3, r3, #4
 8002028:	6213      	str	r3, [r2, #32]
 800202a:	e01c      	b.n	8002066 <HAL_RCC_OscConfig+0x36e>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	2b05      	cmp	r3, #5
 8002032:	d10c      	bne.n	800204e <HAL_RCC_OscConfig+0x356>
 8002034:	4b61      	ldr	r3, [pc, #388]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	4a60      	ldr	r2, [pc, #384]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 800203a:	f043 0304 	orr.w	r3, r3, #4
 800203e:	6213      	str	r3, [r2, #32]
 8002040:	4b5e      	ldr	r3, [pc, #376]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	4a5d      	ldr	r2, [pc, #372]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6213      	str	r3, [r2, #32]
 800204c:	e00b      	b.n	8002066 <HAL_RCC_OscConfig+0x36e>
 800204e:	4b5b      	ldr	r3, [pc, #364]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	4a5a      	ldr	r2, [pc, #360]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	6213      	str	r3, [r2, #32]
 800205a:	4b58      	ldr	r3, [pc, #352]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	4a57      	ldr	r2, [pc, #348]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 8002060:	f023 0304 	bic.w	r3, r3, #4
 8002064:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d015      	beq.n	800209a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206e:	f7ff fb6d 	bl	800174c <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002074:	e00a      	b.n	800208c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7ff fb69 	bl	800174c <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f241 3288 	movw	r2, #5000	; 0x1388
 8002084:	4293      	cmp	r3, r2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e0b1      	b.n	80021f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208c:	4b4b      	ldr	r3, [pc, #300]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0ee      	beq.n	8002076 <HAL_RCC_OscConfig+0x37e>
 8002098:	e014      	b.n	80020c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209a:	f7ff fb57 	bl	800174c <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a0:	e00a      	b.n	80020b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a2:	f7ff fb53 	bl	800174c <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e09b      	b.n	80021f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b8:	4b40      	ldr	r3, [pc, #256]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1ee      	bne.n	80020a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d105      	bne.n	80020d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ca:	4b3c      	ldr	r3, [pc, #240]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	4a3b      	ldr	r2, [pc, #236]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 8087 	beq.w	80021ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020e0:	4b36      	ldr	r3, [pc, #216]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d061      	beq.n	80021b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d146      	bne.n	8002182 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f4:	4b33      	ldr	r3, [pc, #204]	; (80021c4 <HAL_RCC_OscConfig+0x4cc>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fa:	f7ff fb27 	bl	800174c <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002102:	f7ff fb23 	bl	800174c <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e06d      	b.n	80021f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002114:	4b29      	ldr	r3, [pc, #164]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f0      	bne.n	8002102 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002128:	d108      	bne.n	800213c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800212a:	4b24      	ldr	r3, [pc, #144]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	4921      	ldr	r1, [pc, #132]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 8002138:	4313      	orrs	r3, r2
 800213a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800213c:	4b1f      	ldr	r3, [pc, #124]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a19      	ldr	r1, [r3, #32]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	430b      	orrs	r3, r1
 800214e:	491b      	ldr	r1, [pc, #108]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002154:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <HAL_RCC_OscConfig+0x4cc>)
 8002156:	2201      	movs	r2, #1
 8002158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215a:	f7ff faf7 	bl	800174c <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002162:	f7ff faf3 	bl	800174c <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e03d      	b.n	80021f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f0      	beq.n	8002162 <HAL_RCC_OscConfig+0x46a>
 8002180:	e035      	b.n	80021ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <HAL_RCC_OscConfig+0x4cc>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7ff fae0 	bl	800174c <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002190:	f7ff fadc 	bl	800174c <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e026      	b.n	80021f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x498>
 80021ae:	e01e      	b.n	80021ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d107      	bne.n	80021c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e019      	b.n	80021f0 <HAL_RCC_OscConfig+0x4f8>
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40007000 	.word	0x40007000
 80021c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_RCC_OscConfig+0x500>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d106      	bne.n	80021ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d001      	beq.n	80021ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40021000 	.word	0x40021000

080021fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0d0      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002210:	4b6a      	ldr	r3, [pc, #424]	; (80023bc <HAL_RCC_ClockConfig+0x1c0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d910      	bls.n	8002240 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221e:	4b67      	ldr	r3, [pc, #412]	; (80023bc <HAL_RCC_ClockConfig+0x1c0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f023 0207 	bic.w	r2, r3, #7
 8002226:	4965      	ldr	r1, [pc, #404]	; (80023bc <HAL_RCC_ClockConfig+0x1c0>)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	4313      	orrs	r3, r2
 800222c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222e:	4b63      	ldr	r3, [pc, #396]	; (80023bc <HAL_RCC_ClockConfig+0x1c0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d001      	beq.n	8002240 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0b8      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d020      	beq.n	800228e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002258:	4b59      	ldr	r3, [pc, #356]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4a58      	ldr	r2, [pc, #352]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 800225e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002262:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002270:	4b53      	ldr	r3, [pc, #332]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4a52      	ldr	r2, [pc, #328]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800227a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800227c:	4b50      	ldr	r3, [pc, #320]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	494d      	ldr	r1, [pc, #308]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	4313      	orrs	r3, r2
 800228c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d040      	beq.n	800231c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a2:	4b47      	ldr	r3, [pc, #284]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d115      	bne.n	80022da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e07f      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d107      	bne.n	80022ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ba:	4b41      	ldr	r3, [pc, #260]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d109      	bne.n	80022da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e073      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ca:	4b3d      	ldr	r3, [pc, #244]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e06b      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022da:	4b39      	ldr	r3, [pc, #228]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f023 0203 	bic.w	r2, r3, #3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	4936      	ldr	r1, [pc, #216]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022ec:	f7ff fa2e 	bl	800174c <HAL_GetTick>
 80022f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f2:	e00a      	b.n	800230a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f4:	f7ff fa2a 	bl	800174c <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002302:	4293      	cmp	r3, r2
 8002304:	d901      	bls.n	800230a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e053      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230a:	4b2d      	ldr	r3, [pc, #180]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 020c 	and.w	r2, r3, #12
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	429a      	cmp	r2, r3
 800231a:	d1eb      	bne.n	80022f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800231c:	4b27      	ldr	r3, [pc, #156]	; (80023bc <HAL_RCC_ClockConfig+0x1c0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d210      	bcs.n	800234c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232a:	4b24      	ldr	r3, [pc, #144]	; (80023bc <HAL_RCC_ClockConfig+0x1c0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 0207 	bic.w	r2, r3, #7
 8002332:	4922      	ldr	r1, [pc, #136]	; (80023bc <HAL_RCC_ClockConfig+0x1c0>)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800233a:	4b20      	ldr	r3, [pc, #128]	; (80023bc <HAL_RCC_ClockConfig+0x1c0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d001      	beq.n	800234c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e032      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002358:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4916      	ldr	r1, [pc, #88]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002366:	4313      	orrs	r3, r2
 8002368:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d009      	beq.n	800238a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002376:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	490e      	ldr	r1, [pc, #56]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	4313      	orrs	r3, r2
 8002388:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800238a:	f000 f821 	bl	80023d0 <HAL_RCC_GetSysClockFreq>
 800238e:	4602      	mov	r2, r0
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	490a      	ldr	r1, [pc, #40]	; (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 800239c:	5ccb      	ldrb	r3, [r1, r3]
 800239e:	fa22 f303 	lsr.w	r3, r2, r3
 80023a2:	4a09      	ldr	r2, [pc, #36]	; (80023c8 <HAL_RCC_ClockConfig+0x1cc>)
 80023a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <HAL_RCC_ClockConfig+0x1d0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff f98c 	bl	80016c8 <HAL_InitTick>

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40022000 	.word	0x40022000
 80023c0:	40021000 	.word	0x40021000
 80023c4:	08003aac 	.word	0x08003aac
 80023c8:	20000000 	.word	0x20000000
 80023cc:	20000004 	.word	0x20000004

080023d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d0:	b490      	push	{r4, r7}
 80023d2:	b08a      	sub	sp, #40	; 0x28
 80023d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023d6:	4b29      	ldr	r3, [pc, #164]	; (800247c <HAL_RCC_GetSysClockFreq+0xac>)
 80023d8:	1d3c      	adds	r4, r7, #4
 80023da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023e0:	f240 2301 	movw	r3, #513	; 0x201
 80023e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
 80023ea:	2300      	movs	r3, #0
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	2300      	movs	r3, #0
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023fa:	4b21      	ldr	r3, [pc, #132]	; (8002480 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b04      	cmp	r3, #4
 8002408:	d002      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0x40>
 800240a:	2b08      	cmp	r3, #8
 800240c:	d003      	beq.n	8002416 <HAL_RCC_GetSysClockFreq+0x46>
 800240e:	e02b      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002410:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002412:	623b      	str	r3, [r7, #32]
      break;
 8002414:	e02b      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	0c9b      	lsrs	r3, r3, #18
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	3328      	adds	r3, #40	; 0x28
 8002420:	443b      	add	r3, r7
 8002422:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002426:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d012      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002432:	4b13      	ldr	r3, [pc, #76]	; (8002480 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	0c5b      	lsrs	r3, r3, #17
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	3328      	adds	r3, #40	; 0x28
 800243e:	443b      	add	r3, r7
 8002440:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002444:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <HAL_RCC_GetSysClockFreq+0xb4>)
 800244a:	fb03 f202 	mul.w	r2, r3, r2
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	fbb2 f3f3 	udiv	r3, r2, r3
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
 8002456:	e004      	b.n	8002462 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	4a0b      	ldr	r2, [pc, #44]	; (8002488 <HAL_RCC_GetSysClockFreq+0xb8>)
 800245c:	fb02 f303 	mul.w	r3, r2, r3
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	623b      	str	r3, [r7, #32]
      break;
 8002466:	e002      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_RCC_GetSysClockFreq+0xb4>)
 800246a:	623b      	str	r3, [r7, #32]
      break;
 800246c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800246e:	6a3b      	ldr	r3, [r7, #32]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3728      	adds	r7, #40	; 0x28
 8002474:	46bd      	mov	sp, r7
 8002476:	bc90      	pop	{r4, r7}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	080034ac 	.word	0x080034ac
 8002480:	40021000 	.word	0x40021000
 8002484:	007a1200 	.word	0x007a1200
 8002488:	003d0900 	.word	0x003d0900

0800248c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002490:	4b02      	ldr	r3, [pc, #8]	; (800249c <HAL_RCC_GetHCLKFreq+0x10>)
 8002492:	681b      	ldr	r3, [r3, #0]
}
 8002494:	4618      	mov	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr
 800249c:	20000000 	.word	0x20000000

080024a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024a4:	f7ff fff2 	bl	800248c <HAL_RCC_GetHCLKFreq>
 80024a8:	4602      	mov	r2, r0
 80024aa:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	4903      	ldr	r1, [pc, #12]	; (80024c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024b6:	5ccb      	ldrb	r3, [r1, r3]
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024bc:	4618      	mov	r0, r3
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40021000 	.word	0x40021000
 80024c4:	08003abc 	.word	0x08003abc

080024c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024cc:	f7ff ffde 	bl	800248c <HAL_RCC_GetHCLKFreq>
 80024d0:	4602      	mov	r2, r0
 80024d2:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	0adb      	lsrs	r3, r3, #11
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	4903      	ldr	r1, [pc, #12]	; (80024ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80024de:	5ccb      	ldrb	r3, [r1, r3]
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40021000 	.word	0x40021000
 80024ec:	08003abc 	.word	0x08003abc

080024f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024f8:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <RCC_Delay+0x34>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <RCC_Delay+0x38>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	0a5b      	lsrs	r3, r3, #9
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	fb02 f303 	mul.w	r3, r2, r3
 800250a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800250c:	bf00      	nop
  }
  while (Delay --);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1e5a      	subs	r2, r3, #1
 8002512:	60fa      	str	r2, [r7, #12]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1f9      	bne.n	800250c <RCC_Delay+0x1c>
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr
 8002524:	20000000 	.word	0x20000000
 8002528:	10624dd3 	.word	0x10624dd3

0800252c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d004      	beq.n	8002548 <HAL_SRAM_Init+0x1c>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002546:	d101      	bne.n	800254c <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e038      	b.n	80025be <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d106      	bne.n	8002566 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f7ff f83d 	bl	80015e0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	3308      	adds	r3, #8
 800256e:	4619      	mov	r1, r3
 8002570:	4610      	mov	r0, r2
 8002572:	f000 fdcf 	bl	8003114 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	461a      	mov	r2, r3
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	f000 fe31 	bl	80031e8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6858      	ldr	r0, [r3, #4]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	f000 fe5c 	bl	8003250 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	6892      	ldr	r2, [r2, #8]
 80025a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	6892      	ldr	r2, [r2, #8]
 80025ac:	f041 0101 	orr.w	r1, r1, #1
 80025b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e041      	b.n	800265c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d106      	bne.n	80025f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7fe ff15 	bl	800141c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2202      	movs	r2, #2
 80025f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3304      	adds	r3, #4
 8002602:	4619      	mov	r1, r3
 8002604:	4610      	mov	r0, r2
 8002606:	f000 f8eb 	bl	80027e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002676:	2b01      	cmp	r3, #1
 8002678:	d101      	bne.n	800267e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800267a:	2302      	movs	r3, #2
 800267c:	e0ac      	b.n	80027d8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b0c      	cmp	r3, #12
 800268a:	f200 809f 	bhi.w	80027cc <HAL_TIM_PWM_ConfigChannel+0x168>
 800268e:	a201      	add	r2, pc, #4	; (adr r2, 8002694 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002694:	080026c9 	.word	0x080026c9
 8002698:	080027cd 	.word	0x080027cd
 800269c:	080027cd 	.word	0x080027cd
 80026a0:	080027cd 	.word	0x080027cd
 80026a4:	08002709 	.word	0x08002709
 80026a8:	080027cd 	.word	0x080027cd
 80026ac:	080027cd 	.word	0x080027cd
 80026b0:	080027cd 	.word	0x080027cd
 80026b4:	0800274b 	.word	0x0800274b
 80026b8:	080027cd 	.word	0x080027cd
 80026bc:	080027cd 	.word	0x080027cd
 80026c0:	080027cd 	.word	0x080027cd
 80026c4:	0800278b 	.word	0x0800278b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f900 	bl	80028d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	699a      	ldr	r2, [r3, #24]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0208 	orr.w	r2, r2, #8
 80026e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0204 	bic.w	r2, r2, #4
 80026f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6999      	ldr	r1, [r3, #24]
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	691a      	ldr	r2, [r3, #16]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	619a      	str	r2, [r3, #24]
      break;
 8002706:	e062      	b.n	80027ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	4618      	mov	r0, r3
 8002710:	f000 f950 	bl	80029b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699a      	ldr	r2, [r3, #24]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6999      	ldr	r1, [r3, #24]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	021a      	lsls	r2, r3, #8
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	619a      	str	r2, [r3, #24]
      break;
 8002748:	e041      	b.n	80027ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68b9      	ldr	r1, [r7, #8]
 8002750:	4618      	mov	r0, r3
 8002752:	f000 f9a3 	bl	8002a9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69da      	ldr	r2, [r3, #28]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 0208 	orr.w	r2, r2, #8
 8002764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69da      	ldr	r2, [r3, #28]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0204 	bic.w	r2, r2, #4
 8002774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	69d9      	ldr	r1, [r3, #28]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	61da      	str	r2, [r3, #28]
      break;
 8002788:	e021      	b.n	80027ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68b9      	ldr	r1, [r7, #8]
 8002790:	4618      	mov	r0, r3
 8002792:	f000 f9f7 	bl	8002b84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	69da      	ldr	r2, [r3, #28]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	69da      	ldr	r2, [r3, #28]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	69d9      	ldr	r1, [r3, #28]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	021a      	lsls	r2, r3, #8
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	61da      	str	r2, [r3, #28]
      break;
 80027ca:	e000      	b.n	80027ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80027cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a33      	ldr	r2, [pc, #204]	; (80028c0 <TIM_Base_SetConfig+0xe0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d013      	beq.n	8002820 <TIM_Base_SetConfig+0x40>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a32      	ldr	r2, [pc, #200]	; (80028c4 <TIM_Base_SetConfig+0xe4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00f      	beq.n	8002820 <TIM_Base_SetConfig+0x40>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002806:	d00b      	beq.n	8002820 <TIM_Base_SetConfig+0x40>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a2f      	ldr	r2, [pc, #188]	; (80028c8 <TIM_Base_SetConfig+0xe8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d007      	beq.n	8002820 <TIM_Base_SetConfig+0x40>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a2e      	ldr	r2, [pc, #184]	; (80028cc <TIM_Base_SetConfig+0xec>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d003      	beq.n	8002820 <TIM_Base_SetConfig+0x40>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a2d      	ldr	r2, [pc, #180]	; (80028d0 <TIM_Base_SetConfig+0xf0>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d108      	bne.n	8002832 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a22      	ldr	r2, [pc, #136]	; (80028c0 <TIM_Base_SetConfig+0xe0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d013      	beq.n	8002862 <TIM_Base_SetConfig+0x82>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a21      	ldr	r2, [pc, #132]	; (80028c4 <TIM_Base_SetConfig+0xe4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00f      	beq.n	8002862 <TIM_Base_SetConfig+0x82>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002848:	d00b      	beq.n	8002862 <TIM_Base_SetConfig+0x82>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a1e      	ldr	r2, [pc, #120]	; (80028c8 <TIM_Base_SetConfig+0xe8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d007      	beq.n	8002862 <TIM_Base_SetConfig+0x82>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <TIM_Base_SetConfig+0xec>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d003      	beq.n	8002862 <TIM_Base_SetConfig+0x82>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a1c      	ldr	r2, [pc, #112]	; (80028d0 <TIM_Base_SetConfig+0xf0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d108      	bne.n	8002874 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4313      	orrs	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	4313      	orrs	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a09      	ldr	r2, [pc, #36]	; (80028c0 <TIM_Base_SetConfig+0xe0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d003      	beq.n	80028a8 <TIM_Base_SetConfig+0xc8>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a08      	ldr	r2, [pc, #32]	; (80028c4 <TIM_Base_SetConfig+0xe4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d103      	bne.n	80028b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	615a      	str	r2, [r3, #20]
}
 80028b6:	bf00      	nop
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr
 80028c0:	40012c00 	.word	0x40012c00
 80028c4:	40013400 	.word	0x40013400
 80028c8:	40000400 	.word	0x40000400
 80028cc:	40000800 	.word	0x40000800
 80028d0:	40000c00 	.word	0x40000c00

080028d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	f023 0201 	bic.w	r2, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f023 0303 	bic.w	r3, r3, #3
 800290a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f023 0302 	bic.w	r3, r3, #2
 800291c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4313      	orrs	r3, r2
 8002926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a20      	ldr	r2, [pc, #128]	; (80029ac <TIM_OC1_SetConfig+0xd8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d003      	beq.n	8002938 <TIM_OC1_SetConfig+0x64>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a1f      	ldr	r2, [pc, #124]	; (80029b0 <TIM_OC1_SetConfig+0xdc>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d10c      	bne.n	8002952 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f023 0308 	bic.w	r3, r3, #8
 800293e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f023 0304 	bic.w	r3, r3, #4
 8002950:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a15      	ldr	r2, [pc, #84]	; (80029ac <TIM_OC1_SetConfig+0xd8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d003      	beq.n	8002962 <TIM_OC1_SetConfig+0x8e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a14      	ldr	r2, [pc, #80]	; (80029b0 <TIM_OC1_SetConfig+0xdc>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d111      	bne.n	8002986 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	621a      	str	r2, [r3, #32]
}
 80029a0:	bf00      	nop
 80029a2:	371c      	adds	r7, #28
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40012c00 	.word	0x40012c00
 80029b0:	40013400 	.word	0x40013400

080029b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	f023 0210 	bic.w	r2, r3, #16
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	021b      	lsls	r3, r3, #8
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f023 0320 	bic.w	r3, r3, #32
 80029fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a21      	ldr	r2, [pc, #132]	; (8002a94 <TIM_OC2_SetConfig+0xe0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d003      	beq.n	8002a1c <TIM_OC2_SetConfig+0x68>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a20      	ldr	r2, [pc, #128]	; (8002a98 <TIM_OC2_SetConfig+0xe4>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d10d      	bne.n	8002a38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a16      	ldr	r2, [pc, #88]	; (8002a94 <TIM_OC2_SetConfig+0xe0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d003      	beq.n	8002a48 <TIM_OC2_SetConfig+0x94>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a15      	ldr	r2, [pc, #84]	; (8002a98 <TIM_OC2_SetConfig+0xe4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d113      	bne.n	8002a70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	621a      	str	r2, [r3, #32]
}
 8002a8a:	bf00      	nop
 8002a8c:	371c      	adds	r7, #28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	40012c00 	.word	0x40012c00
 8002a98:	40013400 	.word	0x40013400

08002a9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f023 0303 	bic.w	r3, r3, #3
 8002ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	021b      	lsls	r3, r3, #8
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a21      	ldr	r2, [pc, #132]	; (8002b7c <TIM_OC3_SetConfig+0xe0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d003      	beq.n	8002b02 <TIM_OC3_SetConfig+0x66>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a20      	ldr	r2, [pc, #128]	; (8002b80 <TIM_OC3_SetConfig+0xe4>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d10d      	bne.n	8002b1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	021b      	lsls	r3, r3, #8
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a16      	ldr	r2, [pc, #88]	; (8002b7c <TIM_OC3_SetConfig+0xe0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d003      	beq.n	8002b2e <TIM_OC3_SetConfig+0x92>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a15      	ldr	r2, [pc, #84]	; (8002b80 <TIM_OC3_SetConfig+0xe4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d113      	bne.n	8002b56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	621a      	str	r2, [r3, #32]
}
 8002b70:	bf00      	nop
 8002b72:	371c      	adds	r7, #28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40012c00 	.word	0x40012c00
 8002b80:	40013400 	.word	0x40013400

08002b84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	021b      	lsls	r3, r3, #8
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	031b      	lsls	r3, r3, #12
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a11      	ldr	r2, [pc, #68]	; (8002c24 <TIM_OC4_SetConfig+0xa0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d003      	beq.n	8002bec <TIM_OC4_SetConfig+0x68>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a10      	ldr	r2, [pc, #64]	; (8002c28 <TIM_OC4_SetConfig+0xa4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d109      	bne.n	8002c00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	019b      	lsls	r3, r3, #6
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	621a      	str	r2, [r3, #32]
}
 8002c1a:	bf00      	nop
 8002c1c:	371c      	adds	r7, #28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr
 8002c24:	40012c00 	.word	0x40012c00
 8002c28:	40013400 	.word	0x40013400

08002c2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e050      	b.n	8002ce6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a1b      	ldr	r2, [pc, #108]	; (8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d018      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a19      	ldr	r2, [pc, #100]	; (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d013      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9a:	d00e      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a15      	ldr	r2, [pc, #84]	; (8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d009      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a14      	ldr	r2, [pc, #80]	; (8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d004      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr
 8002cf0:	40012c00 	.word	0x40012c00
 8002cf4:	40013400 	.word	0x40013400
 8002cf8:	40000400 	.word	0x40000400
 8002cfc:	40000800 	.word	0x40000800
 8002d00:	40000c00 	.word	0x40000c00

08002d04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e03d      	b.n	8002d9c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr

08002da6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e03f      	b.n	8002e38 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d106      	bne.n	8002dd2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7fe fb77 	bl	80014c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2224      	movs	r2, #36	; 0x24
 8002dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002de8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f904 	bl	8002ff8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691a      	ldr	r2, [r3, #16]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dfe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e0e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e1e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	; 0x28
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	d17c      	bne.n	8002f5a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <HAL_UART_Transmit+0x2c>
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e075      	b.n	8002f5c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_UART_Transmit+0x3e>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e06e      	b.n	8002f5c <HAL_UART_Transmit+0x11c>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2221      	movs	r2, #33	; 0x21
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e94:	f7fe fc5a 	bl	800174c <HAL_GetTick>
 8002e98:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	88fa      	ldrh	r2, [r7, #6]
 8002e9e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	88fa      	ldrh	r2, [r7, #6]
 8002ea4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eae:	d108      	bne.n	8002ec2 <HAL_UART_Transmit+0x82>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d104      	bne.n	8002ec2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	61bb      	str	r3, [r7, #24]
 8002ec0:	e003      	b.n	8002eca <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ed2:	e02a      	b.n	8002f2a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2200      	movs	r2, #0
 8002edc:	2180      	movs	r1, #128	; 0x80
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f840 	bl	8002f64 <UART_WaitOnFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e036      	b.n	8002f5c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10b      	bne.n	8002f0c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f02:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	3302      	adds	r3, #2
 8002f08:	61bb      	str	r3, [r7, #24]
 8002f0a:	e007      	b.n	8002f1c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	781a      	ldrb	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1cf      	bne.n	8002ed4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2140      	movs	r1, #64	; 0x40
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f810 	bl	8002f64 <UART_WaitOnFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e006      	b.n	8002f5c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	e000      	b.n	8002f5c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f5a:	2302      	movs	r3, #2
  }
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3720      	adds	r7, #32
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	4613      	mov	r3, r2
 8002f72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f74:	e02c      	b.n	8002fd0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d028      	beq.n	8002fd0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d007      	beq.n	8002f94 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f84:	f7fe fbe2 	bl	800174c <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d21d      	bcs.n	8002fd0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fa2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0201 	bic.w	r2, r2, #1
 8002fb2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e00f      	b.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d0c3      	beq.n	8002f76 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	4313      	orrs	r3, r2
 8003026:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003032:	f023 030c 	bic.w	r3, r3, #12
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	68b9      	ldr	r1, [r7, #8]
 800303c:	430b      	orrs	r3, r1
 800303e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a2c      	ldr	r2, [pc, #176]	; (800310c <UART_SetConfig+0x114>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d103      	bne.n	8003068 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003060:	f7ff fa32 	bl	80024c8 <HAL_RCC_GetPCLK2Freq>
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	e002      	b.n	800306e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003068:	f7ff fa1a 	bl	80024a0 <HAL_RCC_GetPCLK1Freq>
 800306c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	009a      	lsls	r2, r3, #2
 8003078:	441a      	add	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	fbb2 f3f3 	udiv	r3, r2, r3
 8003084:	4a22      	ldr	r2, [pc, #136]	; (8003110 <UART_SetConfig+0x118>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	0119      	lsls	r1, r3, #4
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	009a      	lsls	r2, r3, #2
 8003098:	441a      	add	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030a4:	4b1a      	ldr	r3, [pc, #104]	; (8003110 <UART_SetConfig+0x118>)
 80030a6:	fba3 0302 	umull	r0, r3, r3, r2
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	2064      	movs	r0, #100	; 0x64
 80030ae:	fb00 f303 	mul.w	r3, r0, r3
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	3332      	adds	r3, #50	; 0x32
 80030b8:	4a15      	ldr	r2, [pc, #84]	; (8003110 <UART_SetConfig+0x118>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030c4:	4419      	add	r1, r3
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	009a      	lsls	r2, r3, #2
 80030d0:	441a      	add	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030dc:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <UART_SetConfig+0x118>)
 80030de:	fba3 0302 	umull	r0, r3, r3, r2
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	2064      	movs	r0, #100	; 0x64
 80030e6:	fb00 f303 	mul.w	r3, r0, r3
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	3332      	adds	r3, #50	; 0x32
 80030f0:	4a07      	ldr	r2, [pc, #28]	; (8003110 <UART_SetConfig+0x118>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	f003 020f 	and.w	r2, r3, #15
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	440a      	add	r2, r1
 8003102:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003104:	bf00      	nop
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40013800 	.word	0x40013800
 8003110:	51eb851f 	.word	0x51eb851f

08003114 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	f023 0101 	bic.w	r1, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b08      	cmp	r3, #8
 800313c:	d102      	bne.n	8003144 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800313e:	2340      	movs	r3, #64	; 0x40
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	e001      	b.n	8003148 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8003154:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800315a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8003160:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8003166:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800316c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8003172:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8003178:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800317e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8003184:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 80031a2:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <FSMC_NORSRAM_Init+0xd0>)
 80031a4:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031ac:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80031b4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	43db      	mvns	r3, r3
 80031c4:	ea02 0103 	and.w	r1, r2, r3
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4319      	orrs	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	371c      	adds	r7, #28
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	0008fb7f 	.word	0x0008fb7f

080031e8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	1c5a      	adds	r2, r3, #1
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031fe:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	431a      	orrs	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	021b      	lsls	r3, r3, #8
 8003214:	431a      	orrs	r2, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	041b      	lsls	r3, r3, #16
 800321c:	431a      	orrs	r2, r3
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	3b01      	subs	r3, #1
 8003224:	051b      	lsls	r3, r3, #20
 8003226:	431a      	orrs	r2, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	3b02      	subs	r3, #2
 800322e:	061b      	lsls	r3, r3, #24
 8003230:	431a      	orrs	r2, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	4313      	orrs	r3, r2
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	3201      	adds	r2, #1
 800323c:	4319      	orrs	r1, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
 800325c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003264:	d11d      	bne.n	80032a2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800326e:	4b13      	ldr	r3, [pc, #76]	; (80032bc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8003270:	4013      	ands	r3, r2
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	6811      	ldr	r1, [r2, #0]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	6852      	ldr	r2, [r2, #4]
 800327a:	0112      	lsls	r2, r2, #4
 800327c:	4311      	orrs	r1, r2
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	6892      	ldr	r2, [r2, #8]
 8003282:	0212      	lsls	r2, r2, #8
 8003284:	4311      	orrs	r1, r2
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	6992      	ldr	r2, [r2, #24]
 800328a:	4311      	orrs	r1, r2
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	68d2      	ldr	r2, [r2, #12]
 8003290:	0412      	lsls	r2, r2, #16
 8003292:	430a      	orrs	r2, r1
 8003294:	ea43 0102 	orr.w	r1, r3, r2
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80032a0:	e005      	b.n	80032ae <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80032aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	cff00000 	.word	0xcff00000

080032c0 <__libc_init_array>:
 80032c0:	b570      	push	{r4, r5, r6, lr}
 80032c2:	2600      	movs	r6, #0
 80032c4:	4d0c      	ldr	r5, [pc, #48]	; (80032f8 <__libc_init_array+0x38>)
 80032c6:	4c0d      	ldr	r4, [pc, #52]	; (80032fc <__libc_init_array+0x3c>)
 80032c8:	1b64      	subs	r4, r4, r5
 80032ca:	10a4      	asrs	r4, r4, #2
 80032cc:	42a6      	cmp	r6, r4
 80032ce:	d109      	bne.n	80032e4 <__libc_init_array+0x24>
 80032d0:	f000 f822 	bl	8003318 <_init>
 80032d4:	2600      	movs	r6, #0
 80032d6:	4d0a      	ldr	r5, [pc, #40]	; (8003300 <__libc_init_array+0x40>)
 80032d8:	4c0a      	ldr	r4, [pc, #40]	; (8003304 <__libc_init_array+0x44>)
 80032da:	1b64      	subs	r4, r4, r5
 80032dc:	10a4      	asrs	r4, r4, #2
 80032de:	42a6      	cmp	r6, r4
 80032e0:	d105      	bne.n	80032ee <__libc_init_array+0x2e>
 80032e2:	bd70      	pop	{r4, r5, r6, pc}
 80032e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032e8:	4798      	blx	r3
 80032ea:	3601      	adds	r6, #1
 80032ec:	e7ee      	b.n	80032cc <__libc_init_array+0xc>
 80032ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80032f2:	4798      	blx	r3
 80032f4:	3601      	adds	r6, #1
 80032f6:	e7f2      	b.n	80032de <__libc_init_array+0x1e>
 80032f8:	08003ac4 	.word	0x08003ac4
 80032fc:	08003ac4 	.word	0x08003ac4
 8003300:	08003ac4 	.word	0x08003ac4
 8003304:	08003ac8 	.word	0x08003ac8

08003308 <memset>:
 8003308:	4603      	mov	r3, r0
 800330a:	4402      	add	r2, r0
 800330c:	4293      	cmp	r3, r2
 800330e:	d100      	bne.n	8003312 <memset+0xa>
 8003310:	4770      	bx	lr
 8003312:	f803 1b01 	strb.w	r1, [r3], #1
 8003316:	e7f9      	b.n	800330c <memset+0x4>

08003318 <_init>:
 8003318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331a:	bf00      	nop
 800331c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331e:	bc08      	pop	{r3}
 8003320:	469e      	mov	lr, r3
 8003322:	4770      	bx	lr

08003324 <_fini>:
 8003324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003326:	bf00      	nop
 8003328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800332a:	bc08      	pop	{r3}
 800332c:	469e      	mov	lr, r3
 800332e:	4770      	bx	lr
