
ELEC3300_project_jubeat_imitate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003058  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000079c  0800323c  0800323c  0001323c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039d8  080039d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080039d8  080039d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039d8  080039d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039d8  080039d8  000139d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039dc  080039dc  000139dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080039e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  080039ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080039ec  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccd9  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d1  00000000  00000000  0002cd0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  0002eee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  0002fdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aecc  00000000  00000000  00030bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcff  00000000  00000000  0004bac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009be53  00000000  00000000  0005b7c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7616  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dec  00000000  00000000  000f7668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08003224 	.word	0x08003224

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08003224 	.word	0x08003224

08000224 <an_apple_LCD>:

#include "blank_space.h"
#include "dy_sv17f.h"
#include "lcd.h"

void an_apple_LCD(void) {
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af02      	add	r7, sp, #8
			LCD_Clear(0, 0, 240, 320, WHITE);
 800022a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800022e:	9300      	str	r3, [sp, #0]
 8000230:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000234:	22f0      	movs	r2, #240	; 0xf0
 8000236:	2100      	movs	r1, #0
 8000238:	2000      	movs	r0, #0
 800023a:	f000 fa90 	bl	800075e <LCD_Clear>
		  LCD_DrawString(60,50,"An Apple");
 800023e:	4a10      	ldr	r2, [pc, #64]	; (8000280 <an_apple_LCD+0x5c>)
 8000240:	2132      	movs	r1, #50	; 0x32
 8000242:	203c      	movs	r0, #60	; 0x3c
 8000244:	f000 faf4 	bl	8000830 <LCD_DrawString>
		  LCD_DrawString(100,80,"-- Mayday ");
 8000248:	4a0e      	ldr	r2, [pc, #56]	; (8000284 <an_apple_LCD+0x60>)
 800024a:	2150      	movs	r1, #80	; 0x50
 800024c:	2064      	movs	r0, #100	; 0x64
 800024e:	f000 faef 	bl	8000830 <LCD_DrawString>
		  LCD_DrawString(20,110,"Difficulty: Normal");
 8000252:	4a0d      	ldr	r2, [pc, #52]	; (8000288 <an_apple_LCD+0x64>)
 8000254:	216e      	movs	r1, #110	; 0x6e
 8000256:	2014      	movs	r0, #20
 8000258:	f000 faea 	bl	8000830 <LCD_DrawString>
		  LCD_DrawString(20,130,"Score: 0000");
 800025c:	4a0b      	ldr	r2, [pc, #44]	; (800028c <an_apple_LCD+0x68>)
 800025e:	2182      	movs	r1, #130	; 0x82
 8000260:	2014      	movs	r0, #20
 8000262:	f000 fae5 	bl	8000830 <LCD_DrawString>
		  LCD_DrawString(100,170,"Playing");
 8000266:	4a0a      	ldr	r2, [pc, #40]	; (8000290 <an_apple_LCD+0x6c>)
 8000268:	21aa      	movs	r1, #170	; 0xaa
 800026a:	2064      	movs	r0, #100	; 0x64
 800026c:	f000 fae0 	bl	8000830 <LCD_DrawString>
		  LCD_DrawString(200,200," ");
 8000270:	4a08      	ldr	r2, [pc, #32]	; (8000294 <an_apple_LCD+0x70>)
 8000272:	21c8      	movs	r1, #200	; 0xc8
 8000274:	20c8      	movs	r0, #200	; 0xc8
 8000276:	f000 fadb 	bl	8000830 <LCD_DrawString>
}
 800027a:	bf00      	nop
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	0800323c 	.word	0x0800323c
 8000284:	08003248 	.word	0x08003248
 8000288:	08003254 	.word	0x08003254
 800028c:	08003268 	.word	0x08003268
 8000290:	08003274 	.word	0x08003274
 8000294:	0800327c 	.word	0x0800327c

08000298 <blank_space_LCD>:
#include "blank_space.h"
#include "dy_sv17f.h"
#include "lcd.h"
#include "led_blink.h"

void blank_space_LCD(void) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af02      	add	r7, sp, #8
		  LCD_Clear(0, 0, 240, 320, WHITE);
 800029e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002a2:	9300      	str	r3, [sp, #0]
 80002a4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80002a8:	22f0      	movs	r2, #240	; 0xf0
 80002aa:	2100      	movs	r1, #0
 80002ac:	2000      	movs	r0, #0
 80002ae:	f000 fa56 	bl	800075e <LCD_Clear>
		  LCD_DrawString(60,50,"Blank Space");
 80002b2:	4a10      	ldr	r2, [pc, #64]	; (80002f4 <blank_space_LCD+0x5c>)
 80002b4:	2132      	movs	r1, #50	; 0x32
 80002b6:	203c      	movs	r0, #60	; 0x3c
 80002b8:	f000 faba 	bl	8000830 <LCD_DrawString>
		  LCD_DrawString(100,80,"--Taylor Swift ");
 80002bc:	4a0e      	ldr	r2, [pc, #56]	; (80002f8 <blank_space_LCD+0x60>)
 80002be:	2150      	movs	r1, #80	; 0x50
 80002c0:	2064      	movs	r0, #100	; 0x64
 80002c2:	f000 fab5 	bl	8000830 <LCD_DrawString>
		  LCD_DrawString(20,110,"Difficulty: Easy");
 80002c6:	4a0d      	ldr	r2, [pc, #52]	; (80002fc <blank_space_LCD+0x64>)
 80002c8:	216e      	movs	r1, #110	; 0x6e
 80002ca:	2014      	movs	r0, #20
 80002cc:	f000 fab0 	bl	8000830 <LCD_DrawString>
		  LCD_DrawString(20,130,"Score: 0000");
 80002d0:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <blank_space_LCD+0x68>)
 80002d2:	2182      	movs	r1, #130	; 0x82
 80002d4:	2014      	movs	r0, #20
 80002d6:	f000 faab 	bl	8000830 <LCD_DrawString>
		  LCD_DrawString(100,170,"Playing");
 80002da:	4a0a      	ldr	r2, [pc, #40]	; (8000304 <blank_space_LCD+0x6c>)
 80002dc:	21aa      	movs	r1, #170	; 0xaa
 80002de:	2064      	movs	r0, #100	; 0x64
 80002e0:	f000 faa6 	bl	8000830 <LCD_DrawString>
		  LCD_DrawString(200,200," ");
 80002e4:	4a08      	ldr	r2, [pc, #32]	; (8000308 <blank_space_LCD+0x70>)
 80002e6:	21c8      	movs	r1, #200	; 0xc8
 80002e8:	20c8      	movs	r0, #200	; 0xc8
 80002ea:	f000 faa1 	bl	8000830 <LCD_DrawString>

}
 80002ee:	bf00      	nop
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	08003280 	.word	0x08003280
 80002f8:	0800328c 	.word	0x0800328c
 80002fc:	0800329c 	.word	0x0800329c
 8000300:	080032b0 	.word	0x080032b0
 8000304:	080032bc 	.word	0x080032bc
 8000308:	080032c4 	.word	0x080032c4

0800030c <blank_space_musicMap>:

void blank_space_musicMap(void) {
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	Blink_LED1(0);
 8000310:	2000      	movs	r0, #0
 8000312:	f000 fabd 	bl	8000890 <Blink_LED1>
	Blink_LED2(0);
 8000316:	2000      	movs	r0, #0
 8000318:	f000 fb30 	bl	800097c <Blink_LED2>
	Blink_LED3(0);
 800031c:	2000      	movs	r0, #0
 800031e:	f000 fba3 	bl	8000a68 <Blink_LED3>
	Blink_LED4(0);
 8000322:	2000      	movs	r0, #0
 8000324:	f000 fc1e 	bl	8000b64 <Blink_LED4>
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}

0800032c <DY_Init>:
    cmd[length - 1] = checksum;

    HAL_UART_Transmit(DYuart, cmd, length, 1000);
}

void DY_Init(UART_HandleTypeDef *huart) {
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
    DYuart = huart;
 8000334:	4a03      	ldr	r2, [pc, #12]	; (8000344 <DY_Init+0x18>)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	6013      	str	r3, [r2, #0]
}
 800033a:	bf00      	nop
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr
 8000344:	20000028 	.word	0x20000028

08000348 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	e002      	b.n	8000358 <Delay+0x10>
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	3b01      	subs	r3, #1
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d1f9      	bne.n	8000352 <Delay+0xa>
 800035e:	bf00      	nop
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr

0800036a <LCD_INIT>:

void LCD_INIT ( void )
{
 800036a:	b580      	push	{r7, lr}
 800036c:	b082      	sub	sp, #8
 800036e:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000370:	2001      	movs	r0, #1
 8000372:	f000 f829 	bl	80003c8 <LCD_BackLed_Control>
	LCD_Rst();
 8000376:	f000 f80f 	bl	8000398 <LCD_Rst>
	LCD_REG_Config();
 800037a:	f000 f85f 	bl	800043c <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800037e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000382:	9300      	str	r3, [sp, #0]
 8000384:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000388:	22f0      	movs	r2, #240	; 0xf0
 800038a:	2100      	movs	r1, #0
 800038c:	2000      	movs	r0, #0
 800038e:	f000 f9e6 	bl	800075e <LCD_Clear>
}
 8000392:	bf00      	nop
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}

08000398 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	2102      	movs	r1, #2
 80003a0:	4807      	ldr	r0, [pc, #28]	; (80003c0 <LCD_Rst+0x28>)
 80003a2:	f001 fc16 	bl	8001bd2 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 80003a6:	4807      	ldr	r0, [pc, #28]	; (80003c4 <LCD_Rst+0x2c>)
 80003a8:	f7ff ffce 	bl	8000348 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2102      	movs	r1, #2
 80003b0:	4803      	ldr	r0, [pc, #12]	; (80003c0 <LCD_Rst+0x28>)
 80003b2:	f001 fc0e 	bl	8001bd2 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 80003b6:	4803      	ldr	r0, [pc, #12]	; (80003c4 <LCD_Rst+0x2c>)
 80003b8:	f7ff ffc6 	bl	8000348 <Delay>
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40011800 	.word	0x40011800
 80003c4:	0002bffc 	.word	0x0002bffc

080003c8 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d006      	beq.n	80003e6 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80003d8:	2200      	movs	r2, #0
 80003da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003de:	4807      	ldr	r0, [pc, #28]	; (80003fc <LCD_BackLed_Control+0x34>)
 80003e0:	f001 fbf7 	bl	8001bd2 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80003e4:	e005      	b.n	80003f2 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80003e6:	2201      	movs	r2, #1
 80003e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ec:	4803      	ldr	r0, [pc, #12]	; (80003fc <LCD_BackLed_Control+0x34>)
 80003ee:	f001 fbf0 	bl	8001bd2 <HAL_GPIO_WritePin>
}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40011400 	.word	0x40011400

08000400 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800040a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800040e:	88fb      	ldrh	r3, [r7, #6]
 8000410:	8013      	strh	r3, [r2, #0]
}
 8000412:	bf00      	nop
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr

0800041c <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000426:	4a04      	ldr	r2, [pc, #16]	; (8000438 <LCD_Write_Data+0x1c>)
 8000428:	88fb      	ldrh	r3, [r7, #6]
 800042a:	8013      	strh	r3, [r2, #0]
}
 800042c:	bf00      	nop
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	60020000 	.word	0x60020000

0800043c <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000440:	20cf      	movs	r0, #207	; 0xcf
 8000442:	f7ff ffdd 	bl	8000400 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000446:	2000      	movs	r0, #0
 8000448:	f7ff ffe8 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 800044c:	2081      	movs	r0, #129	; 0x81
 800044e:	f7ff ffe5 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000452:	2030      	movs	r0, #48	; 0x30
 8000454:	f7ff ffe2 	bl	800041c <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000458:	20ed      	movs	r0, #237	; 0xed
 800045a:	f7ff ffd1 	bl	8000400 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800045e:	2064      	movs	r0, #100	; 0x64
 8000460:	f7ff ffdc 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000464:	2003      	movs	r0, #3
 8000466:	f7ff ffd9 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 800046a:	2012      	movs	r0, #18
 800046c:	f7ff ffd6 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000470:	2081      	movs	r0, #129	; 0x81
 8000472:	f7ff ffd3 	bl	800041c <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000476:	20e8      	movs	r0, #232	; 0xe8
 8000478:	f7ff ffc2 	bl	8000400 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 800047c:	2085      	movs	r0, #133	; 0x85
 800047e:	f7ff ffcd 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000482:	2010      	movs	r0, #16
 8000484:	f7ff ffca 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000488:	2078      	movs	r0, #120	; 0x78
 800048a:	f7ff ffc7 	bl	800041c <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800048e:	20cb      	movs	r0, #203	; 0xcb
 8000490:	f7ff ffb6 	bl	8000400 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000494:	2039      	movs	r0, #57	; 0x39
 8000496:	f7ff ffc1 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 800049a:	202c      	movs	r0, #44	; 0x2c
 800049c:	f7ff ffbe 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80004a0:	2000      	movs	r0, #0
 80004a2:	f7ff ffbb 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 80004a6:	2034      	movs	r0, #52	; 0x34
 80004a8:	f7ff ffb8 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 80004ac:	2002      	movs	r0, #2
 80004ae:	f7ff ffb5 	bl	800041c <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 80004b2:	20f7      	movs	r0, #247	; 0xf7
 80004b4:	f7ff ffa4 	bl	8000400 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 80004b8:	2020      	movs	r0, #32
 80004ba:	f7ff ffaf 	bl	800041c <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 80004be:	20ea      	movs	r0, #234	; 0xea
 80004c0:	f7ff ff9e 	bl	8000400 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80004c4:	2000      	movs	r0, #0
 80004c6:	f7ff ffa9 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80004ca:	2000      	movs	r0, #0
 80004cc:	f7ff ffa6 	bl	800041c <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80004d0:	20b1      	movs	r0, #177	; 0xb1
 80004d2:	f7ff ff95 	bl	8000400 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80004d6:	2000      	movs	r0, #0
 80004d8:	f7ff ffa0 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80004dc:	201b      	movs	r0, #27
 80004de:	f7ff ff9d 	bl	800041c <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80004e2:	20b6      	movs	r0, #182	; 0xb6
 80004e4:	f7ff ff8c 	bl	8000400 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80004e8:	200a      	movs	r0, #10
 80004ea:	f7ff ff97 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80004ee:	20a2      	movs	r0, #162	; 0xa2
 80004f0:	f7ff ff94 	bl	800041c <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80004f4:	20c0      	movs	r0, #192	; 0xc0
 80004f6:	f7ff ff83 	bl	8000400 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80004fa:	2035      	movs	r0, #53	; 0x35
 80004fc:	f7ff ff8e 	bl	800041c <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000500:	20c1      	movs	r0, #193	; 0xc1
 8000502:	f7ff ff7d 	bl	8000400 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000506:	2011      	movs	r0, #17
 8000508:	f7ff ff88 	bl	800041c <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 800050c:	20c5      	movs	r0, #197	; 0xc5
 800050e:	f7ff ff77 	bl	8000400 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000512:	2045      	movs	r0, #69	; 0x45
 8000514:	f7ff ff82 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000518:	2045      	movs	r0, #69	; 0x45
 800051a:	f7ff ff7f 	bl	800041c <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800051e:	20c7      	movs	r0, #199	; 0xc7
 8000520:	f7ff ff6e 	bl	8000400 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000524:	20a2      	movs	r0, #162	; 0xa2
 8000526:	f7ff ff79 	bl	800041c <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 800052a:	20f2      	movs	r0, #242	; 0xf2
 800052c:	f7ff ff68 	bl	8000400 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000530:	2000      	movs	r0, #0
 8000532:	f7ff ff73 	bl	800041c <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000536:	2026      	movs	r0, #38	; 0x26
 8000538:	f7ff ff62 	bl	8000400 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 800053c:	2001      	movs	r0, #1
 800053e:	f7ff ff6d 	bl	800041c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000542:	20e0      	movs	r0, #224	; 0xe0
 8000544:	f7ff ff5c 	bl	8000400 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000548:	200f      	movs	r0, #15
 800054a:	f7ff ff67 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800054e:	2026      	movs	r0, #38	; 0x26
 8000550:	f7ff ff64 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000554:	2024      	movs	r0, #36	; 0x24
 8000556:	f7ff ff61 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 800055a:	200b      	movs	r0, #11
 800055c:	f7ff ff5e 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000560:	200e      	movs	r0, #14
 8000562:	f7ff ff5b 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000566:	2009      	movs	r0, #9
 8000568:	f7ff ff58 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 800056c:	2054      	movs	r0, #84	; 0x54
 800056e:	f7ff ff55 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8000572:	20a8      	movs	r0, #168	; 0xa8
 8000574:	f7ff ff52 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000578:	2046      	movs	r0, #70	; 0x46
 800057a:	f7ff ff4f 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800057e:	200c      	movs	r0, #12
 8000580:	f7ff ff4c 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000584:	2017      	movs	r0, #23
 8000586:	f7ff ff49 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800058a:	2009      	movs	r0, #9
 800058c:	f7ff ff46 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000590:	200f      	movs	r0, #15
 8000592:	f7ff ff43 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000596:	2007      	movs	r0, #7
 8000598:	f7ff ff40 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800059c:	2000      	movs	r0, #0
 800059e:	f7ff ff3d 	bl	800041c <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 80005a2:	20e1      	movs	r0, #225	; 0xe1
 80005a4:	f7ff ff2c 	bl	8000400 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80005a8:	2000      	movs	r0, #0
 80005aa:	f7ff ff37 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 80005ae:	2019      	movs	r0, #25
 80005b0:	f7ff ff34 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80005b4:	201b      	movs	r0, #27
 80005b6:	f7ff ff31 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 80005ba:	2004      	movs	r0, #4
 80005bc:	f7ff ff2e 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80005c0:	2010      	movs	r0, #16
 80005c2:	f7ff ff2b 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80005c6:	2007      	movs	r0, #7
 80005c8:	f7ff ff28 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80005cc:	202a      	movs	r0, #42	; 0x2a
 80005ce:	f7ff ff25 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80005d2:	2047      	movs	r0, #71	; 0x47
 80005d4:	f7ff ff22 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80005d8:	2039      	movs	r0, #57	; 0x39
 80005da:	f7ff ff1f 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80005de:	2003      	movs	r0, #3
 80005e0:	f7ff ff1c 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80005e4:	2006      	movs	r0, #6
 80005e6:	f7ff ff19 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80005ea:	2006      	movs	r0, #6
 80005ec:	f7ff ff16 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80005f0:	2030      	movs	r0, #48	; 0x30
 80005f2:	f7ff ff13 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80005f6:	2038      	movs	r0, #56	; 0x38
 80005f8:	f7ff ff10 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80005fc:	200f      	movs	r0, #15
 80005fe:	f7ff ff0d 	bl	800041c <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000602:	2036      	movs	r0, #54	; 0x36
 8000604:	f7ff fefc 	bl	8000400 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8000608:	20c8      	movs	r0, #200	; 0xc8
 800060a:	f7ff ff07 	bl	800041c <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 800060e:	202a      	movs	r0, #42	; 0x2a
 8000610:	f7ff fef6 	bl	8000400 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000614:	2000      	movs	r0, #0
 8000616:	f7ff ff01 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800061a:	2000      	movs	r0, #0
 800061c:	f7ff fefe 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff fefb 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000626:	20ef      	movs	r0, #239	; 0xef
 8000628:	f7ff fef8 	bl	800041c <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 800062c:	202b      	movs	r0, #43	; 0x2b
 800062e:	f7ff fee7 	bl	8000400 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000632:	2000      	movs	r0, #0
 8000634:	f7ff fef2 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000638:	2000      	movs	r0, #0
 800063a:	f7ff feef 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800063e:	2001      	movs	r0, #1
 8000640:	f7ff feec 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000644:	203f      	movs	r0, #63	; 0x3f
 8000646:	f7ff fee9 	bl	800041c <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 800064a:	203a      	movs	r0, #58	; 0x3a
 800064c:	f7ff fed8 	bl	8000400 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000650:	2055      	movs	r0, #85	; 0x55
 8000652:	f7ff fee3 	bl	800041c <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000656:	2011      	movs	r0, #17
 8000658:	f7ff fed2 	bl	8000400 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 800065c:	4803      	ldr	r0, [pc, #12]	; (800066c <LCD_REG_Config+0x230>)
 800065e:	f7ff fe73 	bl	8000348 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000662:	2029      	movs	r0, #41	; 0x29
 8000664:	f7ff fecc 	bl	8000400 <LCD_Write_Cmd>
	
	
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	0002bffc 	.word	0x0002bffc

08000670 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4604      	mov	r4, r0
 8000678:	4608      	mov	r0, r1
 800067a:	4611      	mov	r1, r2
 800067c:	461a      	mov	r2, r3
 800067e:	4623      	mov	r3, r4
 8000680:	80fb      	strh	r3, [r7, #6]
 8000682:	4603      	mov	r3, r0
 8000684:	80bb      	strh	r3, [r7, #4]
 8000686:	460b      	mov	r3, r1
 8000688:	807b      	strh	r3, [r7, #2]
 800068a:	4613      	mov	r3, r2
 800068c:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800068e:	202a      	movs	r0, #42	; 0x2a
 8000690:	f7ff feb6 	bl	8000400 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	0a1b      	lsrs	r3, r3, #8
 8000698:	b29b      	uxth	r3, r3
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff febe 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 80006a0:	88fb      	ldrh	r3, [r7, #6]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff feb8 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 80006ac:	88fa      	ldrh	r2, [r7, #6]
 80006ae:	887b      	ldrh	r3, [r7, #2]
 80006b0:	4413      	add	r3, r2
 80006b2:	3b01      	subs	r3, #1
 80006b4:	121b      	asrs	r3, r3, #8
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff feaf 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80006be:	88fa      	ldrh	r2, [r7, #6]
 80006c0:	887b      	ldrh	r3, [r7, #2]
 80006c2:	4413      	add	r3, r2
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	3b01      	subs	r3, #1
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fea4 	bl	800041c <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80006d4:	202b      	movs	r0, #43	; 0x2b
 80006d6:	f7ff fe93 	bl	8000400 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80006da:	88bb      	ldrh	r3, [r7, #4]
 80006dc:	0a1b      	lsrs	r3, r3, #8
 80006de:	b29b      	uxth	r3, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff fe9b 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80006e6:	88bb      	ldrh	r3, [r7, #4]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fe95 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80006f2:	88ba      	ldrh	r2, [r7, #4]
 80006f4:	883b      	ldrh	r3, [r7, #0]
 80006f6:	4413      	add	r3, r2
 80006f8:	3b01      	subs	r3, #1
 80006fa:	121b      	asrs	r3, r3, #8
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff fe8c 	bl	800041c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000704:	88ba      	ldrh	r2, [r7, #4]
 8000706:	883b      	ldrh	r3, [r7, #0]
 8000708:	4413      	add	r3, r2
 800070a:	b29b      	uxth	r3, r3
 800070c:	3b01      	subs	r3, #1
 800070e:	b29b      	uxth	r3, r3
 8000710:	b2db      	uxtb	r3, r3
 8000712:	b29b      	uxth	r3, r3
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fe81 	bl	800041c <LCD_Write_Data>
	
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	bd90      	pop	{r4, r7, pc}

08000722 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000722:	b580      	push	{r7, lr}
 8000724:	b084      	sub	sp, #16
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000732:	202c      	movs	r0, #44	; 0x2c
 8000734:	f7ff fe64 	bl	8000400 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	e006      	b.n	800074c <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800073e:	887b      	ldrh	r3, [r7, #2]
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fe6b 	bl	800041c <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	3301      	adds	r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fa      	ldr	r2, [r7, #12]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	429a      	cmp	r2, r3
 8000752:	d3f4      	bcc.n	800073e <LCD_FillColor+0x1c>
		
}
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 800075e:	b590      	push	{r4, r7, lr}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	4604      	mov	r4, r0
 8000766:	4608      	mov	r0, r1
 8000768:	4611      	mov	r1, r2
 800076a:	461a      	mov	r2, r3
 800076c:	4623      	mov	r3, r4
 800076e:	80fb      	strh	r3, [r7, #6]
 8000770:	4603      	mov	r3, r0
 8000772:	80bb      	strh	r3, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	807b      	strh	r3, [r7, #2]
 8000778:	4613      	mov	r3, r2
 800077a:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 800077c:	883b      	ldrh	r3, [r7, #0]
 800077e:	887a      	ldrh	r2, [r7, #2]
 8000780:	88b9      	ldrh	r1, [r7, #4]
 8000782:	88f8      	ldrh	r0, [r7, #6]
 8000784:	f7ff ff74 	bl	8000670 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000788:	887b      	ldrh	r3, [r7, #2]
 800078a:	883a      	ldrh	r2, [r7, #0]
 800078c:	fb02 f303 	mul.w	r3, r2, r3
 8000790:	461a      	mov	r2, r3
 8000792:	8b3b      	ldrh	r3, [r7, #24]
 8000794:	4619      	mov	r1, r3
 8000796:	4610      	mov	r0, r2
 8000798:	f7ff ffc3 	bl	8000722 <LCD_FillColor>
	
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd90      	pop	{r4, r7, pc}

080007a4 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	80fb      	strh	r3, [r7, #6]
 80007ae:	460b      	mov	r3, r1
 80007b0:	80bb      	strh	r3, [r7, #4]
 80007b2:	4613      	mov	r3, r2
 80007b4:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 80007b6:	78fb      	ldrb	r3, [r7, #3]
 80007b8:	3b20      	subs	r3, #32
 80007ba:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80007bc:	88b9      	ldrh	r1, [r7, #4]
 80007be:	88f8      	ldrh	r0, [r7, #6]
 80007c0:	2310      	movs	r3, #16
 80007c2:	2208      	movs	r2, #8
 80007c4:	f7ff ff54 	bl	8000670 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80007c8:	202c      	movs	r0, #44	; 0x2c
 80007ca:	f7ff fe19 	bl	8000400 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80007ce:	2300      	movs	r3, #0
 80007d0:	73bb      	strb	r3, [r7, #14]
 80007d2:	e023      	b.n	800081c <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80007d4:	7b3a      	ldrb	r2, [r7, #12]
 80007d6:	7bbb      	ldrb	r3, [r7, #14]
 80007d8:	4914      	ldr	r1, [pc, #80]	; (800082c <LCD_DrawChar+0x88>)
 80007da:	0112      	lsls	r2, r2, #4
 80007dc:	440a      	add	r2, r1
 80007de:	4413      	add	r3, r2
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80007e4:	2300      	movs	r3, #0
 80007e6:	737b      	strb	r3, [r7, #13]
 80007e8:	e012      	b.n	8000810 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d003      	beq.n	80007fc <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x0000 );
 80007f4:	2000      	movs	r0, #0
 80007f6:	f7ff fe11 	bl	800041c <LCD_Write_Data>
 80007fa:	e003      	b.n	8000804 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 80007fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000800:	f7ff fe0c 	bl	800041c <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	085b      	lsrs	r3, r3, #1
 8000808:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800080a:	7b7b      	ldrb	r3, [r7, #13]
 800080c:	3301      	adds	r3, #1
 800080e:	737b      	strb	r3, [r7, #13]
 8000810:	7b7b      	ldrb	r3, [r7, #13]
 8000812:	2b07      	cmp	r3, #7
 8000814:	d9e9      	bls.n	80007ea <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000816:	7bbb      	ldrb	r3, [r7, #14]
 8000818:	3301      	adds	r3, #1
 800081a:	73bb      	strb	r3, [r7, #14]
 800081c:	7bbb      	ldrb	r3, [r7, #14]
 800081e:	2b0f      	cmp	r3, #15
 8000820:	d9d8      	bls.n	80007d4 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8000822:	bf00      	nop
 8000824:	bf00      	nop
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	080033d0 	.word	0x080033d0

08000830 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	603a      	str	r2, [r7, #0]
 800083a:	80fb      	strh	r3, [r7, #6]
 800083c:	460b      	mov	r3, r1
 800083e:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8000840:	e01c      	b.n	800087c <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8000842:	88fb      	ldrh	r3, [r7, #6]
 8000844:	2be8      	cmp	r3, #232	; 0xe8
 8000846:	d904      	bls.n	8000852 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000848:	2300      	movs	r3, #0
 800084a:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 800084c:	88bb      	ldrh	r3, [r7, #4]
 800084e:	3310      	adds	r3, #16
 8000850:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8000852:	88bb      	ldrh	r3, [r7, #4]
 8000854:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000858:	d903      	bls.n	8000862 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800085a:	2300      	movs	r3, #0
 800085c:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800085e:	2300      	movs	r3, #0
 8000860:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	781a      	ldrb	r2, [r3, #0]
 8000866:	88b9      	ldrh	r1, [r7, #4]
 8000868:	88fb      	ldrh	r3, [r7, #6]
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff9a 	bl	80007a4 <LCD_DrawChar>
		
		pStr ++;
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	3301      	adds	r3, #1
 8000874:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8000876:	88fb      	ldrh	r3, [r7, #6]
 8000878:	3308      	adds	r3, #8
 800087a:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d1de      	bne.n	8000842 <LCD_DrawString+0x12>
		
	}
	
}
 8000884:	bf00      	nop
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <Blink_LED1>:
uint8_t currentState3 = 0;

uint32_t lastToggleTime4 = 0;
uint8_t currentState4 = 0;

void Blink_LED1(int cycleFinished) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick(); // Get the current time
 8000898:	f000 fede 	bl	8001658 <HAL_GetTick>
 800089c:	60f8      	str	r0, [r7, #12]


    // Change states based on the current time
    if (currentTime - lastToggleTime1 >= 250 && cycleFinished == 0) { // Change every 250 ms
 800089e:	4b33      	ldr	r3, [pc, #204]	; (800096c <Blink_LED1+0xdc>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	2bf9      	cmp	r3, #249	; 0xf9
 80008a8:	d95b      	bls.n	8000962 <Blink_LED1+0xd2>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d158      	bne.n	8000962 <Blink_LED1+0xd2>
    	lastToggleTime1 = currentTime; // Update the last toggle time
 80008b0:	4a2e      	ldr	r2, [pc, #184]	; (800096c <Blink_LED1+0xdc>)
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	6013      	str	r3, [r2, #0]

        switch (currentState1) {
 80008b6:	4b2e      	ldr	r3, [pc, #184]	; (8000970 <Blink_LED1+0xe0>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	d836      	bhi.n	800092c <Blink_LED1+0x9c>
 80008be:	a201      	add	r2, pc, #4	; (adr r2, 80008c4 <Blink_LED1+0x34>)
 80008c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c4:	080008d9 	.word	0x080008d9
 80008c8:	080008ef 	.word	0x080008ef
 80008cc:	080008fb 	.word	0x080008fb
 80008d0:	08000907 	.word	0x08000907
 80008d4:	08000913 	.word	0x08000913
            case 0: // Off
                HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	2140      	movs	r1, #64	; 0x40
 80008dc:	4825      	ldr	r0, [pc, #148]	; (8000974 <Blink_LED1+0xe4>)
 80008de:	f001 f978 	bl	8001bd2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	2120      	movs	r1, #32
 80008e6:	4823      	ldr	r0, [pc, #140]	; (8000974 <Blink_LED1+0xe4>)
 80008e8:	f001 f973 	bl	8001bd2 <HAL_GPIO_WritePin>
                break;
 80008ec:	e029      	b.n	8000942 <Blink_LED1+0xb2>
            case 1: // Green
                HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2140      	movs	r1, #64	; 0x40
 80008f2:	4820      	ldr	r0, [pc, #128]	; (8000974 <Blink_LED1+0xe4>)
 80008f4:	f001 f96d 	bl	8001bd2 <HAL_GPIO_WritePin>
                break;
 80008f8:	e023      	b.n	8000942 <Blink_LED1+0xb2>
            case 2: // Yellow, stay green, enable red
                HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2120      	movs	r1, #32
 80008fe:	481d      	ldr	r0, [pc, #116]	; (8000974 <Blink_LED1+0xe4>)
 8000900:	f001 f967 	bl	8001bd2 <HAL_GPIO_WritePin>
                break;
 8000904:	e01d      	b.n	8000942 <Blink_LED1+0xb2>
            case 3: // Red, disable green
                HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8000906:	2201      	movs	r2, #1
 8000908:	2140      	movs	r1, #64	; 0x40
 800090a:	481a      	ldr	r0, [pc, #104]	; (8000974 <Blink_LED1+0xe4>)
 800090c:	f001 f961 	bl	8001bd2 <HAL_GPIO_WritePin>
                break;
 8000910:	e017      	b.n	8000942 <Blink_LED1+0xb2>
            case 4: // off again
                HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8000912:	2201      	movs	r2, #1
 8000914:	2140      	movs	r1, #64	; 0x40
 8000916:	4817      	ldr	r0, [pc, #92]	; (8000974 <Blink_LED1+0xe4>)
 8000918:	f001 f95b 	bl	8001bd2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	2120      	movs	r1, #32
 8000920:	4814      	ldr	r0, [pc, #80]	; (8000974 <Blink_LED1+0xe4>)
 8000922:	f001 f956 	bl	8001bd2 <HAL_GPIO_WritePin>
                cycleFinished = 1;
 8000926:	2301      	movs	r3, #1
 8000928:	607b      	str	r3, [r7, #4]
                break;
 800092a:	e00a      	b.n	8000942 <Blink_LED1+0xb2>
            default:
                HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	2140      	movs	r1, #64	; 0x40
 8000930:	4810      	ldr	r0, [pc, #64]	; (8000974 <Blink_LED1+0xe4>)
 8000932:	f001 f94e 	bl	8001bd2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8000936:	2201      	movs	r2, #1
 8000938:	2120      	movs	r1, #32
 800093a:	480e      	ldr	r0, [pc, #56]	; (8000974 <Blink_LED1+0xe4>)
 800093c:	f001 f949 	bl	8001bd2 <HAL_GPIO_WritePin>
                break;
 8000940:	bf00      	nop
        }

        // Move to the next state
        currentState1 = (currentState1 + 1) % 5; // Cycle from 0 to 4 (0: off, 1: blue, 2: green, 3: red, 4: off)
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <Blink_LED1+0xe0>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	1c5a      	adds	r2, r3, #1
 8000948:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <Blink_LED1+0xe8>)
 800094a:	fb83 1302 	smull	r1, r3, r3, r2
 800094e:	1059      	asrs	r1, r3, #1
 8000950:	17d3      	asrs	r3, r2, #31
 8000952:	1ac9      	subs	r1, r1, r3
 8000954:	460b      	mov	r3, r1
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	440b      	add	r3, r1
 800095a:	1ad1      	subs	r1, r2, r3
 800095c:	b2ca      	uxtb	r2, r1
 800095e:	4b04      	ldr	r3, [pc, #16]	; (8000970 <Blink_LED1+0xe0>)
 8000960:	701a      	strb	r2, [r3, #0]

    }
}
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	2000002c 	.word	0x2000002c
 8000970:	20000030 	.word	0x20000030
 8000974:	40011800 	.word	0x40011800
 8000978:	66666667 	.word	0x66666667

0800097c <Blink_LED2>:

void Blink_LED2(int cycleFinished) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick(); // Get the current time
 8000984:	f000 fe68 	bl	8001658 <HAL_GetTick>
 8000988:	60f8      	str	r0, [r7, #12]


    // Change states based on the current time
    if (currentTime - lastToggleTime2 >= 250 && cycleFinished == 0) { // Change every 250 ms
 800098a:	4b33      	ldr	r3, [pc, #204]	; (8000a58 <Blink_LED2+0xdc>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	2bf9      	cmp	r3, #249	; 0xf9
 8000994:	d95b      	bls.n	8000a4e <Blink_LED2+0xd2>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d158      	bne.n	8000a4e <Blink_LED2+0xd2>
    	lastToggleTime2 = currentTime; // Update the last toggle time
 800099c:	4a2e      	ldr	r2, [pc, #184]	; (8000a58 <Blink_LED2+0xdc>)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	6013      	str	r3, [r2, #0]

        switch (currentState2) {
 80009a2:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <Blink_LED2+0xe0>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b04      	cmp	r3, #4
 80009a8:	d836      	bhi.n	8000a18 <Blink_LED2+0x9c>
 80009aa:	a201      	add	r2, pc, #4	; (adr r2, 80009b0 <Blink_LED2+0x34>)
 80009ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b0:	080009c5 	.word	0x080009c5
 80009b4:	080009db 	.word	0x080009db
 80009b8:	080009e7 	.word	0x080009e7
 80009bc:	080009f3 	.word	0x080009f3
 80009c0:	080009ff 	.word	0x080009ff
            case 0: // Off
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2140      	movs	r1, #64	; 0x40
 80009c8:	4825      	ldr	r0, [pc, #148]	; (8000a60 <Blink_LED2+0xe4>)
 80009ca:	f001 f902 	bl	8001bd2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80009ce:	2201      	movs	r2, #1
 80009d0:	2180      	movs	r1, #128	; 0x80
 80009d2:	4823      	ldr	r0, [pc, #140]	; (8000a60 <Blink_LED2+0xe4>)
 80009d4:	f001 f8fd 	bl	8001bd2 <HAL_GPIO_WritePin>
                break;
 80009d8:	e029      	b.n	8000a2e <Blink_LED2+0xb2>
            case 1: // Green
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2140      	movs	r1, #64	; 0x40
 80009de:	4820      	ldr	r0, [pc, #128]	; (8000a60 <Blink_LED2+0xe4>)
 80009e0:	f001 f8f7 	bl	8001bd2 <HAL_GPIO_WritePin>
                break;
 80009e4:	e023      	b.n	8000a2e <Blink_LED2+0xb2>
            case 2: // Yellow, stay green, enable red
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2180      	movs	r1, #128	; 0x80
 80009ea:	481d      	ldr	r0, [pc, #116]	; (8000a60 <Blink_LED2+0xe4>)
 80009ec:	f001 f8f1 	bl	8001bd2 <HAL_GPIO_WritePin>
                break;
 80009f0:	e01d      	b.n	8000a2e <Blink_LED2+0xb2>
            case 3: // Red, disable green
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80009f2:	2201      	movs	r2, #1
 80009f4:	2140      	movs	r1, #64	; 0x40
 80009f6:	481a      	ldr	r0, [pc, #104]	; (8000a60 <Blink_LED2+0xe4>)
 80009f8:	f001 f8eb 	bl	8001bd2 <HAL_GPIO_WritePin>
                break;
 80009fc:	e017      	b.n	8000a2e <Blink_LED2+0xb2>
            case 4: // off again
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80009fe:	2201      	movs	r2, #1
 8000a00:	2140      	movs	r1, #64	; 0x40
 8000a02:	4817      	ldr	r0, [pc, #92]	; (8000a60 <Blink_LED2+0xe4>)
 8000a04:	f001 f8e5 	bl	8001bd2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2180      	movs	r1, #128	; 0x80
 8000a0c:	4814      	ldr	r0, [pc, #80]	; (8000a60 <Blink_LED2+0xe4>)
 8000a0e:	f001 f8e0 	bl	8001bd2 <HAL_GPIO_WritePin>
                cycleFinished = 1;
 8000a12:	2301      	movs	r3, #1
 8000a14:	607b      	str	r3, [r7, #4]
                break;
 8000a16:	e00a      	b.n	8000a2e <Blink_LED2+0xb2>
            default:
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2140      	movs	r1, #64	; 0x40
 8000a1c:	4810      	ldr	r0, [pc, #64]	; (8000a60 <Blink_LED2+0xe4>)
 8000a1e:	f001 f8d8 	bl	8001bd2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000a22:	2201      	movs	r2, #1
 8000a24:	2180      	movs	r1, #128	; 0x80
 8000a26:	480e      	ldr	r0, [pc, #56]	; (8000a60 <Blink_LED2+0xe4>)
 8000a28:	f001 f8d3 	bl	8001bd2 <HAL_GPIO_WritePin>
                break;
 8000a2c:	bf00      	nop
        }

        // Move to the next state
        currentState2 = (currentState2 + 1) % 5; // Cycle from 0 to 4 (0: off, 1: blue, 2: green, 3: red, 4: off)
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <Blink_LED2+0xe0>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	1c5a      	adds	r2, r3, #1
 8000a34:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <Blink_LED2+0xe8>)
 8000a36:	fb83 1302 	smull	r1, r3, r3, r2
 8000a3a:	1059      	asrs	r1, r3, #1
 8000a3c:	17d3      	asrs	r3, r2, #31
 8000a3e:	1ac9      	subs	r1, r1, r3
 8000a40:	460b      	mov	r3, r1
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	440b      	add	r3, r1
 8000a46:	1ad1      	subs	r1, r2, r3
 8000a48:	b2ca      	uxtb	r2, r1
 8000a4a:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <Blink_LED2+0xe0>)
 8000a4c:	701a      	strb	r2, [r3, #0]
    }
}
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000034 	.word	0x20000034
 8000a5c:	20000038 	.word	0x20000038
 8000a60:	40010c00 	.word	0x40010c00
 8000a64:	66666667 	.word	0x66666667

08000a68 <Blink_LED3>:

void Blink_LED3(int cycleFinished) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick(); // Get the current time
 8000a70:	f000 fdf2 	bl	8001658 <HAL_GetTick>
 8000a74:	60f8      	str	r0, [r7, #12]


    // Change states based on the current time
    if (currentTime - lastToggleTime3 >= 250 && cycleFinished == 0) { // Change every 250 ms
 8000a76:	4b37      	ldr	r3, [pc, #220]	; (8000b54 <Blink_LED3+0xec>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	2bf9      	cmp	r3, #249	; 0xf9
 8000a80:	d964      	bls.n	8000b4c <Blink_LED3+0xe4>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d161      	bne.n	8000b4c <Blink_LED3+0xe4>
    	lastToggleTime3 = currentTime; // Update the last toggle time
 8000a88:	4a32      	ldr	r2, [pc, #200]	; (8000b54 <Blink_LED3+0xec>)
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	6013      	str	r3, [r2, #0]

        switch (currentState3) {
 8000a8e:	4b32      	ldr	r3, [pc, #200]	; (8000b58 <Blink_LED3+0xf0>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b04      	cmp	r3, #4
 8000a94:	d83d      	bhi.n	8000b12 <Blink_LED3+0xaa>
 8000a96:	a201      	add	r2, pc, #4	; (adr r2, 8000a9c <Blink_LED3+0x34>)
 8000a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a9c:	08000ab1 	.word	0x08000ab1
 8000aa0:	08000acb 	.word	0x08000acb
 8000aa4:	08000ad9 	.word	0x08000ad9
 8000aa8:	08000ae7 	.word	0x08000ae7
 8000aac:	08000af5 	.word	0x08000af5
            case 0: // Off
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab6:	4829      	ldr	r0, [pc, #164]	; (8000b5c <Blink_LED3+0xf4>)
 8000ab8:	f001 f88b 	bl	8001bd2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac2:	4826      	ldr	r0, [pc, #152]	; (8000b5c <Blink_LED3+0xf4>)
 8000ac4:	f001 f885 	bl	8001bd2 <HAL_GPIO_WritePin>
                break;
 8000ac8:	e030      	b.n	8000b2c <Blink_LED3+0xc4>
            case 1: // Green
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ad0:	4822      	ldr	r0, [pc, #136]	; (8000b5c <Blink_LED3+0xf4>)
 8000ad2:	f001 f87e 	bl	8001bd2 <HAL_GPIO_WritePin>
                break;
 8000ad6:	e029      	b.n	8000b2c <Blink_LED3+0xc4>
            case 2: // Yellow, stay green, enable red
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ade:	481f      	ldr	r0, [pc, #124]	; (8000b5c <Blink_LED3+0xf4>)
 8000ae0:	f001 f877 	bl	8001bd2 <HAL_GPIO_WritePin>
                break;
 8000ae4:	e022      	b.n	8000b2c <Blink_LED3+0xc4>
            case 3: // Red, disable green
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aec:	481b      	ldr	r0, [pc, #108]	; (8000b5c <Blink_LED3+0xf4>)
 8000aee:	f001 f870 	bl	8001bd2 <HAL_GPIO_WritePin>
                break;
 8000af2:	e01b      	b.n	8000b2c <Blink_LED3+0xc4>
            case 4: // off again
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000afa:	4818      	ldr	r0, [pc, #96]	; (8000b5c <Blink_LED3+0xf4>)
 8000afc:	f001 f869 	bl	8001bd2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b06:	4815      	ldr	r0, [pc, #84]	; (8000b5c <Blink_LED3+0xf4>)
 8000b08:	f001 f863 	bl	8001bd2 <HAL_GPIO_WritePin>
                cycleFinished = 1;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	607b      	str	r3, [r7, #4]
                break;
 8000b10:	e00c      	b.n	8000b2c <Blink_LED3+0xc4>
            default:
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b18:	4810      	ldr	r0, [pc, #64]	; (8000b5c <Blink_LED3+0xf4>)
 8000b1a:	f001 f85a 	bl	8001bd2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b24:	480d      	ldr	r0, [pc, #52]	; (8000b5c <Blink_LED3+0xf4>)
 8000b26:	f001 f854 	bl	8001bd2 <HAL_GPIO_WritePin>
                break;
 8000b2a:	bf00      	nop
        }

        // Move to the next state
        currentState3 = (currentState3 + 1) % 5; // Cycle from 0 to 4 (0: off, 1: blue, 2: green, 3: red, 4: off)
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <Blink_LED3+0xf0>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	1c5a      	adds	r2, r3, #1
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <Blink_LED3+0xf8>)
 8000b34:	fb83 1302 	smull	r1, r3, r3, r2
 8000b38:	1059      	asrs	r1, r3, #1
 8000b3a:	17d3      	asrs	r3, r2, #31
 8000b3c:	1ac9      	subs	r1, r1, r3
 8000b3e:	460b      	mov	r3, r1
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	440b      	add	r3, r1
 8000b44:	1ad1      	subs	r1, r2, r3
 8000b46:	b2ca      	uxtb	r2, r1
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <Blink_LED3+0xf0>)
 8000b4a:	701a      	strb	r2, [r3, #0]
    }
}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	2000003c 	.word	0x2000003c
 8000b58:	20000040 	.word	0x20000040
 8000b5c:	40010c00 	.word	0x40010c00
 8000b60:	66666667 	.word	0x66666667

08000b64 <Blink_LED4>:

void Blink_LED4(int cycleFinished) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick(); // Get the current time
 8000b6c:	f000 fd74 	bl	8001658 <HAL_GetTick>
 8000b70:	60f8      	str	r0, [r7, #12]


    // Change states based on the current time
    if (currentTime - lastToggleTime4 >= 250 && cycleFinished == 0) { // Change every 250 ms
 8000b72:	4b37      	ldr	r3, [pc, #220]	; (8000c50 <Blink_LED4+0xec>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	2bf9      	cmp	r3, #249	; 0xf9
 8000b7c:	d964      	bls.n	8000c48 <Blink_LED4+0xe4>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d161      	bne.n	8000c48 <Blink_LED4+0xe4>
    	lastToggleTime4 = currentTime; // Update the last toggle time
 8000b84:	4a32      	ldr	r2, [pc, #200]	; (8000c50 <Blink_LED4+0xec>)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	6013      	str	r3, [r2, #0]

        switch (currentState4) {
 8000b8a:	4b32      	ldr	r3, [pc, #200]	; (8000c54 <Blink_LED4+0xf0>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	d83d      	bhi.n	8000c0e <Blink_LED4+0xaa>
 8000b92:	a201      	add	r2, pc, #4	; (adr r2, 8000b98 <Blink_LED4+0x34>)
 8000b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b98:	08000bad 	.word	0x08000bad
 8000b9c:	08000bc7 	.word	0x08000bc7
 8000ba0:	08000bd5 	.word	0x08000bd5
 8000ba4:	08000be3 	.word	0x08000be3
 8000ba8:	08000bf1 	.word	0x08000bf1
            case 0: // Off
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb2:	4829      	ldr	r0, [pc, #164]	; (8000c58 <Blink_LED4+0xf4>)
 8000bb4:	f001 f80d 	bl	8001bd2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bbe:	4826      	ldr	r0, [pc, #152]	; (8000c58 <Blink_LED4+0xf4>)
 8000bc0:	f001 f807 	bl	8001bd2 <HAL_GPIO_WritePin>
                break;
 8000bc4:	e030      	b.n	8000c28 <Blink_LED4+0xc4>
            case 1: // Green
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bcc:	4822      	ldr	r0, [pc, #136]	; (8000c58 <Blink_LED4+0xf4>)
 8000bce:	f001 f800 	bl	8001bd2 <HAL_GPIO_WritePin>
                break;
 8000bd2:	e029      	b.n	8000c28 <Blink_LED4+0xc4>
            case 2: // Yellow, stay green, enable red
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bda:	481f      	ldr	r0, [pc, #124]	; (8000c58 <Blink_LED4+0xf4>)
 8000bdc:	f000 fff9 	bl	8001bd2 <HAL_GPIO_WritePin>
                break;
 8000be0:	e022      	b.n	8000c28 <Blink_LED4+0xc4>
            case 3: // Red, disable green
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000be2:	2201      	movs	r2, #1
 8000be4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000be8:	481b      	ldr	r0, [pc, #108]	; (8000c58 <Blink_LED4+0xf4>)
 8000bea:	f000 fff2 	bl	8001bd2 <HAL_GPIO_WritePin>
                break;
 8000bee:	e01b      	b.n	8000c28 <Blink_LED4+0xc4>
            case 4: // off again
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf6:	4818      	ldr	r0, [pc, #96]	; (8000c58 <Blink_LED4+0xf4>)
 8000bf8:	f000 ffeb 	bl	8001bd2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c02:	4815      	ldr	r0, [pc, #84]	; (8000c58 <Blink_LED4+0xf4>)
 8000c04:	f000 ffe5 	bl	8001bd2 <HAL_GPIO_WritePin>
                cycleFinished = 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	607b      	str	r3, [r7, #4]
                break;
 8000c0c:	e00c      	b.n	8000c28 <Blink_LED4+0xc4>
            default:
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c14:	4810      	ldr	r0, [pc, #64]	; (8000c58 <Blink_LED4+0xf4>)
 8000c16:	f000 ffdc 	bl	8001bd2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c20:	480d      	ldr	r0, [pc, #52]	; (8000c58 <Blink_LED4+0xf4>)
 8000c22:	f000 ffd6 	bl	8001bd2 <HAL_GPIO_WritePin>
                break;
 8000c26:	bf00      	nop
        	}

        // Move to the next state
        currentState4 = (currentState4 + 1) % 5; // Cycle from 0 to 4 (0: off, 1: blue, 2: green, 3: red, 4: off)
 8000c28:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <Blink_LED4+0xf0>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	1c5a      	adds	r2, r3, #1
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <Blink_LED4+0xf8>)
 8000c30:	fb83 1302 	smull	r1, r3, r3, r2
 8000c34:	1059      	asrs	r1, r3, #1
 8000c36:	17d3      	asrs	r3, r2, #31
 8000c38:	1ac9      	subs	r1, r1, r3
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	440b      	add	r3, r1
 8000c40:	1ad1      	subs	r1, r2, r3
 8000c42:	b2ca      	uxtb	r2, r1
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <Blink_LED4+0xf0>)
 8000c46:	701a      	strb	r2, [r3, #0]
    }
}
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000044 	.word	0x20000044
 8000c54:	20000048 	.word	0x20000048
 8000c58:	40010c00 	.word	0x40010c00
 8000c5c:	66666667 	.word	0x66666667

08000c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b08b      	sub	sp, #44	; 0x2c
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c66:	f000 fc9f 	bl	80015a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c6a:	f000 f8a3 	bl	8000db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6e:	f000 f997 	bl	8000fa0 <MX_GPIO_Init>
  MX_FSMC_Init();
 8000c72:	f000 fa5f 	bl	8001134 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8000c76:	f000 f969 	bl	8000f4c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000c7a:	f000 f8e1 	bl	8000e40 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 8000c7e:	f7ff fb74 	bl	800036a <LCD_INIT>
  HAL_UART_Init(&huart1);
 8000c82:	4847      	ldr	r0, [pc, #284]	; (8000da0 <main+0x140>)
 8000c84:	f002 f815 	bl	8002cb2 <HAL_UART_Init>
  DY_Init(&huart1);
 8000c88:	4845      	ldr	r0, [pc, #276]	; (8000da0 <main+0x140>)
 8000c8a:	f7ff fb4f 	bl	800032c <DY_Init>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  int page = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  int menuTrue = 1;
 8000c92:	2301      	movs	r3, #1
 8000c94:	623b      	str	r3, [r7, #32]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // initialize to the menu
	  if (menuTrue == 1) {
 8000c96:	6a3b      	ldr	r3, [r7, #32]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d104      	bne.n	8000ca6 <main+0x46>
		  printMenu(page);
 8000c9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c9e:	f000 fab3 	bl	8001208 <printMenu>
		  blank_space_musicMap();
 8000ca2:	f7ff fb33 	bl	800030c <blank_space_musicMap>
	  }

	  // changing to another page by KEY1
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 8000ca6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000caa:	483e      	ldr	r0, [pc, #248]	; (8000da4 <main+0x144>)
 8000cac:	f000 ff7a 	bl	8001ba4 <HAL_GPIO_ReadPin>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d118      	bne.n	8000ce8 <main+0x88>
		  HAL_Delay(50);
 8000cb6:	2032      	movs	r0, #50	; 0x32
 8000cb8:	f000 fcd8 	bl	800166c <HAL_Delay>
		  page += 1; // select another songs
 8000cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
		  if( page > 3) {
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc4:	2b03      	cmp	r3, #3
 8000cc6:	dd0f      	ble.n	8000ce8 <main+0x88>
			  page = page % 4;
 8000cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cca:	425a      	negs	r2, r3
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	f002 0203 	and.w	r2, r2, #3
 8000cd4:	bf58      	it	pl
 8000cd6:	4253      	negpl	r3, r2
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
			  page = (page == 0) ? 1 : page;
 8000cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <main+0x84>
 8000ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce2:	e000      	b.n	8000ce6 <main+0x86>
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
		  // page = 3 badroom star
	  }


	  // select the song by KEY1 in STM32
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8000ce8:	2101      	movs	r1, #1
 8000cea:	482f      	ldr	r0, [pc, #188]	; (8000da8 <main+0x148>)
 8000cec:	f000 ff5a 	bl	8001ba4 <HAL_GPIO_ReadPin>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d1cf      	bne.n	8000c96 <main+0x36>
		  menuTrue = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	623b      	str	r3, [r7, #32]
		  uint8_t cmdPlay1[] = {0xAA, 0x08, 0x0B, 0x02, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x2A, 0x4D, 0x50, 0x33, 0xD9};
 8000cfa:	4b2c      	ldr	r3, [pc, #176]	; (8000dac <main+0x14c>)
 8000cfc:	f107 0410 	add.w	r4, r7, #16
 8000d00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d02:	c407      	stmia	r4!, {r0, r1, r2}
 8000d04:	8023      	strh	r3, [r4, #0]
 8000d06:	3402      	adds	r4, #2
 8000d08:	0c1b      	lsrs	r3, r3, #16
 8000d0a:	7023      	strb	r3, [r4, #0]
		  uint8_t cmdPlay2[] = {0xAA, 0x08, 0x0B, 0x02, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x32, 0x2A, 0x4D, 0x50, 0x33, 0xDA};
 8000d0c:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <main+0x150>)
 8000d0e:	463c      	mov	r4, r7
 8000d10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d12:	c407      	stmia	r4!, {r0, r1, r2}
 8000d14:	8023      	strh	r3, [r4, #0]
 8000d16:	3402      	adds	r4, #2
 8000d18:	0c1b      	lsrs	r3, r3, #16
 8000d1a:	7023      	strb	r3, [r4, #0]

		  HAL_Delay(50);
 8000d1c:	2032      	movs	r0, #50	; 0x32
 8000d1e:	f000 fca5 	bl	800166c <HAL_Delay>
		  switch (page) {
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d02b      	beq.n	8000d80 <main+0x120>
 8000d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	dcb3      	bgt.n	8000c96 <main+0x36>
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d003      	beq.n	8000d3c <main+0xdc>
 8000d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d011      	beq.n	8000d5e <main+0xfe>
 8000d3a:	e02f      	b.n	8000d9c <main+0x13c>
		  	  case (0) :
		  	  	  	blank_space_LCD();
 8000d3c:	f7ff faac 	bl	8000298 <blank_space_LCD>
		  	  	  	HAL_Delay(500);
 8000d40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d44:	f000 fc92 	bl	800166c <HAL_Delay>
		  	  	  	HAL_UART_Transmit(&huart1, cmdPlay1, sizeof(cmdPlay1), 1000);
 8000d48:	f107 0110 	add.w	r1, r7, #16
 8000d4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d50:	220f      	movs	r2, #15
 8000d52:	4813      	ldr	r0, [pc, #76]	; (8000da0 <main+0x140>)
 8000d54:	f001 fffa 	bl	8002d4c <HAL_UART_Transmit>
		  	  	  	blank_space_musicMap();
 8000d58:	f7ff fad8 	bl	800030c <blank_space_musicMap>
		  	  	  	break;
 8000d5c:	e01e      	b.n	8000d9c <main+0x13c>
		  	  case (1) :
		  	  	  	blank_space_LCD();
 8000d5e:	f7ff fa9b 	bl	8000298 <blank_space_LCD>
		  	  	  	HAL_Delay(500);
 8000d62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d66:	f000 fc81 	bl	800166c <HAL_Delay>
		  	  	  	HAL_UART_Transmit(&huart1, cmdPlay1, sizeof(cmdPlay1), 1000);
 8000d6a:	f107 0110 	add.w	r1, r7, #16
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	220f      	movs	r2, #15
 8000d74:	480a      	ldr	r0, [pc, #40]	; (8000da0 <main+0x140>)
 8000d76:	f001 ffe9 	bl	8002d4c <HAL_UART_Transmit>
		  	  	  	blank_space_musicMap();
 8000d7a:	f7ff fac7 	bl	800030c <blank_space_musicMap>
		  	  	  	break;
 8000d7e:	e00d      	b.n	8000d9c <main+0x13c>
		  	  case (2) :
					an_apple_LCD();
 8000d80:	f7ff fa50 	bl	8000224 <an_apple_LCD>
		  	  	  	HAL_Delay(500);
 8000d84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d88:	f000 fc70 	bl	800166c <HAL_Delay>
		  	  	  	HAL_UART_Transmit(&huart1, cmdPlay2, sizeof(cmdPlay2), 1000);
 8000d8c:	4639      	mov	r1, r7
 8000d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d92:	220f      	movs	r2, #15
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <main+0x140>)
 8000d96:	f001 ffd9 	bl	8002d4c <HAL_UART_Transmit>
		  	  	  	break;
 8000d9a:	bf00      	nop
	  if (menuTrue == 1) {
 8000d9c:	e77b      	b.n	8000c96 <main+0x36>
 8000d9e:	bf00      	nop
 8000da0:	20000094 	.word	0x20000094
 8000da4:	40011000 	.word	0x40011000
 8000da8:	40010800 	.word	0x40010800
 8000dac:	080032c8 	.word	0x080032c8
 8000db0:	080032d8 	.word	0x080032d8

08000db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b090      	sub	sp, #64	; 0x40
 8000db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dba:	f107 0318 	add.w	r3, r7, #24
 8000dbe:	2228      	movs	r2, #40	; 0x28
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 fa26 	bl	8003214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de4:	2301      	movs	r3, #1
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de8:	2302      	movs	r3, #2
 8000dea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000df2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df8:	f107 0318 	add.w	r3, r7, #24
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 ff01 	bl	8001c04 <HAL_RCC_OscConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e08:	f000 f9f8 	bl	80011fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e10:	2302      	movs	r3, #2
 8000e12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2102      	movs	r1, #2
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 f96e 	bl	8002108 <HAL_RCC_ClockConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e32:	f000 f9e3 	bl	80011fc <Error_Handler>
  }
}
 8000e36:	bf00      	nop
 8000e38:	3740      	adds	r7, #64	; 0x40
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b092      	sub	sp, #72	; 0x48
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
 8000e60:	615a      	str	r2, [r3, #20]
 8000e62:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2220      	movs	r2, #32
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f002 f9d2 	bl	8003214 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e70:	4b34      	ldr	r3, [pc, #208]	; (8000f44 <MX_TIM1_Init+0x104>)
 8000e72:	4a35      	ldr	r2, [pc, #212]	; (8000f48 <MX_TIM1_Init+0x108>)
 8000e74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = T1_PRE;
 8000e76:	4b33      	ldr	r3, [pc, #204]	; (8000f44 <MX_TIM1_Init+0x104>)
 8000e78:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000e7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7e:	4b31      	ldr	r3, [pc, #196]	; (8000f44 <MX_TIM1_Init+0x104>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = T1_CNT;
 8000e84:	4b2f      	ldr	r3, [pc, #188]	; (8000f44 <MX_TIM1_Init+0x104>)
 8000e86:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8c:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <MX_TIM1_Init+0x104>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e92:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <MX_TIM1_Init+0x104>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e98:	4b2a      	ldr	r3, [pc, #168]	; (8000f44 <MX_TIM1_Init+0x104>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e9e:	4829      	ldr	r0, [pc, #164]	; (8000f44 <MX_TIM1_Init+0x104>)
 8000ea0:	f001 fb17 	bl	80024d2 <HAL_TIM_PWM_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000eaa:	f000 f9a7 	bl	80011fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4821      	ldr	r0, [pc, #132]	; (8000f44 <MX_TIM1_Init+0x104>)
 8000ebe:	f001 fe3b 	bl	8002b38 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000ec8:	f000 f998 	bl	80011fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ecc:	2360      	movs	r3, #96	; 0x60
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = PWM_1;
 8000ed0:	f241 3387 	movw	r3, #4999	; 0x1387
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eda:	2300      	movs	r3, #0
 8000edc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eee:	2200      	movs	r2, #0
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4814      	ldr	r0, [pc, #80]	; (8000f44 <MX_TIM1_Init+0x104>)
 8000ef4:	f001 fb3c 	bl	8002570 <HAL_TIM_PWM_ConfigChannel>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000efe:	f000 f97d 	bl	80011fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	4619      	mov	r1, r3
 8000f24:	4807      	ldr	r0, [pc, #28]	; (8000f44 <MX_TIM1_Init+0x104>)
 8000f26:	f001 fe73 	bl	8002c10 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000f30:	f000 f964 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f34:	4803      	ldr	r0, [pc, #12]	; (8000f44 <MX_TIM1_Init+0x104>)
 8000f36:	f000 fa15 	bl	8001364 <HAL_TIM_MspPostInit>

}
 8000f3a:	bf00      	nop
 8000f3c:	3748      	adds	r7, #72	; 0x48
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000004c 	.word	0x2000004c
 8000f48:	40012c00 	.word	0x40012c00

08000f4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <MX_USART1_UART_Init+0x50>)
 8000f54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f72:	220c      	movs	r2, #12
 8000f74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f84:	f001 fe95 	bl	8002cb2 <HAL_UART_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f8e:	f000 f935 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000094 	.word	0x20000094
 8000f9c:	40013800 	.word	0x40013800

08000fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	f107 0318 	add.w	r3, r7, #24
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb4:	4b59      	ldr	r3, [pc, #356]	; (800111c <MX_GPIO_Init+0x17c>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a58      	ldr	r2, [pc, #352]	; (800111c <MX_GPIO_Init+0x17c>)
 8000fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b56      	ldr	r3, [pc, #344]	; (800111c <MX_GPIO_Init+0x17c>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fcc:	4b53      	ldr	r3, [pc, #332]	; (800111c <MX_GPIO_Init+0x17c>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a52      	ldr	r2, [pc, #328]	; (800111c <MX_GPIO_Init+0x17c>)
 8000fd2:	f043 0310 	orr.w	r3, r3, #16
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b50      	ldr	r3, [pc, #320]	; (800111c <MX_GPIO_Init+0x17c>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f003 0310 	and.w	r3, r3, #16
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	4b4d      	ldr	r3, [pc, #308]	; (800111c <MX_GPIO_Init+0x17c>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a4c      	ldr	r2, [pc, #304]	; (800111c <MX_GPIO_Init+0x17c>)
 8000fea:	f043 0304 	orr.w	r3, r3, #4
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b4a      	ldr	r3, [pc, #296]	; (800111c <MX_GPIO_Init+0x17c>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffc:	4b47      	ldr	r3, [pc, #284]	; (800111c <MX_GPIO_Init+0x17c>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a46      	ldr	r2, [pc, #280]	; (800111c <MX_GPIO_Init+0x17c>)
 8001002:	f043 0308 	orr.w	r3, r3, #8
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b44      	ldr	r3, [pc, #272]	; (800111c <MX_GPIO_Init+0x17c>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0308 	and.w	r3, r3, #8
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001014:	4b41      	ldr	r3, [pc, #260]	; (800111c <MX_GPIO_Init+0x17c>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a40      	ldr	r2, [pc, #256]	; (800111c <MX_GPIO_Init+0x17c>)
 800101a:	f043 0320 	orr.w	r3, r3, #32
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b3e      	ldr	r3, [pc, #248]	; (800111c <MX_GPIO_Init+0x17c>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0320 	and.w	r3, r3, #32
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, red1_Pin|green1_Pin, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	2160      	movs	r1, #96	; 0x60
 8001030:	483b      	ldr	r0, [pc, #236]	; (8001120 <MX_GPIO_Init+0x180>)
 8001032:	f000 fdce 	bl	8001bd2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, green4_Pin|red4_Pin|green3_Pin|red3_Pin
 8001036:	2201      	movs	r2, #1
 8001038:	f24f 01c0 	movw	r1, #61632	; 0xf0c0
 800103c:	4839      	ldr	r0, [pc, #228]	; (8001124 <MX_GPIO_Init+0x184>)
 800103e:	f000 fdc8 	bl	8001bd2 <HAL_GPIO_WritePin>
                          |green2_Pin|red2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001048:	4837      	ldr	r0, [pc, #220]	; (8001128 <MX_GPIO_Init+0x188>)
 800104a:	f000 fdc2 	bl	8001bd2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2102      	movs	r1, #2
 8001052:	4833      	ldr	r0, [pc, #204]	; (8001120 <MX_GPIO_Init+0x180>)
 8001054:	f000 fdbd 	bl	8001bd2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : red1_Pin green1_Pin PE1 */
  GPIO_InitStruct.Pin = red1_Pin|green1_Pin|GPIO_PIN_1;
 8001058:	2362      	movs	r3, #98	; 0x62
 800105a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001068:	f107 0318 	add.w	r3, r7, #24
 800106c:	4619      	mov	r1, r3
 800106e:	482c      	ldr	r0, [pc, #176]	; (8001120 <MX_GPIO_Init+0x180>)
 8001070:	f000 fc04 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : testing2_Pin key3_Pin */
  GPIO_InitStruct.Pin = testing2_Pin|key3_Pin;
 8001074:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107e:	2301      	movs	r3, #1
 8001080:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001082:	f107 0318 	add.w	r3, r7, #24
 8001086:	4619      	mov	r1, r3
 8001088:	4828      	ldr	r0, [pc, #160]	; (800112c <MX_GPIO_Init+0x18c>)
 800108a:	f000 fbf7 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : testing_key_Pin key1_Pin */
  GPIO_InitStruct.Pin = testing_key_Pin|key1_Pin;
 800108e:	2341      	movs	r3, #65	; 0x41
 8001090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001096:	2301      	movs	r3, #1
 8001098:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 0318 	add.w	r3, r7, #24
 800109e:	4619      	mov	r1, r3
 80010a0:	4823      	ldr	r0, [pc, #140]	; (8001130 <MX_GPIO_Init+0x190>)
 80010a2:	f000 fbeb 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : green4_Pin red4_Pin green3_Pin red3_Pin
                           green2_Pin red2_Pin */
  GPIO_InitStruct.Pin = green4_Pin|red4_Pin|green3_Pin|red3_Pin
 80010a6:	f24f 03c0 	movw	r3, #61632	; 0xf0c0
 80010aa:	61bb      	str	r3, [r7, #24]
                          |green2_Pin|red2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 0318 	add.w	r3, r7, #24
 80010bc:	4619      	mov	r1, r3
 80010be:	4819      	ldr	r0, [pc, #100]	; (8001124 <MX_GPIO_Init+0x184>)
 80010c0:	f000 fbdc 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d6:	f107 0318 	add.w	r3, r7, #24
 80010da:	4619      	mov	r1, r3
 80010dc:	4812      	ldr	r0, [pc, #72]	; (8001128 <MX_GPIO_Init+0x188>)
 80010de:	f000 fbcd 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : key4_Pin */
  GPIO_InitStruct.Pin = key4_Pin;
 80010e2:	2304      	movs	r3, #4
 80010e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(key4_GPIO_Port, &GPIO_InitStruct);
 80010ee:	f107 0318 	add.w	r3, r7, #24
 80010f2:	4619      	mov	r1, r3
 80010f4:	480c      	ldr	r0, [pc, #48]	; (8001128 <MX_GPIO_Init+0x188>)
 80010f6:	f000 fbc1 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : key2_Pin */
  GPIO_InitStruct.Pin = key2_Pin;
 80010fa:	2320      	movs	r3, #32
 80010fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001102:	2301      	movs	r3, #1
 8001104:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(key2_GPIO_Port, &GPIO_InitStruct);
 8001106:	f107 0318 	add.w	r3, r7, #24
 800110a:	4619      	mov	r1, r3
 800110c:	4805      	ldr	r0, [pc, #20]	; (8001124 <MX_GPIO_Init+0x184>)
 800110e:	f000 fbb5 	bl	800187c <HAL_GPIO_Init>

}
 8001112:	bf00      	nop
 8001114:	3728      	adds	r7, #40	; 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000
 8001120:	40011800 	.word	0x40011800
 8001124:	40010c00 	.word	0x40010c00
 8001128:	40011400 	.word	0x40011400
 800112c:	40011000 	.word	0x40011000
 8001130:	40010800 	.word	0x40010800

08001134 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
 8001148:	615a      	str	r2, [r3, #20]
 800114a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800114c:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <MX_FSMC_Init+0xbc>)
 800114e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001152:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001154:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <MX_FSMC_Init+0xbc>)
 8001156:	4a27      	ldr	r2, [pc, #156]	; (80011f4 <MX_FSMC_Init+0xc0>)
 8001158:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800115a:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <MX_FSMC_Init+0xbc>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001160:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <MX_FSMC_Init+0xbc>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001166:	4b22      	ldr	r3, [pc, #136]	; (80011f0 <MX_FSMC_Init+0xbc>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800116c:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <MX_FSMC_Init+0xbc>)
 800116e:	2210      	movs	r2, #16
 8001170:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001172:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <MX_FSMC_Init+0xbc>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <MX_FSMC_Init+0xbc>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800117e:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <MX_FSMC_Init+0xbc>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001184:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <MX_FSMC_Init+0xbc>)
 8001186:	2200      	movs	r2, #0
 8001188:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800118a:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <MX_FSMC_Init+0xbc>)
 800118c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001190:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <MX_FSMC_Init+0xbc>)
 8001194:	2200      	movs	r2, #0
 8001196:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <MX_FSMC_Init+0xbc>)
 800119a:	2200      	movs	r2, #0
 800119c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_FSMC_Init+0xbc>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <MX_FSMC_Init+0xbc>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 80011aa:	230f      	movs	r3, #15
 80011ac:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80011ae:	230f      	movs	r3, #15
 80011b0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80011b2:	23ff      	movs	r3, #255	; 0xff
 80011b4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80011b6:	230f      	movs	r3, #15
 80011b8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80011ba:	2310      	movs	r3, #16
 80011bc:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80011be:	2311      	movs	r3, #17
 80011c0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2200      	movs	r2, #0
 80011ca:	4619      	mov	r1, r3
 80011cc:	4808      	ldr	r0, [pc, #32]	; (80011f0 <MX_FSMC_Init+0xbc>)
 80011ce:	f001 f933 	bl	8002438 <HAL_SRAM_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80011d8:	f000 f810 	bl	80011fc <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_FSMC_Init+0xc4>)
 80011de:	69db      	ldr	r3, [r3, #28]
 80011e0:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <MX_FSMC_Init+0xc4>)
 80011e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011e6:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80011e8:	bf00      	nop
 80011ea:	3720      	adds	r7, #32
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200000d8 	.word	0x200000d8
 80011f4:	a0000104 	.word	0xa0000104
 80011f8:	40010000 	.word	0x40010000

080011fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001200:	b672      	cpsid	i
}
 8001202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001204:	e7fe      	b.n	8001204 <Error_Handler+0x8>
	...

08001208 <printMenu>:
 */

#include "menu.h"
#include "dy_sv17f.h"

void printMenu(int track) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	  LCD_DrawString(10,25,"Welcome back to ");
 8001210:	4a23      	ldr	r2, [pc, #140]	; (80012a0 <printMenu+0x98>)
 8001212:	2119      	movs	r1, #25
 8001214:	200a      	movs	r0, #10
 8001216:	f7ff fb0b 	bl	8000830 <LCD_DrawString>
	  LCD_DrawString(90,50,"Jubeat!");
 800121a:	4a22      	ldr	r2, [pc, #136]	; (80012a4 <printMenu+0x9c>)
 800121c:	2132      	movs	r1, #50	; 0x32
 800121e:	205a      	movs	r0, #90	; 0x5a
 8001220:	f7ff fb06 	bl	8000830 <LCD_DrawString>
	  LCD_DrawString(10,90,"1.Blank Space - Taylor Swift");
 8001224:	4a20      	ldr	r2, [pc, #128]	; (80012a8 <printMenu+0xa0>)
 8001226:	215a      	movs	r1, #90	; 0x5a
 8001228:	200a      	movs	r0, #10
 800122a:	f7ff fb01 	bl	8000830 <LCD_DrawString>
	  LCD_DrawString(10,120,"2.An Apple - Mayday");
 800122e:	4a1f      	ldr	r2, [pc, #124]	; (80012ac <printMenu+0xa4>)
 8001230:	2178      	movs	r1, #120	; 0x78
 8001232:	200a      	movs	r0, #10
 8001234:	f7ff fafc 	bl	8000830 <LCD_DrawString>
	  LCD_DrawString(10,150,"3.Bedroom Star - TNT");
 8001238:	4a1d      	ldr	r2, [pc, #116]	; (80012b0 <printMenu+0xa8>)
 800123a:	2196      	movs	r1, #150	; 0x96
 800123c:	200a      	movs	r0, #10
 800123e:	f7ff faf7 	bl	8000830 <LCD_DrawString>

	  switch (track) {
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b03      	cmp	r3, #3
 8001246:	d827      	bhi.n	8001298 <printMenu+0x90>
 8001248:	a201      	add	r2, pc, #4	; (adr r2, 8001250 <printMenu+0x48>)
 800124a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124e:	bf00      	nop
 8001250:	08001261 	.word	0x08001261
 8001254:	0800126f 	.word	0x0800126f
 8001258:	0800127d 	.word	0x0800127d
 800125c:	0800128b 	.word	0x0800128b
	  	  case (0):
				LCD_DrawString(15, 300, "< Default : Blank Space  >");
 8001260:	4a14      	ldr	r2, [pc, #80]	; (80012b4 <printMenu+0xac>)
 8001262:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001266:	200f      	movs	r0, #15
 8001268:	f7ff fae2 	bl	8000830 <LCD_DrawString>
			  	break;
 800126c:	e014      	b.n	8001298 <printMenu+0x90>
	  	  case (1):
				LCD_DrawString(15, 300, "< Selected: Blank Space  >");
 800126e:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <printMenu+0xb0>)
 8001270:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001274:	200f      	movs	r0, #15
 8001276:	f7ff fadb 	bl	8000830 <LCD_DrawString>
				break;
 800127a:	e00d      	b.n	8001298 <printMenu+0x90>
	  	  case (2):
	  			LCD_DrawString(15, 300, "< Selected: An Apple     >");
 800127c:	4a0f      	ldr	r2, [pc, #60]	; (80012bc <printMenu+0xb4>)
 800127e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001282:	200f      	movs	r0, #15
 8001284:	f7ff fad4 	bl	8000830 <LCD_DrawString>
	  	  	  	break;
 8001288:	e006      	b.n	8001298 <printMenu+0x90>
	  	  case (3):
				LCD_DrawString(15, 300, "< Selected: Bedroom Star >");
 800128a:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <printMenu+0xb8>)
 800128c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001290:	200f      	movs	r0, #15
 8001292:	f7ff facd 	bl	8000830 <LCD_DrawString>
	  }
}
 8001296:	e7ff      	b.n	8001298 <printMenu+0x90>
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	080032e8 	.word	0x080032e8
 80012a4:	080032fc 	.word	0x080032fc
 80012a8:	08003304 	.word	0x08003304
 80012ac:	08003324 	.word	0x08003324
 80012b0:	08003338 	.word	0x08003338
 80012b4:	08003350 	.word	0x08003350
 80012b8:	0800336c 	.word	0x0800336c
 80012bc:	08003388 	.word	0x08003388
 80012c0:	080033a4 	.word	0x080033a4

080012c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_MspInit+0x5c>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	4a14      	ldr	r2, [pc, #80]	; (8001320 <HAL_MspInit+0x5c>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6193      	str	r3, [r2, #24]
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_MspInit+0x5c>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <HAL_MspInit+0x5c>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <HAL_MspInit+0x5c>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ec:	61d3      	str	r3, [r2, #28]
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <HAL_MspInit+0x5c>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_MspInit+0x60>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	4a04      	ldr	r2, [pc, #16]	; (8001324 <HAL_MspInit+0x60>)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001316:	bf00      	nop
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	40021000 	.word	0x40021000
 8001324:	40010000 	.word	0x40010000

08001328 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a09      	ldr	r2, [pc, #36]	; (800135c <HAL_TIM_PWM_MspInit+0x34>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d10b      	bne.n	8001352 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_TIM_PWM_MspInit+0x38>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	4a08      	ldr	r2, [pc, #32]	; (8001360 <HAL_TIM_PWM_MspInit+0x38>)
 8001340:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001344:	6193      	str	r3, [r2, #24]
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_TIM_PWM_MspInit+0x38>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	40012c00 	.word	0x40012c00
 8001360:	40021000 	.word	0x40021000

08001364 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <HAL_TIM_MspPostInit+0x5c>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d118      	bne.n	80013b6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_TIM_MspPostInit+0x60>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <HAL_TIM_MspPostInit+0x60>)
 800138a:	f043 0304 	orr.w	r3, r3, #4
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HAL_TIM_MspPostInit+0x60>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800139c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2302      	movs	r3, #2
 80013a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013aa:	f107 0310 	add.w	r3, r7, #16
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <HAL_TIM_MspPostInit+0x64>)
 80013b2:	f000 fa63 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013b6:	bf00      	nop
 80013b8:	3720      	adds	r7, #32
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40012c00 	.word	0x40012c00
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010800 	.word	0x40010800

080013cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a1c      	ldr	r2, [pc, #112]	; (8001458 <HAL_UART_MspInit+0x8c>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d131      	bne.n	8001450 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ec:	4b1b      	ldr	r3, [pc, #108]	; (800145c <HAL_UART_MspInit+0x90>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	4a1a      	ldr	r2, [pc, #104]	; (800145c <HAL_UART_MspInit+0x90>)
 80013f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f6:	6193      	str	r3, [r2, #24]
 80013f8:	4b18      	ldr	r3, [pc, #96]	; (800145c <HAL_UART_MspInit+0x90>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_UART_MspInit+0x90>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a14      	ldr	r2, [pc, #80]	; (800145c <HAL_UART_MspInit+0x90>)
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	6193      	str	r3, [r2, #24]
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_UART_MspInit+0x90>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800141c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001420:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	4619      	mov	r1, r3
 8001430:	480b      	ldr	r0, [pc, #44]	; (8001460 <HAL_UART_MspInit+0x94>)
 8001432:	f000 fa23 	bl	800187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800143a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	4619      	mov	r1, r3
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <HAL_UART_MspInit+0x94>)
 800144c:	f000 fa16 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001450:	bf00      	nop
 8001452:	3720      	adds	r7, #32
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40013800 	.word	0x40013800
 800145c:	40021000 	.word	0x40021000
 8001460:	40010800 	.word	0x40010800

08001464 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800146a:	f107 0308 	add.w	r3, r7, #8
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <HAL_FSMC_MspInit+0x78>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d129      	bne.n	80014d4 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <HAL_FSMC_MspInit+0x78>)
 8001482:	2201      	movs	r2, #1
 8001484:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001486:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <HAL_FSMC_MspInit+0x7c>)
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	4a15      	ldr	r2, [pc, #84]	; (80014e0 <HAL_FSMC_MspInit+0x7c>)
 800148c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001490:	6153      	str	r3, [r2, #20]
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <HAL_FSMC_MspInit+0x7c>)
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800149e:	f64f 7380 	movw	r3, #65408	; 0xff80
 80014a2:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a8:	2303      	movs	r3, #3
 80014aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	4619      	mov	r1, r3
 80014b2:	480c      	ldr	r0, [pc, #48]	; (80014e4 <HAL_FSMC_MspInit+0x80>)
 80014b4:	f000 f9e2 	bl	800187c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80014b8:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 80014bc:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	4619      	mov	r1, r3
 80014cc:	4806      	ldr	r0, [pc, #24]	; (80014e8 <HAL_FSMC_MspInit+0x84>)
 80014ce:	f000 f9d5 	bl	800187c <HAL_GPIO_Init>
 80014d2:	e000      	b.n	80014d6 <HAL_FSMC_MspInit+0x72>
    return;
 80014d4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000120 	.word	0x20000120
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40011800 	.word	0x40011800
 80014e8:	40011400 	.word	0x40011400

080014ec <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80014f4:	f7ff ffb6 	bl	8001464 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <NMI_Handler+0x4>

08001506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <HardFault_Handler+0x4>

0800150c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <MemManage_Handler+0x4>

08001512 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <BusFault_Handler+0x4>

08001518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <UsageFault_Handler+0x4>

0800151e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr

08001542 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001546:	f000 f875 	bl	8001634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}

0800154e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
	...

0800155c <Reset_Handler>:
 800155c:	f7ff fff7 	bl	800154e <SystemInit>
 8001560:	480b      	ldr	r0, [pc, #44]	; (8001590 <LoopFillZerobss+0xe>)
 8001562:	490c      	ldr	r1, [pc, #48]	; (8001594 <LoopFillZerobss+0x12>)
 8001564:	4a0c      	ldr	r2, [pc, #48]	; (8001598 <LoopFillZerobss+0x16>)
 8001566:	2300      	movs	r3, #0
 8001568:	e002      	b.n	8001570 <LoopCopyDataInit>

0800156a <CopyDataInit>:
 800156a:	58d4      	ldr	r4, [r2, r3]
 800156c:	50c4      	str	r4, [r0, r3]
 800156e:	3304      	adds	r3, #4

08001570 <LoopCopyDataInit>:
 8001570:	18c4      	adds	r4, r0, r3
 8001572:	428c      	cmp	r4, r1
 8001574:	d3f9      	bcc.n	800156a <CopyDataInit>
 8001576:	4a09      	ldr	r2, [pc, #36]	; (800159c <LoopFillZerobss+0x1a>)
 8001578:	4c09      	ldr	r4, [pc, #36]	; (80015a0 <LoopFillZerobss+0x1e>)
 800157a:	2300      	movs	r3, #0
 800157c:	e001      	b.n	8001582 <LoopFillZerobss>

0800157e <FillZerobss>:
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	3204      	adds	r2, #4

08001582 <LoopFillZerobss>:
 8001582:	42a2      	cmp	r2, r4
 8001584:	d3fb      	bcc.n	800157e <FillZerobss>
 8001586:	f001 fe21 	bl	80031cc <__libc_init_array>
 800158a:	f7ff fb69 	bl	8000c60 <main>
 800158e:	4770      	bx	lr
 8001590:	20000000 	.word	0x20000000
 8001594:	2000000c 	.word	0x2000000c
 8001598:	080039e0 	.word	0x080039e0
 800159c:	2000000c 	.word	0x2000000c
 80015a0:	20000128 	.word	0x20000128

080015a4 <ADC1_2_IRQHandler>:
 80015a4:	e7fe      	b.n	80015a4 <ADC1_2_IRQHandler>
	...

080015a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <HAL_Init+0x28>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <HAL_Init+0x28>)
 80015b2:	f043 0310 	orr.w	r3, r3, #16
 80015b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b8:	2003      	movs	r0, #3
 80015ba:	f000 f92b 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015be:	200f      	movs	r0, #15
 80015c0:	f000 f808 	bl	80015d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c4:	f7ff fe7e 	bl	80012c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40022000 	.word	0x40022000

080015d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_InitTick+0x54>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_InitTick+0x58>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f935 	bl	8001862 <HAL_SYSTICK_Config>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e00e      	b.n	8001620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b0f      	cmp	r3, #15
 8001606:	d80a      	bhi.n	800161e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001608:	2200      	movs	r2, #0
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	f04f 30ff 	mov.w	r0, #4294967295
 8001610:	f000 f90b 	bl	800182a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001614:	4a06      	ldr	r2, [pc, #24]	; (8001630 <HAL_InitTick+0x5c>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	e000      	b.n	8001620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000000 	.word	0x20000000
 800162c:	20000008 	.word	0x20000008
 8001630:	20000004 	.word	0x20000004

08001634 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_IncTick+0x1c>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_IncTick+0x20>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4413      	add	r3, r2
 8001644:	4a03      	ldr	r2, [pc, #12]	; (8001654 <HAL_IncTick+0x20>)
 8001646:	6013      	str	r3, [r2, #0]
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	20000008 	.word	0x20000008
 8001654:	20000124 	.word	0x20000124

08001658 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return uwTick;
 800165c:	4b02      	ldr	r3, [pc, #8]	; (8001668 <HAL_GetTick+0x10>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	20000124 	.word	0x20000124

0800166c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001674:	f7ff fff0 	bl	8001658 <HAL_GetTick>
 8001678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001684:	d005      	beq.n	8001692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001686:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <HAL_Delay+0x44>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001692:	bf00      	nop
 8001694:	f7ff ffe0 	bl	8001658 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d8f7      	bhi.n	8001694 <HAL_Delay+0x28>
  {
  }
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000008 	.word	0x20000008

080016b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016d0:	4013      	ands	r3, r2
 80016d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e6:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	60d3      	str	r3, [r2, #12]
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <__NVIC_GetPriorityGrouping+0x18>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	f003 0307 	and.w	r3, r3, #7
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db0a      	blt.n	8001742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	490c      	ldr	r1, [pc, #48]	; (8001764 <__NVIC_SetPriority+0x4c>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	0112      	lsls	r2, r2, #4
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	440b      	add	r3, r1
 800173c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001740:	e00a      	b.n	8001758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4908      	ldr	r1, [pc, #32]	; (8001768 <__NVIC_SetPriority+0x50>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	3b04      	subs	r3, #4
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	440b      	add	r3, r1
 8001756:	761a      	strb	r2, [r3, #24]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f1c3 0307 	rsb	r3, r3, #7
 8001786:	2b04      	cmp	r3, #4
 8001788:	bf28      	it	cs
 800178a:	2304      	movcs	r3, #4
 800178c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3304      	adds	r3, #4
 8001792:	2b06      	cmp	r3, #6
 8001794:	d902      	bls.n	800179c <NVIC_EncodePriority+0x30>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3b03      	subs	r3, #3
 800179a:	e000      	b.n	800179e <NVIC_EncodePriority+0x32>
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43d9      	mvns	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	4313      	orrs	r3, r2
         );
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3724      	adds	r7, #36	; 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e0:	d301      	bcc.n	80017e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00f      	b.n	8001806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <SysTick_Config+0x40>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ee:	210f      	movs	r1, #15
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f7ff ff90 	bl	8001718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <SysTick_Config+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <SysTick_Config+0x40>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff49 	bl	80016b4 <__NVIC_SetPriorityGrouping>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800183c:	f7ff ff5e 	bl	80016fc <__NVIC_GetPriorityGrouping>
 8001840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f7ff ff90 	bl	800176c <NVIC_EncodePriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff5f 	bl	8001718 <__NVIC_SetPriority>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ffb0 	bl	80017d0 <SysTick_Config>
 8001870:	4603      	mov	r3, r0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800187c:	b480      	push	{r7}
 800187e:	b08b      	sub	sp, #44	; 0x2c
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001886:	2300      	movs	r3, #0
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800188a:	2300      	movs	r3, #0
 800188c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188e:	e179      	b.n	8001b84 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001890:	2201      	movs	r2, #1
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	f040 8168 	bne.w	8001b7e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	4a96      	ldr	r2, [pc, #600]	; (8001b0c <HAL_GPIO_Init+0x290>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d05e      	beq.n	8001976 <HAL_GPIO_Init+0xfa>
 80018b8:	4a94      	ldr	r2, [pc, #592]	; (8001b0c <HAL_GPIO_Init+0x290>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d875      	bhi.n	80019aa <HAL_GPIO_Init+0x12e>
 80018be:	4a94      	ldr	r2, [pc, #592]	; (8001b10 <HAL_GPIO_Init+0x294>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d058      	beq.n	8001976 <HAL_GPIO_Init+0xfa>
 80018c4:	4a92      	ldr	r2, [pc, #584]	; (8001b10 <HAL_GPIO_Init+0x294>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d86f      	bhi.n	80019aa <HAL_GPIO_Init+0x12e>
 80018ca:	4a92      	ldr	r2, [pc, #584]	; (8001b14 <HAL_GPIO_Init+0x298>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d052      	beq.n	8001976 <HAL_GPIO_Init+0xfa>
 80018d0:	4a90      	ldr	r2, [pc, #576]	; (8001b14 <HAL_GPIO_Init+0x298>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d869      	bhi.n	80019aa <HAL_GPIO_Init+0x12e>
 80018d6:	4a90      	ldr	r2, [pc, #576]	; (8001b18 <HAL_GPIO_Init+0x29c>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d04c      	beq.n	8001976 <HAL_GPIO_Init+0xfa>
 80018dc:	4a8e      	ldr	r2, [pc, #568]	; (8001b18 <HAL_GPIO_Init+0x29c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d863      	bhi.n	80019aa <HAL_GPIO_Init+0x12e>
 80018e2:	4a8e      	ldr	r2, [pc, #568]	; (8001b1c <HAL_GPIO_Init+0x2a0>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d046      	beq.n	8001976 <HAL_GPIO_Init+0xfa>
 80018e8:	4a8c      	ldr	r2, [pc, #560]	; (8001b1c <HAL_GPIO_Init+0x2a0>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d85d      	bhi.n	80019aa <HAL_GPIO_Init+0x12e>
 80018ee:	2b12      	cmp	r3, #18
 80018f0:	d82a      	bhi.n	8001948 <HAL_GPIO_Init+0xcc>
 80018f2:	2b12      	cmp	r3, #18
 80018f4:	d859      	bhi.n	80019aa <HAL_GPIO_Init+0x12e>
 80018f6:	a201      	add	r2, pc, #4	; (adr r2, 80018fc <HAL_GPIO_Init+0x80>)
 80018f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fc:	08001977 	.word	0x08001977
 8001900:	08001951 	.word	0x08001951
 8001904:	08001963 	.word	0x08001963
 8001908:	080019a5 	.word	0x080019a5
 800190c:	080019ab 	.word	0x080019ab
 8001910:	080019ab 	.word	0x080019ab
 8001914:	080019ab 	.word	0x080019ab
 8001918:	080019ab 	.word	0x080019ab
 800191c:	080019ab 	.word	0x080019ab
 8001920:	080019ab 	.word	0x080019ab
 8001924:	080019ab 	.word	0x080019ab
 8001928:	080019ab 	.word	0x080019ab
 800192c:	080019ab 	.word	0x080019ab
 8001930:	080019ab 	.word	0x080019ab
 8001934:	080019ab 	.word	0x080019ab
 8001938:	080019ab 	.word	0x080019ab
 800193c:	080019ab 	.word	0x080019ab
 8001940:	08001959 	.word	0x08001959
 8001944:	0800196d 	.word	0x0800196d
 8001948:	4a75      	ldr	r2, [pc, #468]	; (8001b20 <HAL_GPIO_Init+0x2a4>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d013      	beq.n	8001976 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800194e:	e02c      	b.n	80019aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	623b      	str	r3, [r7, #32]
          break;
 8001956:	e029      	b.n	80019ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	3304      	adds	r3, #4
 800195e:	623b      	str	r3, [r7, #32]
          break;
 8001960:	e024      	b.n	80019ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	3308      	adds	r3, #8
 8001968:	623b      	str	r3, [r7, #32]
          break;
 800196a:	e01f      	b.n	80019ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	330c      	adds	r3, #12
 8001972:	623b      	str	r3, [r7, #32]
          break;
 8001974:	e01a      	b.n	80019ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d102      	bne.n	8001984 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800197e:	2304      	movs	r3, #4
 8001980:	623b      	str	r3, [r7, #32]
          break;
 8001982:	e013      	b.n	80019ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d105      	bne.n	8001998 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800198c:	2308      	movs	r3, #8
 800198e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69fa      	ldr	r2, [r7, #28]
 8001994:	611a      	str	r2, [r3, #16]
          break;
 8001996:	e009      	b.n	80019ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001998:	2308      	movs	r3, #8
 800199a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	615a      	str	r2, [r3, #20]
          break;
 80019a2:	e003      	b.n	80019ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019a4:	2300      	movs	r3, #0
 80019a6:	623b      	str	r3, [r7, #32]
          break;
 80019a8:	e000      	b.n	80019ac <HAL_GPIO_Init+0x130>
          break;
 80019aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	2bff      	cmp	r3, #255	; 0xff
 80019b0:	d801      	bhi.n	80019b6 <HAL_GPIO_Init+0x13a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	e001      	b.n	80019ba <HAL_GPIO_Init+0x13e>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3304      	adds	r3, #4
 80019ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	2bff      	cmp	r3, #255	; 0xff
 80019c0:	d802      	bhi.n	80019c8 <HAL_GPIO_Init+0x14c>
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	e002      	b.n	80019ce <HAL_GPIO_Init+0x152>
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	3b08      	subs	r3, #8
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	210f      	movs	r1, #15
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	fa01 f303 	lsl.w	r3, r1, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	401a      	ands	r2, r3
 80019e0:	6a39      	ldr	r1, [r7, #32]
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	431a      	orrs	r2, r3
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 80c1 	beq.w	8001b7e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019fc:	4b49      	ldr	r3, [pc, #292]	; (8001b24 <HAL_GPIO_Init+0x2a8>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	4a48      	ldr	r2, [pc, #288]	; (8001b24 <HAL_GPIO_Init+0x2a8>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6193      	str	r3, [r2, #24]
 8001a08:	4b46      	ldr	r3, [pc, #280]	; (8001b24 <HAL_GPIO_Init+0x2a8>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a14:	4a44      	ldr	r2, [pc, #272]	; (8001b28 <HAL_GPIO_Init+0x2ac>)
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	089b      	lsrs	r3, r3, #2
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	220f      	movs	r2, #15
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	4013      	ands	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a3c      	ldr	r2, [pc, #240]	; (8001b2c <HAL_GPIO_Init+0x2b0>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d01f      	beq.n	8001a80 <HAL_GPIO_Init+0x204>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a3b      	ldr	r2, [pc, #236]	; (8001b30 <HAL_GPIO_Init+0x2b4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d019      	beq.n	8001a7c <HAL_GPIO_Init+0x200>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a3a      	ldr	r2, [pc, #232]	; (8001b34 <HAL_GPIO_Init+0x2b8>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d013      	beq.n	8001a78 <HAL_GPIO_Init+0x1fc>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a39      	ldr	r2, [pc, #228]	; (8001b38 <HAL_GPIO_Init+0x2bc>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d00d      	beq.n	8001a74 <HAL_GPIO_Init+0x1f8>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a38      	ldr	r2, [pc, #224]	; (8001b3c <HAL_GPIO_Init+0x2c0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d007      	beq.n	8001a70 <HAL_GPIO_Init+0x1f4>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a37      	ldr	r2, [pc, #220]	; (8001b40 <HAL_GPIO_Init+0x2c4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d101      	bne.n	8001a6c <HAL_GPIO_Init+0x1f0>
 8001a68:	2305      	movs	r3, #5
 8001a6a:	e00a      	b.n	8001a82 <HAL_GPIO_Init+0x206>
 8001a6c:	2306      	movs	r3, #6
 8001a6e:	e008      	b.n	8001a82 <HAL_GPIO_Init+0x206>
 8001a70:	2304      	movs	r3, #4
 8001a72:	e006      	b.n	8001a82 <HAL_GPIO_Init+0x206>
 8001a74:	2303      	movs	r3, #3
 8001a76:	e004      	b.n	8001a82 <HAL_GPIO_Init+0x206>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e002      	b.n	8001a82 <HAL_GPIO_Init+0x206>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <HAL_GPIO_Init+0x206>
 8001a80:	2300      	movs	r3, #0
 8001a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a84:	f002 0203 	and.w	r2, r2, #3
 8001a88:	0092      	lsls	r2, r2, #2
 8001a8a:	4093      	lsls	r3, r2
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a92:	4925      	ldr	r1, [pc, #148]	; (8001b28 <HAL_GPIO_Init+0x2ac>)
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	3302      	adds	r3, #2
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d006      	beq.n	8001aba <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001aac:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <HAL_GPIO_Init+0x2c8>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4924      	ldr	r1, [pc, #144]	; (8001b44 <HAL_GPIO_Init+0x2c8>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	600b      	str	r3, [r1, #0]
 8001ab8:	e006      	b.n	8001ac8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001aba:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <HAL_GPIO_Init+0x2c8>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	4920      	ldr	r1, [pc, #128]	; (8001b44 <HAL_GPIO_Init+0x2c8>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d006      	beq.n	8001ae2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <HAL_GPIO_Init+0x2c8>)
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	491a      	ldr	r1, [pc, #104]	; (8001b44 <HAL_GPIO_Init+0x2c8>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ae2:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <HAL_GPIO_Init+0x2c8>)
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	4916      	ldr	r1, [pc, #88]	; (8001b44 <HAL_GPIO_Init+0x2c8>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d025      	beq.n	8001b48 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <HAL_GPIO_Init+0x2c8>)
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	4910      	ldr	r1, [pc, #64]	; (8001b44 <HAL_GPIO_Init+0x2c8>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	608b      	str	r3, [r1, #8]
 8001b08:	e025      	b.n	8001b56 <HAL_GPIO_Init+0x2da>
 8001b0a:	bf00      	nop
 8001b0c:	10320000 	.word	0x10320000
 8001b10:	10310000 	.word	0x10310000
 8001b14:	10220000 	.word	0x10220000
 8001b18:	10210000 	.word	0x10210000
 8001b1c:	10120000 	.word	0x10120000
 8001b20:	10110000 	.word	0x10110000
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40010000 	.word	0x40010000
 8001b2c:	40010800 	.word	0x40010800
 8001b30:	40010c00 	.word	0x40010c00
 8001b34:	40011000 	.word	0x40011000
 8001b38:	40011400 	.word	0x40011400
 8001b3c:	40011800 	.word	0x40011800
 8001b40:	40011c00 	.word	0x40011c00
 8001b44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b48:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_GPIO_Init+0x324>)
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	4913      	ldr	r1, [pc, #76]	; (8001ba0 <HAL_GPIO_Init+0x324>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d006      	beq.n	8001b70 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <HAL_GPIO_Init+0x324>)
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	490e      	ldr	r1, [pc, #56]	; (8001ba0 <HAL_GPIO_Init+0x324>)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	60cb      	str	r3, [r1, #12]
 8001b6e:	e006      	b.n	8001b7e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_GPIO_Init+0x324>)
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	4909      	ldr	r1, [pc, #36]	; (8001ba0 <HAL_GPIO_Init+0x324>)
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	3301      	adds	r3, #1
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f47f ae7e 	bne.w	8001890 <HAL_GPIO_Init+0x14>
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	372c      	adds	r7, #44	; 0x2c
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	40010400 	.word	0x40010400

08001ba4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d002      	beq.n	8001bc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	73fb      	strb	r3, [r7, #15]
 8001bc0:	e001      	b.n	8001bc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	807b      	strh	r3, [r7, #2]
 8001bde:	4613      	mov	r3, r2
 8001be0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001be2:	787b      	ldrb	r3, [r7, #1]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001be8:	887a      	ldrh	r2, [r7, #2]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bee:	e003      	b.n	8001bf8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bf0:	887b      	ldrh	r3, [r7, #2]
 8001bf2:	041a      	lsls	r2, r3, #16
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	611a      	str	r2, [r3, #16]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
	...

08001c04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e272      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8087 	beq.w	8001d32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c24:	4b92      	ldr	r3, [pc, #584]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 030c 	and.w	r3, r3, #12
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d00c      	beq.n	8001c4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c30:	4b8f      	ldr	r3, [pc, #572]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 030c 	and.w	r3, r3, #12
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d112      	bne.n	8001c62 <HAL_RCC_OscConfig+0x5e>
 8001c3c:	4b8c      	ldr	r3, [pc, #560]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c48:	d10b      	bne.n	8001c62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4a:	4b89      	ldr	r3, [pc, #548]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d06c      	beq.n	8001d30 <HAL_RCC_OscConfig+0x12c>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d168      	bne.n	8001d30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e24c      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6a:	d106      	bne.n	8001c7a <HAL_RCC_OscConfig+0x76>
 8001c6c:	4b80      	ldr	r3, [pc, #512]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a7f      	ldr	r2, [pc, #508]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	e02e      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd4>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x98>
 8001c82:	4b7b      	ldr	r3, [pc, #492]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a7a      	ldr	r2, [pc, #488]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b78      	ldr	r3, [pc, #480]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a77      	ldr	r2, [pc, #476]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e01d      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd4>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0xbc>
 8001ca6:	4b72      	ldr	r3, [pc, #456]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a71      	ldr	r2, [pc, #452]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b6f      	ldr	r3, [pc, #444]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a6e      	ldr	r2, [pc, #440]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e00b      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd4>
 8001cc0:	4b6b      	ldr	r3, [pc, #428]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a6a      	ldr	r2, [pc, #424]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b68      	ldr	r3, [pc, #416]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a67      	ldr	r2, [pc, #412]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fcba 	bl	8001658 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fcb6 	bl	8001658 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e200      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfa:	4b5d      	ldr	r3, [pc, #372]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xe4>
 8001d06:	e014      	b.n	8001d32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7ff fca6 	bl	8001658 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff fca2 	bl	8001658 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e1ec      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d22:	4b53      	ldr	r3, [pc, #332]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x10c>
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d063      	beq.n	8001e06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d3e:	4b4c      	ldr	r3, [pc, #304]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00b      	beq.n	8001d62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d4a:	4b49      	ldr	r3, [pc, #292]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d11c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x18c>
 8001d56:	4b46      	ldr	r3, [pc, #280]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d116      	bne.n	8001d90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d62:	4b43      	ldr	r3, [pc, #268]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d005      	beq.n	8001d7a <HAL_RCC_OscConfig+0x176>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d001      	beq.n	8001d7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e1c0      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7a:	4b3d      	ldr	r3, [pc, #244]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4939      	ldr	r1, [pc, #228]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8e:	e03a      	b.n	8001e06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d020      	beq.n	8001dda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d98:	4b36      	ldr	r3, [pc, #216]	; (8001e74 <HAL_RCC_OscConfig+0x270>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9e:	f7ff fc5b 	bl	8001658 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da6:	f7ff fc57 	bl	8001658 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e1a1      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db8:	4b2d      	ldr	r3, [pc, #180]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc4:	4b2a      	ldr	r3, [pc, #168]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4927      	ldr	r1, [pc, #156]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	600b      	str	r3, [r1, #0]
 8001dd8:	e015      	b.n	8001e06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dda:	4b26      	ldr	r3, [pc, #152]	; (8001e74 <HAL_RCC_OscConfig+0x270>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7ff fc3a 	bl	8001658 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de8:	f7ff fc36 	bl	8001658 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e180      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d03a      	beq.n	8001e88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d019      	beq.n	8001e4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1a:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <HAL_RCC_OscConfig+0x274>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e20:	f7ff fc1a 	bl	8001658 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e28:	f7ff fc16 	bl	8001658 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e160      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e46:	2001      	movs	r0, #1
 8001e48:	f000 fad8 	bl	80023fc <RCC_Delay>
 8001e4c:	e01c      	b.n	8001e88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <HAL_RCC_OscConfig+0x274>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e54:	f7ff fc00 	bl	8001658 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5a:	e00f      	b.n	8001e7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5c:	f7ff fbfc 	bl	8001658 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d908      	bls.n	8001e7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e146      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	42420000 	.word	0x42420000
 8001e78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e7c:	4b92      	ldr	r3, [pc, #584]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1e9      	bne.n	8001e5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80a6 	beq.w	8001fe2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9a:	4b8b      	ldr	r3, [pc, #556]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10d      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	4b88      	ldr	r3, [pc, #544]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4a87      	ldr	r2, [pc, #540]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	61d3      	str	r3, [r2, #28]
 8001eb2:	4b85      	ldr	r3, [pc, #532]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec2:	4b82      	ldr	r3, [pc, #520]	; (80020cc <HAL_RCC_OscConfig+0x4c8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d118      	bne.n	8001f00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ece:	4b7f      	ldr	r3, [pc, #508]	; (80020cc <HAL_RCC_OscConfig+0x4c8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a7e      	ldr	r2, [pc, #504]	; (80020cc <HAL_RCC_OscConfig+0x4c8>)
 8001ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eda:	f7ff fbbd 	bl	8001658 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee2:	f7ff fbb9 	bl	8001658 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b64      	cmp	r3, #100	; 0x64
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e103      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef4:	4b75      	ldr	r3, [pc, #468]	; (80020cc <HAL_RCC_OscConfig+0x4c8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d106      	bne.n	8001f16 <HAL_RCC_OscConfig+0x312>
 8001f08:	4b6f      	ldr	r3, [pc, #444]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4a6e      	ldr	r2, [pc, #440]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6213      	str	r3, [r2, #32]
 8001f14:	e02d      	b.n	8001f72 <HAL_RCC_OscConfig+0x36e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x334>
 8001f1e:	4b6a      	ldr	r3, [pc, #424]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	4a69      	ldr	r2, [pc, #420]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	f023 0301 	bic.w	r3, r3, #1
 8001f28:	6213      	str	r3, [r2, #32]
 8001f2a:	4b67      	ldr	r3, [pc, #412]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	4a66      	ldr	r2, [pc, #408]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	f023 0304 	bic.w	r3, r3, #4
 8001f34:	6213      	str	r3, [r2, #32]
 8001f36:	e01c      	b.n	8001f72 <HAL_RCC_OscConfig+0x36e>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	2b05      	cmp	r3, #5
 8001f3e:	d10c      	bne.n	8001f5a <HAL_RCC_OscConfig+0x356>
 8001f40:	4b61      	ldr	r3, [pc, #388]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	4a60      	ldr	r2, [pc, #384]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	f043 0304 	orr.w	r3, r3, #4
 8001f4a:	6213      	str	r3, [r2, #32]
 8001f4c:	4b5e      	ldr	r3, [pc, #376]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	4a5d      	ldr	r2, [pc, #372]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6213      	str	r3, [r2, #32]
 8001f58:	e00b      	b.n	8001f72 <HAL_RCC_OscConfig+0x36e>
 8001f5a:	4b5b      	ldr	r3, [pc, #364]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	4a5a      	ldr	r2, [pc, #360]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	f023 0301 	bic.w	r3, r3, #1
 8001f64:	6213      	str	r3, [r2, #32]
 8001f66:	4b58      	ldr	r3, [pc, #352]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4a57      	ldr	r2, [pc, #348]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	f023 0304 	bic.w	r3, r3, #4
 8001f70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d015      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7a:	f7ff fb6d 	bl	8001658 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f80:	e00a      	b.n	8001f98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f7ff fb69 	bl	8001658 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e0b1      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f98:	4b4b      	ldr	r3, [pc, #300]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0ee      	beq.n	8001f82 <HAL_RCC_OscConfig+0x37e>
 8001fa4:	e014      	b.n	8001fd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa6:	f7ff fb57 	bl	8001658 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fac:	e00a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fae:	f7ff fb53 	bl	8001658 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e09b      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc4:	4b40      	ldr	r3, [pc, #256]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1ee      	bne.n	8001fae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fd0:	7dfb      	ldrb	r3, [r7, #23]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d105      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd6:	4b3c      	ldr	r3, [pc, #240]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	4a3b      	ldr	r2, [pc, #236]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 8087 	beq.w	80020fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fec:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d061      	beq.n	80020bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d146      	bne.n	800208e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002000:	4b33      	ldr	r3, [pc, #204]	; (80020d0 <HAL_RCC_OscConfig+0x4cc>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7ff fb27 	bl	8001658 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200e:	f7ff fb23 	bl	8001658 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e06d      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002020:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f0      	bne.n	800200e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002034:	d108      	bne.n	8002048 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002036:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	4921      	ldr	r1, [pc, #132]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002048:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a19      	ldr	r1, [r3, #32]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	430b      	orrs	r3, r1
 800205a:	491b      	ldr	r1, [pc, #108]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002060:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <HAL_RCC_OscConfig+0x4cc>)
 8002062:	2201      	movs	r2, #1
 8002064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002066:	f7ff faf7 	bl	8001658 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206e:	f7ff faf3 	bl	8001658 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e03d      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0f0      	beq.n	800206e <HAL_RCC_OscConfig+0x46a>
 800208c:	e035      	b.n	80020fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <HAL_RCC_OscConfig+0x4cc>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7ff fae0 	bl	8001658 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209c:	f7ff fadc 	bl	8001658 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e026      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x498>
 80020ba:	e01e      	b.n	80020fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d107      	bne.n	80020d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e019      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40007000 	.word	0x40007000
 80020d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_RCC_OscConfig+0x500>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d106      	bne.n	80020f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d001      	beq.n	80020fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000

08002108 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0d0      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800211c:	4b6a      	ldr	r3, [pc, #424]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d910      	bls.n	800214c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b67      	ldr	r3, [pc, #412]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 0207 	bic.w	r2, r3, #7
 8002132:	4965      	ldr	r1, [pc, #404]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b63      	ldr	r3, [pc, #396]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0b8      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d020      	beq.n	800219a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002164:	4b59      	ldr	r3, [pc, #356]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4a58      	ldr	r2, [pc, #352]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800216e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800217c:	4b53      	ldr	r3, [pc, #332]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	4a52      	ldr	r2, [pc, #328]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002186:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002188:	4b50      	ldr	r3, [pc, #320]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	494d      	ldr	r1, [pc, #308]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	4313      	orrs	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d040      	beq.n	8002228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d107      	bne.n	80021be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	4b47      	ldr	r3, [pc, #284]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d115      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e07f      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d107      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c6:	4b41      	ldr	r3, [pc, #260]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e073      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d6:	4b3d      	ldr	r3, [pc, #244]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e06b      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021e6:	4b39      	ldr	r3, [pc, #228]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f023 0203 	bic.w	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4936      	ldr	r1, [pc, #216]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f8:	f7ff fa2e 	bl	8001658 <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002200:	f7ff fa2a 	bl	8001658 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	; 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e053      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	4b2d      	ldr	r3, [pc, #180]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 020c 	and.w	r2, r3, #12
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	429a      	cmp	r2, r3
 8002226:	d1eb      	bne.n	8002200 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002228:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d210      	bcs.n	8002258 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 0207 	bic.w	r2, r3, #7
 800223e:	4922      	ldr	r1, [pc, #136]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e032      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4916      	ldr	r1, [pc, #88]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d009      	beq.n	8002296 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	490e      	ldr	r1, [pc, #56]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	4313      	orrs	r3, r2
 8002294:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002296:	f000 f821 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 800229a:	4602      	mov	r2, r0
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	490a      	ldr	r1, [pc, #40]	; (80022d0 <HAL_RCC_ClockConfig+0x1c8>)
 80022a8:	5ccb      	ldrb	r3, [r1, r3]
 80022aa:	fa22 f303 	lsr.w	r3, r2, r3
 80022ae:	4a09      	ldr	r2, [pc, #36]	; (80022d4 <HAL_RCC_ClockConfig+0x1cc>)
 80022b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_RCC_ClockConfig+0x1d0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff f98c 	bl	80015d4 <HAL_InitTick>

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40022000 	.word	0x40022000
 80022cc:	40021000 	.word	0x40021000
 80022d0:	080039c0 	.word	0x080039c0
 80022d4:	20000000 	.word	0x20000000
 80022d8:	20000004 	.word	0x20000004

080022dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022dc:	b490      	push	{r4, r7}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022e2:	4b29      	ldr	r3, [pc, #164]	; (8002388 <HAL_RCC_GetSysClockFreq+0xac>)
 80022e4:	1d3c      	adds	r4, r7, #4
 80022e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022ec:	f240 2301 	movw	r3, #513	; 0x201
 80022f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002306:	4b21      	ldr	r3, [pc, #132]	; (800238c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b04      	cmp	r3, #4
 8002314:	d002      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0x40>
 8002316:	2b08      	cmp	r3, #8
 8002318:	d003      	beq.n	8002322 <HAL_RCC_GetSysClockFreq+0x46>
 800231a:	e02b      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800231c:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <HAL_RCC_GetSysClockFreq+0xb4>)
 800231e:	623b      	str	r3, [r7, #32]
      break;
 8002320:	e02b      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	0c9b      	lsrs	r3, r3, #18
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	3328      	adds	r3, #40	; 0x28
 800232c:	443b      	add	r3, r7
 800232e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002332:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d012      	beq.n	8002364 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800233e:	4b13      	ldr	r3, [pc, #76]	; (800238c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	0c5b      	lsrs	r3, r3, #17
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	3328      	adds	r3, #40	; 0x28
 800234a:	443b      	add	r3, r7
 800234c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002350:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	4a0e      	ldr	r2, [pc, #56]	; (8002390 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002356:	fb03 f202 	mul.w	r2, r3, r2
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
 8002362:	e004      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	4a0b      	ldr	r2, [pc, #44]	; (8002394 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002368:	fb02 f303 	mul.w	r3, r2, r3
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	623b      	str	r3, [r7, #32]
      break;
 8002372:	e002      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002376:	623b      	str	r3, [r7, #32]
      break;
 8002378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800237a:	6a3b      	ldr	r3, [r7, #32]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3728      	adds	r7, #40	; 0x28
 8002380:	46bd      	mov	sp, r7
 8002382:	bc90      	pop	{r4, r7}
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	080033c0 	.word	0x080033c0
 800238c:	40021000 	.word	0x40021000
 8002390:	007a1200 	.word	0x007a1200
 8002394:	003d0900 	.word	0x003d0900

08002398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800239c:	4b02      	ldr	r3, [pc, #8]	; (80023a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr
 80023a8:	20000000 	.word	0x20000000

080023ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023b0:	f7ff fff2 	bl	8002398 <HAL_RCC_GetHCLKFreq>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	0a1b      	lsrs	r3, r3, #8
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	4903      	ldr	r1, [pc, #12]	; (80023d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023c2:	5ccb      	ldrb	r3, [r1, r3]
 80023c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40021000 	.word	0x40021000
 80023d0:	080039d0 	.word	0x080039d0

080023d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023d8:	f7ff ffde 	bl	8002398 <HAL_RCC_GetHCLKFreq>
 80023dc:	4602      	mov	r2, r0
 80023de:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	0adb      	lsrs	r3, r3, #11
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	4903      	ldr	r1, [pc, #12]	; (80023f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ea:	5ccb      	ldrb	r3, [r1, r3]
 80023ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40021000 	.word	0x40021000
 80023f8:	080039d0 	.word	0x080039d0

080023fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002404:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <RCC_Delay+0x34>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <RCC_Delay+0x38>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	0a5b      	lsrs	r3, r3, #9
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	fb02 f303 	mul.w	r3, r2, r3
 8002416:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002418:	bf00      	nop
  }
  while (Delay --);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1e5a      	subs	r2, r3, #1
 800241e:	60fa      	str	r2, [r7, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f9      	bne.n	8002418 <RCC_Delay+0x1c>
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	20000000 	.word	0x20000000
 8002434:	10624dd3 	.word	0x10624dd3

08002438 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d004      	beq.n	8002454 <HAL_SRAM_Init+0x1c>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002452:	d101      	bne.n	8002458 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e038      	b.n	80024ca <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d106      	bne.n	8002472 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f7ff f83d 	bl	80014ec <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	3308      	adds	r3, #8
 800247a:	4619      	mov	r1, r3
 800247c:	4610      	mov	r0, r2
 800247e:	f000 fdcf 	bl	8003020 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	461a      	mov	r2, r3
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	f000 fe31 	bl	80030f4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6858      	ldr	r0, [r3, #4]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	f000 fe5c 	bl	800315c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	6892      	ldr	r2, [r2, #8]
 80024ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	6892      	ldr	r2, [r2, #8]
 80024b8:	f041 0101 	orr.w	r1, r1, #1
 80024bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e041      	b.n	8002568 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d106      	bne.n	80024fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7fe ff15 	bl	8001328 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2202      	movs	r2, #2
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3304      	adds	r3, #4
 800250e:	4619      	mov	r1, r3
 8002510:	4610      	mov	r0, r2
 8002512:	f000 f8eb 	bl	80026ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002586:	2302      	movs	r3, #2
 8002588:	e0ac      	b.n	80026e4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b0c      	cmp	r3, #12
 8002596:	f200 809f 	bhi.w	80026d8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800259a:	a201      	add	r2, pc, #4	; (adr r2, 80025a0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800259c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a0:	080025d5 	.word	0x080025d5
 80025a4:	080026d9 	.word	0x080026d9
 80025a8:	080026d9 	.word	0x080026d9
 80025ac:	080026d9 	.word	0x080026d9
 80025b0:	08002615 	.word	0x08002615
 80025b4:	080026d9 	.word	0x080026d9
 80025b8:	080026d9 	.word	0x080026d9
 80025bc:	080026d9 	.word	0x080026d9
 80025c0:	08002657 	.word	0x08002657
 80025c4:	080026d9 	.word	0x080026d9
 80025c8:	080026d9 	.word	0x080026d9
 80025cc:	080026d9 	.word	0x080026d9
 80025d0:	08002697 	.word	0x08002697
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f900 	bl	80027e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699a      	ldr	r2, [r3, #24]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0208 	orr.w	r2, r2, #8
 80025ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699a      	ldr	r2, [r3, #24]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0204 	bic.w	r2, r2, #4
 80025fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6999      	ldr	r1, [r3, #24]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	691a      	ldr	r2, [r3, #16]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	619a      	str	r2, [r3, #24]
      break;
 8002612:	e062      	b.n	80026da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68b9      	ldr	r1, [r7, #8]
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f950 	bl	80028c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699a      	ldr	r2, [r3, #24]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800262e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699a      	ldr	r2, [r3, #24]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800263e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6999      	ldr	r1, [r3, #24]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	021a      	lsls	r2, r3, #8
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	619a      	str	r2, [r3, #24]
      break;
 8002654:	e041      	b.n	80026da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68b9      	ldr	r1, [r7, #8]
 800265c:	4618      	mov	r0, r3
 800265e:	f000 f9a3 	bl	80029a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	69da      	ldr	r2, [r3, #28]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 0208 	orr.w	r2, r2, #8
 8002670:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69da      	ldr	r2, [r3, #28]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0204 	bic.w	r2, r2, #4
 8002680:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	69d9      	ldr	r1, [r3, #28]
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	61da      	str	r2, [r3, #28]
      break;
 8002694:	e021      	b.n	80026da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68b9      	ldr	r1, [r7, #8]
 800269c:	4618      	mov	r0, r3
 800269e:	f000 f9f7 	bl	8002a90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	69da      	ldr	r2, [r3, #28]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69da      	ldr	r2, [r3, #28]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69d9      	ldr	r1, [r3, #28]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	021a      	lsls	r2, r3, #8
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	61da      	str	r2, [r3, #28]
      break;
 80026d6:	e000      	b.n	80026da <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80026d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a33      	ldr	r2, [pc, #204]	; (80027cc <TIM_Base_SetConfig+0xe0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d013      	beq.n	800272c <TIM_Base_SetConfig+0x40>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a32      	ldr	r2, [pc, #200]	; (80027d0 <TIM_Base_SetConfig+0xe4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00f      	beq.n	800272c <TIM_Base_SetConfig+0x40>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002712:	d00b      	beq.n	800272c <TIM_Base_SetConfig+0x40>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a2f      	ldr	r2, [pc, #188]	; (80027d4 <TIM_Base_SetConfig+0xe8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d007      	beq.n	800272c <TIM_Base_SetConfig+0x40>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a2e      	ldr	r2, [pc, #184]	; (80027d8 <TIM_Base_SetConfig+0xec>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d003      	beq.n	800272c <TIM_Base_SetConfig+0x40>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a2d      	ldr	r2, [pc, #180]	; (80027dc <TIM_Base_SetConfig+0xf0>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d108      	bne.n	800273e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a22      	ldr	r2, [pc, #136]	; (80027cc <TIM_Base_SetConfig+0xe0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d013      	beq.n	800276e <TIM_Base_SetConfig+0x82>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a21      	ldr	r2, [pc, #132]	; (80027d0 <TIM_Base_SetConfig+0xe4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00f      	beq.n	800276e <TIM_Base_SetConfig+0x82>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002754:	d00b      	beq.n	800276e <TIM_Base_SetConfig+0x82>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a1e      	ldr	r2, [pc, #120]	; (80027d4 <TIM_Base_SetConfig+0xe8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d007      	beq.n	800276e <TIM_Base_SetConfig+0x82>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a1d      	ldr	r2, [pc, #116]	; (80027d8 <TIM_Base_SetConfig+0xec>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d003      	beq.n	800276e <TIM_Base_SetConfig+0x82>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a1c      	ldr	r2, [pc, #112]	; (80027dc <TIM_Base_SetConfig+0xf0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d108      	bne.n	8002780 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a09      	ldr	r2, [pc, #36]	; (80027cc <TIM_Base_SetConfig+0xe0>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d003      	beq.n	80027b4 <TIM_Base_SetConfig+0xc8>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a08      	ldr	r2, [pc, #32]	; (80027d0 <TIM_Base_SetConfig+0xe4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d103      	bne.n	80027bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	615a      	str	r2, [r3, #20]
}
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	40012c00 	.word	0x40012c00
 80027d0:	40013400 	.word	0x40013400
 80027d4:	40000400 	.word	0x40000400
 80027d8:	40000800 	.word	0x40000800
 80027dc:	40000c00 	.word	0x40000c00

080027e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	f023 0201 	bic.w	r2, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800280e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f023 0303 	bic.w	r3, r3, #3
 8002816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f023 0302 	bic.w	r3, r3, #2
 8002828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4313      	orrs	r3, r2
 8002832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a20      	ldr	r2, [pc, #128]	; (80028b8 <TIM_OC1_SetConfig+0xd8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d003      	beq.n	8002844 <TIM_OC1_SetConfig+0x64>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a1f      	ldr	r2, [pc, #124]	; (80028bc <TIM_OC1_SetConfig+0xdc>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d10c      	bne.n	800285e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f023 0308 	bic.w	r3, r3, #8
 800284a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	4313      	orrs	r3, r2
 8002854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f023 0304 	bic.w	r3, r3, #4
 800285c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a15      	ldr	r2, [pc, #84]	; (80028b8 <TIM_OC1_SetConfig+0xd8>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d003      	beq.n	800286e <TIM_OC1_SetConfig+0x8e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a14      	ldr	r2, [pc, #80]	; (80028bc <TIM_OC1_SetConfig+0xdc>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d111      	bne.n	8002892 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800287c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	621a      	str	r2, [r3, #32]
}
 80028ac:	bf00      	nop
 80028ae:	371c      	adds	r7, #28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40012c00 	.word	0x40012c00
 80028bc:	40013400 	.word	0x40013400

080028c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	f023 0210 	bic.w	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4313      	orrs	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f023 0320 	bic.w	r3, r3, #32
 800290a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4313      	orrs	r3, r2
 8002916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a21      	ldr	r2, [pc, #132]	; (80029a0 <TIM_OC2_SetConfig+0xe0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d003      	beq.n	8002928 <TIM_OC2_SetConfig+0x68>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a20      	ldr	r2, [pc, #128]	; (80029a4 <TIM_OC2_SetConfig+0xe4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d10d      	bne.n	8002944 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800292e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4313      	orrs	r3, r2
 800293a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002942:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a16      	ldr	r2, [pc, #88]	; (80029a0 <TIM_OC2_SetConfig+0xe0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d003      	beq.n	8002954 <TIM_OC2_SetConfig+0x94>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a15      	ldr	r2, [pc, #84]	; (80029a4 <TIM_OC2_SetConfig+0xe4>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d113      	bne.n	800297c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800295a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002962:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	621a      	str	r2, [r3, #32]
}
 8002996:	bf00      	nop
 8002998:	371c      	adds	r7, #28
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	40012c00 	.word	0x40012c00
 80029a4:	40013400 	.word	0x40013400

080029a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f023 0303 	bic.w	r3, r3, #3
 80029de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	021b      	lsls	r3, r3, #8
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a21      	ldr	r2, [pc, #132]	; (8002a88 <TIM_OC3_SetConfig+0xe0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d003      	beq.n	8002a0e <TIM_OC3_SetConfig+0x66>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a20      	ldr	r2, [pc, #128]	; (8002a8c <TIM_OC3_SetConfig+0xe4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d10d      	bne.n	8002a2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	021b      	lsls	r3, r3, #8
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a16      	ldr	r2, [pc, #88]	; (8002a88 <TIM_OC3_SetConfig+0xe0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d003      	beq.n	8002a3a <TIM_OC3_SetConfig+0x92>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a15      	ldr	r2, [pc, #84]	; (8002a8c <TIM_OC3_SetConfig+0xe4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d113      	bne.n	8002a62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	621a      	str	r2, [r3, #32]
}
 8002a7c:	bf00      	nop
 8002a7e:	371c      	adds	r7, #28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40012c00 	.word	0x40012c00
 8002a8c:	40013400 	.word	0x40013400

08002a90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	021b      	lsls	r3, r3, #8
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ada:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	031b      	lsls	r3, r3, #12
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a11      	ldr	r2, [pc, #68]	; (8002b30 <TIM_OC4_SetConfig+0xa0>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d003      	beq.n	8002af8 <TIM_OC4_SetConfig+0x68>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a10      	ldr	r2, [pc, #64]	; (8002b34 <TIM_OC4_SetConfig+0xa4>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d109      	bne.n	8002b0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002afe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	019b      	lsls	r3, r3, #6
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	621a      	str	r2, [r3, #32]
}
 8002b26:	bf00      	nop
 8002b28:	371c      	adds	r7, #28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr
 8002b30:	40012c00 	.word	0x40012c00
 8002b34:	40013400 	.word	0x40013400

08002b38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e050      	b.n	8002bf2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a1b      	ldr	r2, [pc, #108]	; (8002bfc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d018      	beq.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a19      	ldr	r2, [pc, #100]	; (8002c00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d013      	beq.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba6:	d00e      	beq.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a15      	ldr	r2, [pc, #84]	; (8002c04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d009      	beq.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a14      	ldr	r2, [pc, #80]	; (8002c08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d004      	beq.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a12      	ldr	r2, [pc, #72]	; (8002c0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d10c      	bne.n	8002be0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	40012c00 	.word	0x40012c00
 8002c00:	40013400 	.word	0x40013400
 8002c04:	40000400 	.word	0x40000400
 8002c08:	40000800 	.word	0x40000800
 8002c0c:	40000c00 	.word	0x40000c00

08002c10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e03d      	b.n	8002ca8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e03f      	b.n	8002d44 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d106      	bne.n	8002cde <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7fe fb77 	bl	80013cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2224      	movs	r2, #36	; 0x24
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cf4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f904 	bl	8002f04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691a      	ldr	r2, [r3, #16]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d0a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d1a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d2a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2220      	movs	r2, #32
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08a      	sub	sp, #40	; 0x28
 8002d50:	af02      	add	r7, sp, #8
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d17c      	bne.n	8002e66 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <HAL_UART_Transmit+0x2c>
 8002d72:	88fb      	ldrh	r3, [r7, #6]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e075      	b.n	8002e68 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_UART_Transmit+0x3e>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e06e      	b.n	8002e68 <HAL_UART_Transmit+0x11c>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2221      	movs	r2, #33	; 0x21
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002da0:	f7fe fc5a 	bl	8001658 <HAL_GetTick>
 8002da4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	88fa      	ldrh	r2, [r7, #6]
 8002daa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	88fa      	ldrh	r2, [r7, #6]
 8002db0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dba:	d108      	bne.n	8002dce <HAL_UART_Transmit+0x82>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d104      	bne.n	8002dce <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	61bb      	str	r3, [r7, #24]
 8002dcc:	e003      	b.n	8002dd6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002dde:	e02a      	b.n	8002e36 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	2200      	movs	r2, #0
 8002de8:	2180      	movs	r1, #128	; 0x80
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f840 	bl	8002e70 <UART_WaitOnFlagUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e036      	b.n	8002e68 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10b      	bne.n	8002e18 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e0e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	3302      	adds	r3, #2
 8002e14:	61bb      	str	r3, [r7, #24]
 8002e16:	e007      	b.n	8002e28 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	781a      	ldrb	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3301      	adds	r3, #1
 8002e26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1cf      	bne.n	8002de0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2200      	movs	r2, #0
 8002e48:	2140      	movs	r1, #64	; 0x40
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 f810 	bl	8002e70 <UART_WaitOnFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e006      	b.n	8002e68 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e000      	b.n	8002e68 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e66:	2302      	movs	r3, #2
  }
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3720      	adds	r7, #32
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e80:	e02c      	b.n	8002edc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e88:	d028      	beq.n	8002edc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d007      	beq.n	8002ea0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e90:	f7fe fbe2 	bl	8001658 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d21d      	bcs.n	8002edc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002eae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0201 	bic.w	r2, r2, #1
 8002ebe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e00f      	b.n	8002efc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	bf0c      	ite	eq
 8002eec:	2301      	moveq	r3, #1
 8002eee:	2300      	movne	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d0c3      	beq.n	8002e82 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f3e:	f023 030c 	bic.w	r3, r3, #12
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6812      	ldr	r2, [r2, #0]
 8002f46:	68b9      	ldr	r1, [r7, #8]
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699a      	ldr	r2, [r3, #24]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a2c      	ldr	r2, [pc, #176]	; (8003018 <UART_SetConfig+0x114>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d103      	bne.n	8002f74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f6c:	f7ff fa32 	bl	80023d4 <HAL_RCC_GetPCLK2Freq>
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	e002      	b.n	8002f7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f74:	f7ff fa1a 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 8002f78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	009a      	lsls	r2, r3, #2
 8002f84:	441a      	add	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f90:	4a22      	ldr	r2, [pc, #136]	; (800301c <UART_SetConfig+0x118>)
 8002f92:	fba2 2303 	umull	r2, r3, r2, r3
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	0119      	lsls	r1, r3, #4
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009a      	lsls	r2, r3, #2
 8002fa4:	441a      	add	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	; (800301c <UART_SetConfig+0x118>)
 8002fb2:	fba3 0302 	umull	r0, r3, r3, r2
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	2064      	movs	r0, #100	; 0x64
 8002fba:	fb00 f303 	mul.w	r3, r0, r3
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	3332      	adds	r3, #50	; 0x32
 8002fc4:	4a15      	ldr	r2, [pc, #84]	; (800301c <UART_SetConfig+0x118>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fd0:	4419      	add	r1, r3
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	009a      	lsls	r2, r3, #2
 8002fdc:	441a      	add	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	; (800301c <UART_SetConfig+0x118>)
 8002fea:	fba3 0302 	umull	r0, r3, r3, r2
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	2064      	movs	r0, #100	; 0x64
 8002ff2:	fb00 f303 	mul.w	r3, r0, r3
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	3332      	adds	r3, #50	; 0x32
 8002ffc:	4a07      	ldr	r2, [pc, #28]	; (800301c <UART_SetConfig+0x118>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	f003 020f 	and.w	r2, r3, #15
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	440a      	add	r2, r1
 800300e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003010:	bf00      	nop
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40013800 	.word	0x40013800
 800301c:	51eb851f 	.word	0x51eb851f

08003020 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	f023 0101 	bic.w	r1, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b08      	cmp	r3, #8
 8003048:	d102      	bne.n	8003050 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800304a:	2340      	movs	r3, #64	; 0x40
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	e001      	b.n	8003054 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8003060:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8003066:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800306c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8003072:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8003078:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800307e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8003084:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800308a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8003090:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8003096:	4313      	orrs	r3, r2
 8003098:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 80030ae:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <FSMC_NORSRAM_Init+0xd0>)
 80030b0:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030b8:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80030c0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	ea02 0103 	and.w	r1, r2, r3
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4319      	orrs	r1, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	371c      	adds	r7, #28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bc80      	pop	{r7}
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	0008fb7f 	.word	0x0008fb7f

080030f4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	1c5a      	adds	r2, r3, #1
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800310a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	431a      	orrs	r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	021b      	lsls	r3, r3, #8
 8003120:	431a      	orrs	r2, r3
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	041b      	lsls	r3, r3, #16
 8003128:	431a      	orrs	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	3b01      	subs	r3, #1
 8003130:	051b      	lsls	r3, r3, #20
 8003132:	431a      	orrs	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	3b02      	subs	r3, #2
 800313a:	061b      	lsls	r3, r3, #24
 800313c:	431a      	orrs	r2, r3
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	4313      	orrs	r3, r2
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	3201      	adds	r2, #1
 8003148:	4319      	orrs	r1, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr

0800315c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
 8003168:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003170:	d11d      	bne.n	80031ae <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800317a:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800317c:	4013      	ands	r3, r2
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	6811      	ldr	r1, [r2, #0]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	6852      	ldr	r2, [r2, #4]
 8003186:	0112      	lsls	r2, r2, #4
 8003188:	4311      	orrs	r1, r2
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	6892      	ldr	r2, [r2, #8]
 800318e:	0212      	lsls	r2, r2, #8
 8003190:	4311      	orrs	r1, r2
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	6992      	ldr	r2, [r2, #24]
 8003196:	4311      	orrs	r1, r2
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	68d2      	ldr	r2, [r2, #12]
 800319c:	0412      	lsls	r2, r2, #16
 800319e:	430a      	orrs	r2, r1
 80031a0:	ea43 0102 	orr.w	r1, r3, r2
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80031ac:	e005      	b.n	80031ba <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80031b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	cff00000 	.word	0xcff00000

080031cc <__libc_init_array>:
 80031cc:	b570      	push	{r4, r5, r6, lr}
 80031ce:	2600      	movs	r6, #0
 80031d0:	4d0c      	ldr	r5, [pc, #48]	; (8003204 <__libc_init_array+0x38>)
 80031d2:	4c0d      	ldr	r4, [pc, #52]	; (8003208 <__libc_init_array+0x3c>)
 80031d4:	1b64      	subs	r4, r4, r5
 80031d6:	10a4      	asrs	r4, r4, #2
 80031d8:	42a6      	cmp	r6, r4
 80031da:	d109      	bne.n	80031f0 <__libc_init_array+0x24>
 80031dc:	f000 f822 	bl	8003224 <_init>
 80031e0:	2600      	movs	r6, #0
 80031e2:	4d0a      	ldr	r5, [pc, #40]	; (800320c <__libc_init_array+0x40>)
 80031e4:	4c0a      	ldr	r4, [pc, #40]	; (8003210 <__libc_init_array+0x44>)
 80031e6:	1b64      	subs	r4, r4, r5
 80031e8:	10a4      	asrs	r4, r4, #2
 80031ea:	42a6      	cmp	r6, r4
 80031ec:	d105      	bne.n	80031fa <__libc_init_array+0x2e>
 80031ee:	bd70      	pop	{r4, r5, r6, pc}
 80031f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80031f4:	4798      	blx	r3
 80031f6:	3601      	adds	r6, #1
 80031f8:	e7ee      	b.n	80031d8 <__libc_init_array+0xc>
 80031fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80031fe:	4798      	blx	r3
 8003200:	3601      	adds	r6, #1
 8003202:	e7f2      	b.n	80031ea <__libc_init_array+0x1e>
 8003204:	080039d8 	.word	0x080039d8
 8003208:	080039d8 	.word	0x080039d8
 800320c:	080039d8 	.word	0x080039d8
 8003210:	080039dc 	.word	0x080039dc

08003214 <memset>:
 8003214:	4603      	mov	r3, r0
 8003216:	4402      	add	r2, r0
 8003218:	4293      	cmp	r3, r2
 800321a:	d100      	bne.n	800321e <memset+0xa>
 800321c:	4770      	bx	lr
 800321e:	f803 1b01 	strb.w	r1, [r3], #1
 8003222:	e7f9      	b.n	8003218 <memset+0x4>

08003224 <_init>:
 8003224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003226:	bf00      	nop
 8003228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800322a:	bc08      	pop	{r3}
 800322c:	469e      	mov	lr, r3
 800322e:	4770      	bx	lr

08003230 <_fini>:
 8003230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003232:	bf00      	nop
 8003234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003236:	bc08      	pop	{r3}
 8003238:	469e      	mov	lr, r3
 800323a:	4770      	bx	lr
